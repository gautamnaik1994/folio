"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */

(function (global, factory) {

	if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//

	var arr = [];

	var _slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};

	var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	    version = "2.1.4",


	// Define a local copy of jQuery
	jQuery = function jQuery(selector, context) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init(selector, context);
	},


	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([\da-z])/gi,


	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function fcamelCase(all, letter) {
		return letter.toUpperCase();
	};

	jQuery.fn = jQuery.prototype = {
		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function toArray() {
			return _slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function get(num) {
			return num != null ?

			// Return just the one element from the set
			num < 0 ? this[num + this.length] : this[num] :

			// Return all the elements in a clean array
			_slice.call(this);
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function pushStack(elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function each(callback, args) {
			return jQuery.each(this, callback, args);
		},

		map: function map(callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function slice() {
			return this.pushStack(_slice.apply(this, arguments));
		},

		first: function first() {
			return this.eq(0);
		},

		last: function last() {
			return this.eq(-1);
		},

		eq: function eq(i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function end() {
			return this.prevObject || this.constructor(null);
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// Skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {
			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {
				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function error(msg) {
			throw new Error(msg);
		},

		noop: function noop() {},

		isFunction: function isFunction(obj) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray,

		isWindow: function isWindow(obj) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function isNumeric(obj) {
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
		},

		isPlainObject: function isPlainObject(obj) {
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
				return false;
			}

			if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function isEmptyObject(obj) {
			var name;
			for (name in obj) {
				return false;
			}
			return true;
		},

		type: function type(obj) {
			if (obj == null) {
				return obj + "";
			}
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
		},

		// Evaluates a script in a global context
		globalEval: function globalEval(code) {
			var script,
			    indirect = eval;

			code = jQuery.trim(code);

			if (code) {
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if (code.indexOf("use strict") === 1) {
					script = document.createElement("script");
					script.text = code;
					document.head.appendChild(script).parentNode.removeChild(script);
				} else {
					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval
					indirect(code);
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function camelCase(string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		nodeName: function nodeName(elem, name) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		// args is for internal usage only
		each: function each(obj, callback, args) {
			var value,
			    i = 0,
			    length = obj.length,
			    isArray = isArraylike(obj);

			if (args) {
				if (isArray) {
					for (; i < length; i++) {
						value = callback.apply(obj[i], args);

						if (value === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						value = callback.apply(obj[i], args);

						if (value === false) {
							break;
						}
					}
				}

				// A special, fast, case for the most common use of each
			} else {
				if (isArray) {
					for (; i < length; i++) {
						value = callback.call(obj[i], i, obj[i]);

						if (value === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						value = callback.call(obj[i], i, obj[i]);

						if (value === false) {
							break;
						}
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function trim(text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function makeArray(arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArraylike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function inArray(elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		merge: function merge(first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function grep(elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function map(elems, callback, arg) {
			var value,
			    i = 0,
			    length = elems.length,
			    isArray = isArraylike(elems),
			    ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArray) {
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function proxy(fn, context) {
			var tmp, args, proxy;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			// Simulated bind
			args = _slice.call(arguments, 2);
			proxy = function proxy() {
				return fn.apply(context || this, args.concat(_slice.call(arguments)));
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArraylike(obj) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = "length" in obj && obj.length,
		    type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		if (obj.nodeType === 1 && length) {
			return true;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	/*!
  * Sizzle CSS Selector Engine v2.2.0-pre
  * http://sizzlejs.com/
  *
  * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2014-12-16
  */
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		// Local document vars
		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    sortOrder = function sortOrder(a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,


		// Instance methods
		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function indexOf(list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


		// Regular expressions

		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",


		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace("w", "w#"),


		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" + ")\\)|)",


		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + characterEncoding + ")"),
			"CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
			"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,
		    rescape = /'|\\/g,


		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function funescape(_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			// BMP codepoint
			String.fromCharCode(high + 0x10000) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function unloadHandler() {
			setDocument();
		};

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				// Leverage slice if possible
				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				// Support: IE<9
				// Otherwise append directly
				function (target, els) {
					var j = target.length,
					    i = 0;
					// Can't trust NodeList.length
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var match, elem, m, nodeType,
			// QSA vars
			i, groups, old, nid, newContext, newSelector;

			if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
				setDocument(context);
			}

			context = context || document;
			results = results || [];
			nodeType = context.nodeType;

			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			if (!seed && documentIsHTML) {

				// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
				if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
					// Speed-up: Sizzle("#ID")
					if (m = match[1]) {
						if (nodeType === 9) {
							elem = context.getElementById(m);
							// Check parentNode to catch when Blackberry 4.6 returns
							// nodes that are no longer in the document (jQuery #6963)
							if (elem && elem.parentNode) {
								// Handle the case where IE, Opera, and Webkit return items
								// by name instead of ID
								if (elem.id === m) {
									results.push(elem);
									return results;
								}
							} else {
								return results;
							}
						} else {
							// Context is not a document
							if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
								results.push(elem);
								return results;
							}
						}

						// Speed-up: Sizzle("TAG")
					} else if (match[2]) {
						push.apply(results, context.getElementsByTagName(selector));
						return results;

						// Speed-up: Sizzle(".CLASS")
					} else if ((m = match[3]) && support.getElementsByClassName) {
						push.apply(results, context.getElementsByClassName(m));
						return results;
					}
				}

				// QSA path
				if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
					nid = old = expando;
					newContext = context;
					newSelector = nodeType !== 1 && selector;

					// qSA works strangely on Element-rooted queries
					// We can work around this by specifying an extra ID on the root
					// and working up from there (Thanks to Andrew Dupont for the technique)
					// IE 8 doesn't work on object elements
					if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
						groups = tokenize(selector);

						if (old = context.getAttribute("id")) {
							nid = old.replace(rescape, "\\$&");
						} else {
							context.setAttribute("id", nid);
						}
						nid = "[id='" + nid + "'] ";

						i = groups.length;
						while (i--) {
							groups[i] = nid + toSelector(groups[i]);
						}
						newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						newSelector = groups.join(",");
					}

					if (newSelector) {
						try {
							push.apply(results, newContext.querySelectorAll(newSelector));
							return results;
						} catch (qsaError) {} finally {
							if (!old) {
								context.removeAttribute("id");
							}
						}
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
   * Create key-value caches of limited size
   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		/**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
   * Support testing using an element
   * @param {Function} fn Passed the created div and expects a boolean result
   */
		function assert(fn) {
			var div = document.createElement("div");

			try {
				return !!fn(div);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (div.parentNode) {
					div.parentNode.removeChild(div);
				}
				// release memory in IE
				div = null;
			}
		}

		/**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = attrs.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
		isXML = Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		/**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    parent,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			// If no document and documentElement is available, return
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Set our document
			document = doc;
			docElem = doc.documentElement;
			parent = doc.defaultView;

			// Support: IE>8
			// If iframe document is assigned to "document" variable and if iframe has been reloaded,
			// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
			// IE6-8 do not support the defaultView property so parent will be undefined
			if (parent && parent !== parent.top) {
				// IE11 does not have attachEvent, so all must suffer
				if (parent.addEventListener) {
					parent.addEventListener("unload", unloadHandler, false);
				} else if (parent.attachEvent) {
					parent.attachEvent("onunload", unloadHandler);
				}
			}

			/* Support tests
   ---------------------------------------------------------------------- */
			documentIsHTML = !isXML(doc);

			/* Attributes
   ---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (div) {
				div.className = "i";
				return !div.getAttribute("className");
			});

			/* getElement(s)By*
   ---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (div) {
				div.appendChild(doc.createComment(""));
				return !div.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(doc.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (div) {
				docElem.appendChild(div).id = expando;
				return !doc.getElementsByName || !doc.getElementsByName(expando).length;
			});

			// ID find and filter
			if (support.getById) {
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var m = context.getElementById(id);
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						return m && m.parentNode ? [m] : [];
					}
				};
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
			} else {
				// Support: IE6/7
				// getElementById is not reliable as a find shortcut
				delete Expr.find["ID"];

				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

					// DocumentFragment nodes don't have gEBTN
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName(tag);

				// Filter out possible comments
				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
   ---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See http://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if (support.qsa = rnative.test(doc.querySelectorAll)) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (div) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// http://bugs.jquery.com/ticket/12359
					docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (div.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!div.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
					if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!div.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibing-combinator selector` fails
					if (!div.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (div) {
					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = doc.createElement("input");
					input.setAttribute("type", "hidden");
					div.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (div.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (!div.querySelectorAll(":enabled").length) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					div.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (div) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(div, "div");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(div, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
   ---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully does not implement inclusive descendent
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			/* Sorting
   ---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ? function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				// Otherwise we know they are disconnected
				1;

				// Disconnected nodes
				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					// Choose the first element that is related to our preferred document
					if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck(ap[i], bp[i]) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return doc;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			// Make sure that attribute selectors are quoted
			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while (node = elem[i++]) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function ATTR(match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function CHILD(match) {
					/* matches from matchExpr["CHILD"]
     	1 type (only|nth|...)
     	2 what (child|of-type)
     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
     	4 xn-component of xn+y argument ([+-]?\d*n|)
     	5 sign of xn-component
     	6 x of xn-component
     	7 sign of y-component
     	8 y of y-component
     */
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function PSEUDO(match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) && (
					// Get excess from tokenize (recursively)
					excess = tokenize(unquoted, true)) && (
					// advance to the next closing parenthesis
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function TAG(nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function CLASS(className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function ATTR(name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function CHILD(type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    outerCache,
						    node,
						    diff,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType;

						if (parent) {

							// :(first|last|only)-(child|of-type)
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							// non-xml :nth-child(...) stores cache data on `parent`
							if (forward && useCache) {
								// Seek `elem` from a previously-cached index
								outerCache = parent[expando] || (parent[expando] = {});
								cache = outerCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = cache[0] === dirruns && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								// Fallback to seeking `elem` from the start
								diff = nodeIndex = 0) || start.pop()) {

									// When found, cache indexes on `parent` and break
									if (node.nodeType === 1 && ++diff && node === elem) {
										outerCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}

								// Use previously-cached element index if available
							} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
								diff = cache[1];

								// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
							} else {
								// Use the same loop as above to seek `elem` from the start
								while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

									if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
										// Cache the index of each encountered element
										if (useCache) {
											(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
										}

										if (node === elem) {
											break;
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function PSEUDO(pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function target(elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function root(elem) {
					return elem === docElem;
				},

				"focus": function focus(elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": function enabled(elem) {
					return elem.disabled === false;
				},

				"disabled": function disabled(elem) {
					return elem.disabled === true;
				},

				"checked": function checked(elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function selected(elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function empty(elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function parent(elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function header(elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function input(elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function button(elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function text(elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    checkNonElements = base && dir === "parentNode",
			    doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				var oldCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});
							if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								// Assign to newCache so results back-propagate to previous elements
								return newCache[2] = oldCache[2];
							} else {
								// Reuse newcache so results back-propagate to previous elements
								outerCache[dir] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results : matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									// Restore matcherIn since elem is not yet a final match
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context !== document && context;
				}

				// Add elements passing elementMatchers directly to results
				// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// Apply set filters to unmatched elements
				matchedCount += i;
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			// Try to minimize operations if there is no seed and only one group
			if (match.length === 1) {

				// Take a shortcut and set the context if the root selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						// Search, expanding context for leading sibling combinators
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (div1) {
			// Should return 1, but returns 4 (following)
			return div1.compareDocumentPosition(document.createElement("div")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (div) {
			div.innerHTML = "<a href='#'></a>";
			return div.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (div) {
			div.innerHTML = "<input/>";
			div.firstChild.setAttribute("value", "");
			return div.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (div) {
			return div.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;

	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;

	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				/* jshint -W018 */
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		if (typeof qualifier === "string") {
			if (risSimple.test(qualifier)) {
				return jQuery.filter(qualifier, elements, not);
			}

			qualifier = jQuery.filter(qualifier, elements);
		}

		return jQuery.grep(elements, function (elem) {
			return indexOf.call(qualifier, elem) >= 0 !== not;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function find(selector) {
			var i,
			    len = this.length,
			    ret = [],
			    self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function filter(selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function not(selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function is(selector) {
			return !!winnow(this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,


	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	    init = jQuery.fn.init = function (selector, context) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if (!selector) {
			return this;
		}

		// Handle HTML strings
		if (typeof selector === "string") {
			if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			// Match html or make sure no context is specified for #id
			if (match && (match[1] || !context)) {

				// HANDLE: $(html) -> $(array)
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					// HANDLE: $(html, props)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {
							// Properties of context are called as methods if possible
							if (jQuery.isFunction(this[match])) {
								this[match](context[match]);

								// ...and otherwise set as attributes
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

					// HANDLE: $(#id)
				} else {
					elem = document.getElementById(match[2]);

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if (elem && elem.parentNode) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

				// HANDLE: $(expr, $(...))
			} else if (!context || context.jquery) {
				return (context || rootjQuery).find(selector);

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor(context).find(selector);
			}

			// HANDLE: $(DOMElement)
		} else if (selector.nodeType) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

			// HANDLE: $(function)
			// Shortcut for document ready
		} else if (jQuery.isFunction(selector)) {
			return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) :
			// Execute immediately if ready is not present
			selector(jQuery);
		}

		if (selector.selector !== undefined) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray(selector, this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.extend({
		dir: function dir(elem, _dir, until) {
			var matched = [],
			    truncate = until !== undefined;

			while ((elem = elem[_dir]) && elem.nodeType !== 9) {
				if (elem.nodeType === 1) {
					if (truncate && jQuery(elem).is(until)) {
						break;
					}
					matched.push(elem);
				}
			}
			return matched;
		},

		sibling: function sibling(n, elem) {
			var matched = [];

			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					matched.push(n);
				}
			}

			return matched;
		}
	});

	jQuery.fn.extend({
		has: function has(target) {
			var targets = jQuery(target, this),
			    l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function closest(selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

			for (; i < l; i++) {
				for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
					// Always skip document fragments
					if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

						matched.push(cur);
						break;
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
		},

		// Determine the position of an element within the set
		index: function index(elem) {

			// No argument, return index in parent
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			// Locate the position of the desired element
			return indexOf.call(this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem);
		},

		add: function add(selector, context) {
			return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function addBack(selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) {}
		return cur;
	}

	jQuery.each({
		parent: function parent(elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function parents(elem) {
			return jQuery.dir(elem, "parentNode");
		},
		parentsUntil: function parentsUntil(elem, i, until) {
			return jQuery.dir(elem, "parentNode", until);
		},
		next: function next(elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function prev(elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function nextAll(elem) {
			return jQuery.dir(elem, "nextSibling");
		},
		prevAll: function prevAll(elem) {
			return jQuery.dir(elem, "previousSibling");
		},
		nextUntil: function nextUntil(elem, i, until) {
			return jQuery.dir(elem, "nextSibling", until);
		},
		prevUntil: function prevUntil(elem, i, until) {
			return jQuery.dir(elem, "previousSibling", until);
		},
		siblings: function siblings(elem) {
			return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
		},
		children: function children(elem) {
			return jQuery.sibling(elem.firstChild);
		},
		contents: function contents(elem) {
			return elem.contentDocument || jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {
				// Remove duplicates
				if (!guaranteedUnique[name]) {
					jQuery.unique(matched);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnotwhite = /\S+/g;

	// String to Object options format cache
	var optionsCache = {};

	// Convert String-formatted options into Object-formatted ones and store in cache
	function createOptions(options) {
		var object = optionsCache[options] = {};
		jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
  * Create a callback list using the following parameters:
  *
  *	options: an optional list of space-separated options that will change how
  *			the callback list behaves or a more traditional option object
  *
  * By default a callback list will act like an event callback list and can be
  * "fired" multiple times.
  *
  * Possible options:
  *
  *	once:			will ensure the callback list can only be fired once (like a Deferred)
  *
  *	memory:			will keep track of previous values and will call any callback added
  *					after the list has been fired right away with the latest "memorized"
  *					values (like a Deferred)
  *
  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  *
  *	stopOnFalse:	interrupt callings when a callback returns false
  *
  */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);

		var // Last fire value (for non-forgettable lists)
		memory,

		// Flag to know if list was already fired
		_fired,

		// Flag to know if list is currently firing
		firing,

		// First callback to fire (used internally by add and fireWith)
		firingStart,

		// End of the loop when firing
		firingLength,

		// Index of currently firing callback (modified by remove if needed)
		firingIndex,

		// Actual callback list
		list = [],

		// Stack of fire calls for repeatable lists
		stack = !options.once && [],

		// Fire callbacks
		fire = function fire(data) {
			memory = options.memory && data;
			_fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for (; list && firingIndex < firingLength; firingIndex++) {
				if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if (list) {
				if (stack) {
					if (stack.length) {
						fire(stack.shift());
					}
				} else if (memory) {
					list = [];
				} else {
					self.disable();
				}
			}
		},

		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function add() {
				if (list) {
					// First, we save the current length
					var start = list.length;
					(function add(args) {
						jQuery.each(args, function (_, arg) {
							var type = jQuery.type(arg);
							if (type === "function") {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && type !== "string") {
								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);
					// Do we need to add the callbacks to the
					// current firing batch?
					if (firing) {
						firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away
					} else if (memory) {
						firingStart = start;
						fire(memory);
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function remove() {
				if (list) {
					jQuery.each(arguments, function (_, arg) {
						var index;
						while ((index = jQuery.inArray(arg, list, index)) > -1) {
							list.splice(index, 1);
							// Handle firing indexes
							if (firing) {
								if (index <= firingLength) {
									firingLength--;
								}
								if (index <= firingIndex) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function has(fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
			},
			// Remove all callbacks from the list
			empty: function empty() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function disable() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function disabled() {
				return !list;
			},
			// Lock the list in its current state
			lock: function lock() {
				stack = undefined;
				if (!memory) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function locked() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function fireWith(context, args) {
				if (list && (!_fired || stack)) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					if (firing) {
						stack.push(args);
					} else {
						fire(args);
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function fire() {
				self.fireWith(this, arguments);
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function fired() {
				return !!_fired;
			}
		};

		return self;
	};

	jQuery.extend({

		Deferred: function Deferred(func) {
			var tuples = [
			// action, add listener, listener list, final state
			["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
			    _state = "pending",
			    _promise = {
				state: function state() {
					return _state;
				},
				always: function always() {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				then: function then() /* fnDone, fnFail, fnProgress */{
					var fns = arguments;
					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {
							var fn = jQuery.isFunction(fns[i]) && fns[i];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
								} else {
									newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function promise(obj) {
					return obj != null ? jQuery.extend(obj, _promise) : _promise;
				}
			},
			    deferred = {};

			// Keep pipe for back-compat
			_promise.pipe = _promise.then;

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[3];

				// promise[ done | fail | progress ] = list.add
				_promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {
						// state = [ resolved | rejected ]
						_state = stateString;

						// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
				}

				// deferred[ resolve | reject | notify ]
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
					return this;
				};
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			_promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function when(subordinate /* , ..., subordinateN */) {
			var i = 0,
			    resolveValues = _slice.call(arguments),
			    length = resolveValues.length,


			// the count of uncompleted subordinates
			remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,


			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),


			// Update function for both resolve and progress values
			updateFunc = function updateFunc(i, contexts, values) {
				return function (value) {
					contexts[i] = this;
					values[i] = arguments.length > 1 ? _slice.call(arguments) : value;
					if (values === progressValues) {
						deferred.notifyWith(contexts, values);
					} else if (! --remaining) {
						deferred.resolveWith(contexts, values);
					}
				};
			},
			    progressValues,
			    progressContexts,
			    resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if (length > 1) {
				progressValues = new Array(length);
				progressContexts = new Array(length);
				resolveContexts = new Array(length);
				for (; i < length; i++) {
					if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
						resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if (!remaining) {
				deferred.resolveWith(resolveContexts, resolveValues);
			}

			return deferred.promise();
		}
	});

	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function (fn) {
		// Add the callback
		jQuery.ready.promise().done(fn);

		return this;
	};

	jQuery.extend({
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function holdReady(hold) {
			if (hold) {
				jQuery.readyWait++;
			} else {
				jQuery.ready(true);
			}
		},

		// Handle when the DOM is ready
		ready: function ready(wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);

			// Trigger any bound ready events
			if (jQuery.fn.triggerHandler) {
				jQuery(document).triggerHandler("ready");
				jQuery(document).off("ready");
			}
		}
	});

	/**
  * The ready event handler and self cleanup method
  */
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed, false);
		window.removeEventListener("load", completed, false);
		jQuery.ready();
	}

	jQuery.ready.promise = function (obj) {
		if (!readyList) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called after the browser event has already occurred.
			// We once tried to use readyState "interactive" here, but it caused issues like the one
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
			if (document.readyState === "complete") {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				setTimeout(jQuery.ready);
			} else {

				// Use the handy event callback
				document.addEventListener("DOMContentLoaded", completed, false);

				// A fallback to window.onload, that will always work
				window.addEventListener("load", completed, false);
			}
		}
		return readyList.promise(obj);
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		// Sets many values
		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {
				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		return chainable ? elems :

		// Gets
		bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
	};

	/**
  * Determines whether an object can have data
  */
	jQuery.acceptData = function (owner) {
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
		// Support: Android<4,
		// Old WebKit does not have Object.preventExtensions/freeze method,
		// return new empty object instead with no [[set]] accessor
		Object.defineProperty(this.cache = {}, 0, {
			get: function get() {
				return {};
			}
		});

		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;
	Data.accepts = jQuery.acceptData;

	Data.prototype = {
		key: function key(owner) {
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return the key for a frozen object.
			if (!Data.accepts(owner)) {
				return 0;
			}

			var descriptor = {},

			// Check if the owner object already has a cache key
			unlock = owner[this.expando];

			// If not, create one
			if (!unlock) {
				unlock = Data.uid++;

				// Secure it in a non-enumerable, non-writable property
				try {
					descriptor[this.expando] = { value: unlock };
					Object.defineProperties(owner, descriptor);

					// Support: Android<4
					// Fallback to a less secure definition
				} catch (e) {
					descriptor[this.expando] = unlock;
					jQuery.extend(owner, descriptor);
				}
			}

			// Ensure the cache object
			if (!this.cache[unlock]) {
				this.cache[unlock] = {};
			}

			return unlock;
		},
		set: function set(owner, data, value) {
			var prop,

			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key(owner),
			    cache = this.cache[unlock];

			// Handle: [ owner, key, value ] args
			if (typeof data === "string") {
				cache[data] = value;

				// Handle: [ owner, { properties } ] args
			} else {
				// Fresh assignments by object are shallow copied
				if (jQuery.isEmptyObject(cache)) {
					jQuery.extend(this.cache[unlock], data);
					// Otherwise, copy the properties one-by-one to the cache object
				} else {
					for (prop in data) {
						cache[prop] = data[prop];
					}
				}
			}
			return cache;
		},
		get: function get(owner, key) {
			// Either a valid cache is found, or will be created.
			// New caches will be created and the unlock returned,
			// allowing direct access to the newly created
			// empty data object. A valid owner object must be provided.
			var cache = this.cache[this.key(owner)];

			return key === undefined ? cache : cache[key];
		},
		access: function access(owner, key, value) {
			var stored;
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if (key === undefined || key && typeof key === "string" && value === undefined) {

				stored = this.get(owner, key);

				return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
			}

			// [*]When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set(owner, key, value);

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function remove(owner, key) {
			var i,
			    name,
			    camel,
			    unlock = this.key(owner),
			    cache = this.cache[unlock];

			if (key === undefined) {
				this.cache[unlock] = {};
			} else {
				// Support array or space separated string of keys
				if (jQuery.isArray(key)) {
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat(key.map(jQuery.camelCase));
				} else {
					camel = jQuery.camelCase(key);
					// Try the string as a key before any manipulation
					if (key in cache) {
						name = [key, camel];
					} else {
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ? [name] : name.match(rnotwhite) || [];
					}
				}

				i = name.length;
				while (i--) {
					delete cache[name[i]];
				}
			}
		},
		hasData: function hasData(owner) {
			return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
		},
		discard: function discard(owner) {
			if (owner[this.expando]) {
				delete this.cache[owner[this.expando]];
			}
		}
	};
	var data_priv = new Data();

	var data_user = new Data();

	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /([A-Z])/g;

	function dataAttr(elem, key, data) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = data === "true" ? true : data === "false" ? false : data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				data_user.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function hasData(elem) {
			return data_user.hasData(elem) || data_priv.hasData(elem);
		},

		data: function data(elem, name, _data) {
			return data_user.access(elem, name, _data);
		},

		removeData: function removeData(elem, name) {
			data_user.remove(elem, name);
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to data_priv methods, these can be deprecated.
		_data: function _data(elem, name, data) {
			return data_priv.access(elem, name, data);
		},

		_removeData: function _removeData(elem, name) {
			data_priv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function data(key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = data_user.get(elem);

					if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						data_priv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
				return this.each(function () {
					data_user.set(this, key);
				});
			}

			return access(this, function (value) {
				var data,
				    camelKey = jQuery.camelCase(key);

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if (elem && value === undefined) {
					// Attempt to get data from the cache
					// with the key as-is
					data = data_user.get(elem, key);
					if (data !== undefined) {
						return data;
					}

					// Attempt to get data from the cache
					// with the key camelized
					data = data_user.get(elem, camelKey);
					if (data !== undefined) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr(elem, camelKey, undefined);
					if (data !== undefined) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function () {
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = data_user.get(this, camelKey);

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					data_user.set(this, camelKey, value);

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if (key.indexOf("-") !== -1 && data !== undefined) {
						data_user.set(this, key, value);
					}
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function removeData(key) {
			return this.each(function () {
				data_user.remove(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function queue(elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = data_priv.get(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || jQuery.isArray(data)) {
						queue = data_priv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function dequeue(elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function next() {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function _queueHooks(elem, type) {
			var key = type + "queueHooks";
			return data_priv.get(elem, key) || data_priv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					data_priv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function queue(type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// Ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function dequeue(type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function clearQueue(type) {
			return this.queue(type || "fx", []);
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function promise(type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function resolve() {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = data_priv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHidden = function isHidden(elem, el) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
	};

	var rcheckableType = /^(?:checkbox|radio)$/i;

	(function () {
		var fragment = document.createDocumentFragment(),
		    div = fragment.appendChild(document.createElement("div")),
		    input = document.createElement("input");

		// Support: Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();
	var strundefined = typeof undefined === "undefined" ? "undefined" : _typeof(undefined);

	support.focusinBubbles = "onfocusin" in window;

	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	/*
  * Helper functions for managing events -- not part of the public interface.
  * Props to Dean Edwards' addEvent library for many of the ideas.
  */
	jQuery.event = {

		global: {},

		add: function add(elem, types, handler, data, selector) {

			var handleObjIn,
			    eventHandle,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = data_priv.get(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return (typeof jQuery === "undefined" ? "undefined" : _typeof(jQuery)) !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle, false);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}
		},

		// Detach an event or set of events from an element
		remove: function remove(elem, types, handler, selector, mappedTypes) {

			var j,
			    origCount,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = data_priv.hasData(elem) && data_priv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				delete elemData.handle;
				data_priv.remove(elem, "events");
			}
		},

		trigger: function trigger(event, data, elem, onlyHandlers) {

			var i,
			    cur,
			    tmp,
			    bubbleType,
			    ontype,
			    handle,
			    special,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") >= 0) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ? bubbleType : special.bindType || type;

				// jQuery handler
				handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && jQuery.acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function dispatch(event) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix(event);

			var i,
			    j,
			    ret,
			    matched,
			    handleObj,
			    handlerQueue = [],
			    args = _slice.call(arguments),
			    handlers = (data_priv.get(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function handlers(event, _handlers) {
			var i,
			    matches,
			    sel,
			    handleObj,
			    handlerQueue = [],
			    delegateCount = _handlers.delegateCount,
			    cur = event.target;

			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			// Avoid non-left-click bubbling in Firefox (#3861)
			if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {

				for (; cur !== this; cur = cur.parentNode || this) {

					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.disabled !== true || event.type !== "click") {
						matches = [];
						for (i = 0; i < delegateCount; i++) {
							handleObj = _handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matches[sel] === undefined) {
								matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matches[sel]) {
								matches.push(handleObj);
							}
						}
						if (matches.length) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if (delegateCount < _handlers.length) {
				handlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function filter(event, original) {

				// Add which for key events
				if (event.which == null) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function filter(event, original) {
				var eventDoc,
				    doc,
				    body,
				    button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if (event.pageX == null && original.clientX != null) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
					event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if (!event.which && button !== undefined) {
					event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
				}

				return event;
			}
		},

		fix: function fix(event) {
			if (event[jQuery.expando]) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i,
			    prop,
			    copy,
			    type = event.type,
			    originalEvent = event,
			    fixHook = this.fixHooks[type];

			if (!fixHook) {
				this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
			}
			copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

			event = new jQuery.Event(originalEvent);

			i = copy.length;
			while (i--) {
				prop = copy[i];
				event[prop] = originalEvent[prop];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if (!event.target) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if (event.target.nodeType === 3) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
		},

		special: {
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function trigger() {
					if (this !== safeActiveElement() && this.focus) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function trigger() {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
				// For checkbox, fire native event so checked state will be right
				trigger: function trigger() {
					if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function _default(event) {
					return jQuery.nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function postDispatch(event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		simulate: function simulate(type, elem, event, bubble) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true,
				originalEvent: {}
			});
			if (bubble) {
				jQuery.event.trigger(e, null, elem);
			} else {
				jQuery.event.dispatch.call(elem, e);
			}
			if (e.isDefaultPrevented()) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = function (elem, type, handle) {
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle, false);
		}
	};

	jQuery.Event = function (src, props) {
		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&
			// Support: Android<4.0
			src.returnValue === false ? returnTrue : returnFalse;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function preventDefault() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e && e.preventDefault) {
				e.preventDefault();
			}
		},
		stopPropagation: function stopPropagation() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e && e.stopPropagation) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function stopImmediatePropagation() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && e.stopImmediatePropagation) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// Support: Chrome 15+
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function handle(event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	// Support: Firefox, Chrome, Safari
	// Create "bubbling" focus and blur events
	if (!support.focusinBubbles) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function handler(event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
			};

			jQuery.event.special[fix] = {
				setup: function setup() {
					var doc = this.ownerDocument || this,
					    attaches = data_priv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					data_priv.access(doc, fix, (attaches || 0) + 1);
				},
				teardown: function teardown() {
					var doc = this.ownerDocument || this,
					    attaches = data_priv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						data_priv.remove(doc, fix);
					} else {
						data_priv.access(doc, fix, attaches);
					}
				}
			};
		});
	}

	jQuery.fn.extend({

		on: function on(types, selector, data, fn, /*INTERNAL*/one) {
			var origFn, type;

			// Types can be a map of types/handlers
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {
				// ( types-Object, selector, data )
				if (typeof selector !== "string") {
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for (type in types) {
					this.on(type, selector, data, types[type], one);
				}
				return this;
			}

			if (data == null && fn == null) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if (fn == null) {
				if (typeof selector === "string") {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if (fn === false) {
				fn = returnFalse;
			} else if (!fn) {
				return this;
			}

			if (one === 1) {
				origFn = fn;
				fn = function fn(event) {
					// Can use an empty set, since event contains the info
					jQuery().off(event);
					return origFn.apply(this, arguments);
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
			}
			return this.each(function () {
				jQuery.event.add(this, types, fn, data, selector);
			});
		},
		one: function one(types, selector, data, fn) {
			return this.on(types, selector, data, fn, 1);
		},
		off: function off(types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {
				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		},

		trigger: function trigger(type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function triggerHandler(type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	    rtagName = /<([\w:]+)/,
	    rhtml = /<|&#?\w+;/,
	    rnoInnerhtml = /<(?:script|style|link)/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rscriptType = /^$|\/(?:java|ecma)script/i,
	    rscriptTypeMasked = /^true\/(.*)/,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,


	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [1, "<select multiple='multiple'>", "</select>"],

		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	// Support: 1.x compatibility
	// Manipulating tables requires a tbody
	function manipulationTarget(elem, content) {
		return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);

		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
		}
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if (data_priv.hasData(src)) {
			pdataOld = data_priv.access(src);
			pdataCur = data_priv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		// 2. Copy user data
		if (data_user.hasData(src)) {
			udataOld = data_user.access(src);
			udataCur = jQuery.extend({}, udataOld);

			data_user.set(dest, udataCur);
		}
	}

	function getAll(context, tag) {
		var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];

		return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
	}

	// Fix IE bugs, see support tests
	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	jQuery.extend({
		clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
			var i,
			    l,
			    srcElements,
			    destElements,
			    clone = elem.cloneNode(true),
			    inPage = jQuery.contains(elem.ownerDocument, elem);

			// Fix IE cloning issues
			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			// Return the cloned set
			return clone;
		},

		buildFragment: function buildFragment(elems, context, scripts, selection) {
			var elem,
			    tmp,
			    tag,
			    wrap,
			    contains,
			    j,
			    fragment = context.createDocumentFragment(),
			    nodes = [],
			    i = 0,
			    l = elems.length;

			for (; i < l; i++) {
				elem = elems[i];

				if (elem || elem === 0) {

					// Add nodes directly
					if (jQuery.type(elem) === "object") {
						// Support: QtWebKit, PhantomJS
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

						// Convert non-html into a text node
					} else if (!rhtml.test(elem)) {
						nodes.push(context.createTextNode(elem));

						// Convert html into DOM nodes
					} else {
						tmp = tmp || fragment.appendChild(context.createElement("div"));

						// Deserialize a standard representation
						tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;
						tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];

						// Descend through wrappers to the right content
						j = wrap[0];
						while (j--) {
							tmp = tmp.lastChild;
						}

						// Support: QtWebKit, PhantomJS
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge(nodes, tmp.childNodes);

						// Remember the top-level container
						tmp = fragment.firstChild;

						// Ensure the created nodes are orphaned (#12392)
						tmp.textContent = "";
					}
				}
			}

			// Remove wrapper from fragment
			fragment.textContent = "";

			i = 0;
			while (elem = nodes[i++]) {

				// #4087 - If origin and destination elements are the same, and this is
				// that element, do not do anything
				if (selection && jQuery.inArray(elem, selection) !== -1) {
					continue;
				}

				contains = jQuery.contains(elem.ownerDocument, elem);

				// Append to fragment
				tmp = getAll(fragment.appendChild(elem), "script");

				// Preserve script evaluation history
				if (contains) {
					setGlobalEval(tmp);
				}

				// Capture executables
				if (scripts) {
					j = 0;
					while (elem = tmp[j++]) {
						if (rscriptType.test(elem.type || "")) {
							scripts.push(elem);
						}
					}
				}
			}

			return fragment;
		},

		cleanData: function cleanData(elems) {
			var data,
			    elem,
			    type,
			    key,
			    special = jQuery.event.special,
			    i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (jQuery.acceptData(elem)) {
					key = elem[data_priv.expando];

					if (key && (data = data_priv.cache[key])) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}
						if (data_priv.cache[key]) {
							// Discard any remaining `private` data
							delete data_priv.cache[key];
						}
					}
				}
				// Discard any remaining `user` data
				delete data_user.cache[elem[data_user.expando]];
			}
		}
	});

	jQuery.fn.extend({
		text: function text(value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().each(function () {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						this.textContent = value;
					}
				});
			}, null, value, arguments.length);
		},

		append: function append() {
			return this.domManip(arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function prepend() {
			return this.domManip(arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function before() {
			return this.domManip(arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function after() {
			return this.domManip(arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		remove: function remove(selector, keepData /* Internal Use Only */) {
			var elem,
			    elems = selector ? jQuery.filter(selector, this) : this,
			    i = 0;

			for (; (elem = elems[i]) != null; i++) {
				if (!keepData && elem.nodeType === 1) {
					jQuery.cleanData(getAll(elem));
				}

				if (elem.parentNode) {
					if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
						setGlobalEval(getAll(elem, "script"));
					}
					elem.parentNode.removeChild(elem);
				}
			}

			return this;
		},

		empty: function empty() {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					// Prevent memory leaks
					jQuery.cleanData(getAll(elem, false));

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function clone(dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function html(value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = value.replace(rxhtmlTag, "<$1></$2>");

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							// Remove element nodes and prevent memory leaks
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function replaceWith() {
			var arg = arguments[0];

			// Make the changes, replacing each context element with the new content
			this.domManip(arguments, function (elem) {
				arg = this.parentNode;

				jQuery.cleanData(getAll(this));

				if (arg) {
					arg.replaceChild(elem, this);
				}
			});

			// Force removal if there was no new content (e.g., from empty arguments)
			return arg && (arg.length || arg.nodeType) ? this : this.remove();
		},

		detach: function detach(selector) {
			return this.remove(selector, true);
		},

		domManip: function domManip(args, callback) {

			// Flatten any nested arrays
			args = concat.apply([], args);

			var fragment,
			    first,
			    scripts,
			    hasScripts,
			    node,
			    doc,
			    i = 0,
			    l = this.length,
			    set = this,
			    iNoClone = l - 1,
			    value = args[0],
			    isFunction = jQuery.isFunction(value);

			// We can't cloneNode fragments that contain checked, in WebKit
			if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
				return this.each(function (index) {
					var self = set.eq(index);
					if (isFunction) {
						args[0] = value.call(this, index, self.html());
					}
					self.domManip(args, callback);
				});
			}

			if (l) {
				fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
				first = fragment.firstChild;

				if (fragment.childNodes.length === 1) {
					fragment = first;
				}

				if (first) {
					scripts = jQuery.map(getAll(fragment, "script"), disableScript);
					hasScripts = scripts.length;

					// Use the original fragment for the last item instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for (; i < l; i++) {
						node = fragment;

						if (i !== iNoClone) {
							node = jQuery.clone(node, true, true);

							// Keep references to cloned scripts for later restoration
							if (hasScripts) {
								// Support: QtWebKit
								// jQuery.merge because push.apply(_, arraylike) throws
								jQuery.merge(scripts, getAll(node, "script"));
							}
						}

						callback.call(this[i], node, i);
					}

					if (hasScripts) {
						doc = scripts[scripts.length - 1].ownerDocument;

						// Reenable scripts
						jQuery.map(scripts, restoreScript);

						// Evaluate executable scripts on first document insertion
						for (i = 0; i < hasScripts; i++) {
							node = scripts[i];
							if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {

								if (node.src) {
									// Optional AJAX dependency, but won't run scripts if not present
									if (jQuery._evalUrl) {
										jQuery._evalUrl(node.src);
									}
								} else {
									jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
								}
							}
						}
					}
				}
			}

			return this;
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1,
			    i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});

	var iframe,
	    elemdisplay = {};

	/**
  * Retrieve the actual display of a element
  * @param {String} name nodeName of the element
  * @param {Object} doc Document object
  */
	// Called only from within defaultDisplay
	function actualDisplay(name, doc) {
		var style,
		    elem = jQuery(doc.createElement(name)).appendTo(doc.body),


		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ?

		// Use of this method is a temporary fix (more like optimization) until something better comes along,
		// since it was removed from specification and supported only in FF
		style.display : jQuery.css(elem[0], "display");

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
  * Try to determine the default display value of an element
  * @param {String} nodeName
  */
	function defaultDisplay(nodeName) {
		var doc = document,
		    display = elemdisplay[nodeName];

		if (!display) {
			display = actualDisplay(nodeName, doc);

			// If the simple way fails, read from inside an iframe
			if (display === "none" || !display) {

				// Use the already-created iframe if possible
				iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[0].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay(nodeName, doc);
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[nodeName] = display;
		}

		return display;
	}
	var rmargin = /^margin/;

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function getStyles(elem) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if (elem.ownerDocument.defaultView.opener) {
			return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
		}

		return window.getComputedStyle(elem, null);
	};

	function curCSS(elem, name, computed) {
		var width,
		    minWidth,
		    maxWidth,
		    ret,
		    style = elem.style;

		computed = computed || getStyles(elem);

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if (computed) {
			ret = computed.getPropertyValue(name) || computed[name];
		}

		if (computed) {

			if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
				ret = jQuery.style(elem, name);
			}

			// Support: iOS < 6
			// A tribute to the "awesome hack by Dean Edwards"
			// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if (rnumnonpx.test(ret) && rmargin.test(name)) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function get() {
				if (conditionFn()) {
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	(function () {
		var pixelPositionVal,
		    boxSizingReliableVal,
		    docElem = document.documentElement,
		    container = document.createElement("div"),
		    div = document.createElement("div");

		if (!div.style) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
		container.appendChild(div);

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computePixelPositionAndBoxSizingReliable() {
			div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
			div.innerHTML = "";
			docElem.appendChild(container);

			var divStyle = window.getComputedStyle(div, null);
			pixelPositionVal = divStyle.top !== "1%";
			boxSizingReliableVal = divStyle.width === "4px";

			docElem.removeChild(container);
		}

		// Support: node.js jsdom
		// Don't assume that getComputedStyle is a property of the global object
		if (window.getComputedStyle) {
			jQuery.extend(support, {
				pixelPosition: function pixelPosition() {

					// This test is executed only once but we still do memoizing
					// since we can use the boxSizingReliable pre-computing.
					// No need to check if the test was already performed, though.
					computePixelPositionAndBoxSizingReliable();
					return pixelPositionVal;
				},
				boxSizingReliable: function boxSizingReliable() {
					if (boxSizingReliableVal == null) {
						computePixelPositionAndBoxSizingReliable();
					}
					return boxSizingReliableVal;
				},
				reliableMarginRight: function reliableMarginRight() {

					// Support: Android 2.3
					// Check if div with explicit width and no margin-right incorrectly
					// gets computed margin-right based on width of container. (#3333)
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// This support function is only executed once so no memoizing is needed.
					var ret,
					    marginDiv = div.appendChild(document.createElement("div"));

					// Reset CSS: box-sizing; display; margin; border; padding
					marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
					marginDiv.style.marginRight = marginDiv.style.width = "0";
					div.style.width = "1px";
					docElem.appendChild(container);

					ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);

					docElem.removeChild(container);
					div.removeChild(marginDiv);

					return ret;
				}
			});
		}
	})();

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	jQuery.swap = function (elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
	    rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "O", "Moz", "ms"];

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(style, name) {

		// Shortcut for names that are not vendor prefixed
		if (name in style) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
		    origName = name,
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in style) {
				return name;
			}
		}

		return origName;
	}

	function setPositiveNumber(elem, value, subtract) {
		var matches = rnumsplit.exec(value);
		return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i = extra === (isBorderBox ? "border" : "content") ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,
		    val = 0;

		for (; i < 4; i += 2) {
			// Both box models exclude margin, so add it if we want it
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {
				// border-box includes padding, so remove it if we want content
				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// At this point, extra isn't border nor margin, so remove border
				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {
				// At this point, extra isn't content, so add padding
				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// At this point, extra isn't content nor padding, so add border
				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
		    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		    styles = getStyles(elem),
		    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if (val <= 0 || val == null) {
			// Fall back to computed then uncomputed css if necessary
			val = curCSS(elem, name, styles);
			if (val < 0 || val == null) {
				val = elem.style[name];
			}

			// Computed unit is not pixels. Stop here and return.
			if (rnumnonpx.test(val)) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

			// Normalize "", auto, and prepare for extra
			val = parseFloat(val) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    hidden,
		    values = [],
		    index = 0,
		    length = elements.length;

		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			values[index] = data_priv.get(elem, "olddisplay");
			display = elem.style.display;
			if (show) {
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if (!values[index] && display === "none") {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if (elem.style.display === "" && isHidden(elem)) {
					values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
				}
			} else {
				hidden = isHidden(elem);

				if (display !== "none" || !hidden) {
					data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for (index = 0; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}
			if (!show || elem.style.display === "none" || elem.style.display === "") {
				elem.style.display = show ? values[index] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function get(elem, computed) {
					if (computed) {

						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function style(elem, name, value, extra) {

			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			    type,
			    hooks,
			    origName = jQuery.camelCase(name),
			    style = elem.style;

			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value === "undefined" ? "undefined" : _typeof(value);

				// Convert "+=" or "-=" to relative numbers (#7345)
				if (type === "string" && (ret = rrelNum.exec(value))) {
					value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if (value == null || value !== value) {
					return;
				}

				// If a number, add 'px' to the (except for certain CSS properties)
				if (type === "number" && !jQuery.cssNumber[origName]) {
					value += "px";
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
					style[name] = value;
				}
			} else {
				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function css(elem, name, extra, styles) {
			var val,
			    num,
			    hooks,
			    origName = jQuery.camelCase(name);

			// Make sure that we're working with the right name
			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			// Convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function get(elem, computed, extra) {
				if (computed) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, name, extra);
					}) : getWidthOrHeight(elem, name, extra);
				}
			},

			set: function set(elem, value, extra) {
				var styles = extra && getStyles(elem);
				return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
			}
		};
	});

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
		if (computed) {
			return jQuery.swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
		}
	});

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function expand(value) {
				var i = 0,
				    expanded = {},


				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function css(name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (jQuery.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		},
		show: function show() {
			return showHide(this, true);
		},
		hide: function hide() {
			return showHide(this);
		},
		toggle: function toggle(state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHidden(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		}
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};

	var fxNow,
	    timerId,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
	    rrun = /queueHooks$/,
	    animationPrefilters = [defaultPrefilter],
	    tweeners = {
		"*": [function (prop, value) {
			var tween = this.createTween(prop, value),
			    target = tween.cur(),
			    parts = rfxnum.exec(value),
			    unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


			// Starting value computation is required for potential unit mismatches
			start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
			    scale = 1,
			    maxIterations = 20;

			if (start && start[3] !== unit) {
				// Trust units reported by jQuery.css
				unit = unit || start[3];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style(tween.elem, prop, start + unit);

					// Update scale, tolerating zero or NaN from tween.cur(),
					// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
			}

			// Update tween properties
			if (parts) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
			}

			return tween;
		}]
	};

	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = jQuery.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		    i = 0,
		    attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (tweeners[prop] || []).concat(tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		/* jshint validthis: true */
		var prop,
		    value,
		    toggle,
		    tween,
		    hooks,
		    oldfire,
		    display,
		    checkDisplay,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHidden(elem),
		    dataShow = data_priv.get(elem, "fxshow");

		// Handle queue: false promises
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {
				// Ensure the complete handler is called before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Height/width overflow pass
		if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css(elem, "display");

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

			if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
				style.display = "inline-block";
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		// show/hide pass
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.exec(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

				// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if (!jQuery.isEmptyObject(orig)) {
			if (dataShow) {
				if ("hidden" in dataShow) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = data_priv.access(elem, "fxshow", {});
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if (toggle) {
				dataShow.hidden = !hidden;
			}
			if (hidden) {
				jQuery(elem).show();
			} else {
				anim.done(function () {
					jQuery(elem).hide();
				});
			}
			anim.done(function () {
				var prop;

				data_priv.remove(elem, "fxshow");
				for (prop in orig) {
					jQuery.style(elem, prop, orig[prop]);
				}
			});
			for (prop in orig) {
				tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

				if (!(prop in dataShow)) {
					dataShow[prop] = tween.start;
					if (hidden) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

			// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
			style.display = display;
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (jQuery.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = animationPrefilters.length,
		    deferred = jQuery.Deferred().always(function () {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		    tick = function tick() {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),

			// Support: Android 2.3
			// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			if (percent < 1 && length) {
				return remaining;
			} else {
				deferred.resolveWith(elem, [animation]);
				return false;
			}
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, { specialEasing: {} }, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function createTween(prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function stop(gotoEnd) {
				var index = 0,

				// If we are going to the end, we want to run all the tweens
				// otherwise we skip this part
				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				// Resolve when we played the last frame; otherwise, reject
				if (gotoEnd) {
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = animationPrefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		// attach callbacks from options
		return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
	}

	jQuery.Animation = jQuery.extend(Animation, {

		tweener: function tweener(props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.split(" ");
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				tweeners[prop] = tweeners[prop] || [];
				tweeners[prop].unshift(callback);
			}
		},

		prefilter: function prefilter(callback, prepend) {
			if (prepend) {
				animationPrefilters.unshift(callback);
			} else {
				animationPrefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function fadeTo(speed, to, easing, callback) {

			// Show any hidden elements after setting opacity to 0
			return this.filter(isHidden).css("opacity", 0).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function animate(prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function doAnimation() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations, or finishing resolves immediately
				if (empty || data_priv.get(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function stop(type, clearQueue, gotoEnd) {
			var stopQueue = function stopQueue(hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = data_priv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function finish(type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = data_priv.get(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// Look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// Look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    i = 0,
		    timers = jQuery.timers;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];
			// Checks the timer has not already been removed
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		if (timer()) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function () {
		if (!timerId) {
			timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
		}
	};

	jQuery.fx.stop = function () {
		clearInterval(timerId);
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	};

	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = setTimeout(next, time);
			hooks.stop = function () {
				clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input = document.createElement("input"),
		    select = document.createElement("select"),
		    opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();

	var nodeHook,
	    boolHook,
	    attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function attr(name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function removeAttr(name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function attr(elem, name, value) {
			var hooks,
			    ret,
			    nType = elem.nodeType;

			// don't get/set attributes on text, comment and attribute nodes
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (_typeof(elem.getAttribute) === strundefined) {
				return jQuery.prop(elem, name, value);
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
			}

			if (value !== undefined) {

				if (value === null) {
					jQuery.removeAttr(elem, name);
				} else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				} else {
					elem.setAttribute(name, value + "");
					return value;
				}
			} else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			} else {
				ret = jQuery.find.attr(elem, name);

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ? undefined : ret;
			}
		},

		removeAttr: function removeAttr(elem, value) {
			var name,
			    propName,
			    i = 0,
			    attrNames = value && value.match(rnotwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					propName = jQuery.propFix[name] || name;

					// Boolean attributes get special treatment (#10870)
					if (jQuery.expr.match.bool.test(name)) {
						// Set corresponding property to false
						elem[propName] = false;
					}

					elem.removeAttribute(name);
				}
			}
		},

		attrHooks: {
			type: {
				set: function set(elem, value) {
					if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function set(elem, value, name) {
			if (value === false) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};
	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret, handle;
			if (!isXML) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[name];
				attrHandle[name] = ret;
				ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
				attrHandle[name] = handle;
			}
			return ret;
		};
	});

	var rfocusable = /^(?:input|select|textarea|button)$/i;

	jQuery.fn.extend({
		prop: function prop(name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function removeProp(name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		propFix: {
			"for": "htmlFor",
			"class": "className"
		},

		prop: function prop(elem, name, value) {
			var ret,
			    hooks,
			    notxml,
			    nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

			if (notxml) {
				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
			} else {
				return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
			}
		},

		propHooks: {
			tabIndex: {
				get: function get(elem) {
					return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
				}
			}
		}
	});

	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function get(elem) {
				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	var rclass = /[\t\r\n\f]/g;

	jQuery.fn.extend({
		addClass: function addClass(value) {
			var classes,
			    elem,
			    cur,
			    clazz,
			    j,
			    finalValue,
			    proceed = typeof value === "string" && value,
			    i = 0,
			    len = this.length;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, this.className));
				});
			}

			if (proceed) {
				// The disjunction here is for better compressibility (see removeClass)
				classes = (value || "").match(rnotwhite) || [];

				for (; i < len; i++) {
					elem = this[i];
					cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim(cur);
						if (elem.className !== finalValue) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		removeClass: function removeClass(value) {
			var classes,
			    elem,
			    cur,
			    clazz,
			    j,
			    finalValue,
			    proceed = arguments.length === 0 || typeof value === "string" && value,
			    i = 0,
			    len = this.length;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, this.className));
				});
			}
			if (proceed) {
				classes = (value || "").match(rnotwhite) || [];

				for (; i < len; i++) {
					elem = this[i];
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") >= 0) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = value ? jQuery.trim(cur) : "";
						if (elem.className !== finalValue) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		toggleClass: function toggleClass(value, stateVal) {
			var type = typeof value === "undefined" ? "undefined" : _typeof(value);

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
				});
			}

			return this.each(function () {
				if (type === "string") {
					// Toggle individual class names
					var className,
					    i = 0,
					    self = jQuery(this),
					    classNames = value.match(rnotwhite) || [];

					while (className = classNames[i++]) {
						// Check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (type === strundefined || type === "boolean") {
					if (this.className) {
						// store className if set
						data_priv.set(this, "__className__", this.className);
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
				}
			});
		},

		hasClass: function hasClass(selector) {
			var className = " " + selector + " ",
			    i = 0,
			    l = this.length;
			for (; i < l; i++) {
				if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
					return true;
				}
			}

			return false;
		}
	});

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function val(value) {
			var hooks,
			    ret,
			    isFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (jQuery.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function get(elem) {
					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim(jQuery.text(elem));
				}
			},
			select: {
				get: function get(elem) {
					var value,
					    option,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one" || index < 0,
					    values = one ? null : [],
					    max = one ? index + 1 : options.length,
					    i = index < 0 ? max : one ? index : 0;

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// IE6-9 doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) && (
						// Don't return options that are disabled or in a disabled optgroup
						support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function set(elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];
						if (option.selected = jQuery.inArray(option.value, values) >= 0) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function set(elem, value) {
				if (jQuery.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	// Return jQuery for attributes-only inclusion


	jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function hover(fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		},

		bind: function bind(types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function unbind(types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function delegate(selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function undelegate(selector, types, fn) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	var nonce = jQuery.now();

	var rquery = /\?/;

	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function (data) {
		return JSON.parse(data + "");
	};

	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml, tmp;
		if (!data || typeof data !== "string") {
			return null;
		}

		// Support: IE9
		try {
			tmp = new DOMParser();
			xml = tmp.parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var rhash = /#.*$/,
	    rts = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,
	    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,


	/* Prefilters
  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  * 2) These are called:
  *    - BEFORE asking for a transport
  *    - AFTER param serialization (s.data is a string if s.processData is true)
  * 3) key is the dataType
  * 4) the catchall symbol "*" can be used
  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  */
	prefilters = {},


	/* Transports bindings
  * 1) key is the dataType
  * 2) the catchall symbol "*" can be used
  * 3) selection will start with transport dataType and THEN go to "*" if needed
  */
	transports = {},


	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*"),


	// Document location
	ajaxLocation = window.location.href,


	// Segment location into parts
	ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

			if (jQuery.isFunction(func)) {
				// For each dataType in the dataTypeExpression
				while (dataType = dataTypes[i++]) {
					// Prepend if requested
					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key,
		    deep,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
  * - finds the right dataType (mediates between content-type and expected dataType)
  * - returns the corresponding response
  */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		    type,
		    finalDataType,
		    firstDataType,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {
			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
  * Also sets the responseXXX fields on the jqXHR instance
  */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {
									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s["throws"]) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test(ajaxLocParts[1]),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
   timeout: 0,
   data: null,
   dataType: null,
   username: null,
   password: null,
   cache: null,
   throws: false,
   traditional: false,
   headers: {},
   */

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function ajaxSetup(target, settings) {
			return settings ?

			// Building a settings object
			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			// Extending ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function ajax(url, options) {

			// If url is an object, simulate pre-1.5 signature
			if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			    responseHeaders,

			// timeout handle
			timeoutTimer,

			// Cross-domain detection vars
			parts,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// Create the final options object
			s = jQuery.ajaxSetup({}, options),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),

			// Status-dependent callbacks
			_statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			    requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function getResponseHeader(key) {
					var match;
					if (state === 2) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function getAllResponseHeaders() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function setRequestHeader(name, value) {
					var lname = name.toLowerCase();
					if (!state) {
						name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function overrideMimeType(type) {
					if (!state) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function statusCode(map) {
					var code;
					if (map) {
						if (state < 2) {
							for (code in map) {
								// Lazy-add the new callback in a way that preserves old ones
								_statusCode[code] = [_statusCode[code], map[code]];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always(map[jqXHR.status]);
						}
					}
					return this;
				},

				// Cancel the request
				abort: function abort(statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			// Attach deferreds
			deferred.promise(jqXHR).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if (s.crossDomain == null) {
				parts = rurl.exec(s.url.toLowerCase());
				s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (state === 2) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if (!s.hasContent) {

				// If data is available, append data to url
				if (s.data) {
					cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if (s.cache === false) {
					s.url = rts.test(cacheURL) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace(rts, "$1_=" + nonce++) :

					// Otherwise add one to the end
					cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for (i in { success: 1, error: 1, complete: 1 }) {
				jqXHR[i](s[i]);
			}

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}
				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					state = 1;
					transport.send(requestHeaders, done);
				} catch (e) {
					// Propagate exception as error if not done
					if (state < 2) {
						done(-1, e);
						// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				// Called once
				if (state === 2) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if (timeoutTimer) {
					clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(_statusCode);
				_statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
					// Handle the global AJAX counter
					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function getJSON(url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function getScript(url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {
			// Shift arguments if data argument was omitted
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			});
		};
	});

	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};

	jQuery.fn.extend({
		wrapAll: function wrapAll(html) {
			var wrap;

			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapAll(html.call(this, i));
				});
			}

			if (this[0]) {

				// The elements to wrap the target around
				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function wrapInner(html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function wrap(html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function unwrap() {
			return this.parent().each(function () {
				if (!jQuery.nodeName(this, "body")) {
					jQuery(this).replaceWith(this.childNodes);
				}
			}).end();
		}
	});

	jQuery.expr.filters.hidden = function (elem) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	};
	jQuery.expr.filters.visible = function (elem) {
		return !jQuery.expr.filters.hidden(elem);
	};

	var r20 = /%20/g,
	    rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (jQuery.isArray(obj)) {
			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {
					// Treat each array item as a scalar.
					add(prefix, v);
				} else {
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {
			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {
			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function add(key, value) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
		};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if (traditional === undefined) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&").replace(r20, "+");
	};

	jQuery.fn.extend({
		serialize: function serialize() {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function serializeArray() {
			return this.map(function () {
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
					return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
				}) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	jQuery.ajaxSettings.xhr = function () {
		try {
			return new XMLHttpRequest();
		} catch (e) {}
	};

	var xhrId = 0,
	    xhrCallbacks = {},
	    xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	// Support: IE9
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if (window.attachEvent) {
		window.attachEvent("onunload", function () {
			for (var key in xhrCallbacks) {
				xhrCallbacks[key]();
			}
		});
	}

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var _callback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function send(headers, complete) {
					var i,
					    xhr = options.xhr(),
					    id = ++xhrId;

					xhr.open(options.type, options.url, options.async, options.username, options.password);

					// Apply custom fields if provided
					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					// Override mime type if needed
					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					// Callback
					_callback = function callback(type) {
						return function () {
							if (_callback) {
								delete xhrCallbacks[id];
								_callback = xhr.onload = xhr.onerror = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {
									complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status, xhr.statusText);
								} else {
									complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined, xhr.getAllResponseHeaders());
								}
							}
						};
					};

					// Listen to events
					xhr.onload = _callback();
					xhr.onerror = _callback("error");

					// Create the abort callback
					_callback = xhrCallbacks[id] = _callback("abort");

					try {
						// Do send the request (this may raise an exception)
						xhr.send(options.hasContent && options.data || null);
					} catch (e) {
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if (_callback) {
							throw e;
						}
					}
				},

				abort: function abort() {
					if (_callback) {
						_callback();
					}
				}
			};
		}
	});

	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /(?:java|ecma)script/
		},
		converters: {
			"text script": function textScript(text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {
		// This transport only deals with cross domain requests
		if (s.crossDomain) {
			var script, _callback2;
			return {
				send: function send(_, complete) {
					script = jQuery("<script>").prop({
						async: true,
						charset: s.scriptCharset,
						src: s.url
					}).on("load error", _callback2 = function callback(evt) {
						script.remove();
						_callback2 = null;
						if (evt) {
							complete(evt.type === "error" ? 404 : 200, evt.type);
						}
					});
					document.head.appendChild(script[0]);
				},
				abort: function abort() {
					if (_callback2) {
						_callback2();
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function jsonpCallback() {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {
				// Restore preexisting value
				window[callbackName] = overwritten;

				// Save back as free
				if (s[callbackName]) {
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (!data || typeof data !== "string") {
			return null;
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec(data),
		    scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = jQuery.buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
  * Load a url into a page
  */
	jQuery.fn.load = function (url, params, callback) {
		if (typeof url !== "string" && _load) {
			return _load.apply(this, arguments);
		}

		var selector,
		    type,
		    response,
		    self = this,
		    off = url.indexOf(" ");

		if (off >= 0) {
			selector = jQuery.trim(url.slice(off));
			url = url.slice(0, off);
		}

		// If it's a function
		if (jQuery.isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// if "type" variable is undefined, then "GET" method will be used
				type: type,
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				// Otherwise use the full result
				responseText);
			}).complete(callback && function (jqXHR, status) {
				self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
			});
		}

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.filters.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	var docElem = window.document.documentElement;

	/**
  * Gets a window from an element
  */
	function getWindow(elem) {
		return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function setOffset(elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			// Set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {
				options = options.call(elem, i, curOffset);
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function offset(options) {
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var docElem,
			    win,
			    elem = this[0],
			    box = { top: 0, left: 0 },
			    doc = elem && elem.ownerDocument;

			if (!doc) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if (!jQuery.contains(docElem, elem)) {
				return box;
			}

			// Support: BlackBerry 5, iOS 3 (original iPhone)
			// If we don't have gBCR, just use 0,0 rather than error
			if (_typeof(elem.getBoundingClientRect) !== strundefined) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow(doc);
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function position() {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    elem = this[0],
			    parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
			if (jQuery.css(elem, "position") === "fixed") {
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {
				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if (!jQuery.nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
				parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		offsetParent: function offsetParent() {
			return this.map(function () {
				var offsetParent = this.offsetParent || docElem;

				while (offsetParent && !jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || docElem;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {
				var win = getWindow(elem);

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length, null);
		};
	});

	// Support: Safari<7+, Chrome<37+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable, null);
			};
		});
	});

	// The number of elements contained in the matched element set
	jQuery.fn.size = function () {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (typeof define === "function" && define.amd) {
		define("jquery", [], function () {
			return jQuery;
		});
	}

	var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,


	// Map over the $ in case of overwrite
	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ((typeof noGlobal === "undefined" ? "undefined" : _typeof(noGlobal)) === strundefined) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});
/**
 * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).
 * @version v4.1.1
 * @link https://github.com/ten1seven/what-input
 * @license MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("whatInput", [], factory);
	else if(typeof exports === 'object')
		exports["whatInput"] = factory();
	else
		root["whatInput"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
	  /*
	   * variables
	   */

	  // cache document.documentElement
	  var docElem = document.documentElement;

	  // last used input type
	  var currentInput = 'initial';

	  // last used input intent
	  var currentIntent = null;

	  // form input types
	  var formInputs = ['input', 'select', 'textarea'];

	  // list of modifier keys commonly used with the mouse and
	  // can be safely ignored to prevent false keyboard detection
	  var ignoreMap = [16, // shift
	  17, // control
	  18, // alt
	  91, // Windows key / left Apple cmd
	  93 // Windows menu / right Apple cmd
	  ];

	  // mapping of events to input types
	  var inputMap = {
	    'keyup': 'keyboard',
	    'mousedown': 'mouse',
	    'mousemove': 'mouse',
	    'MSPointerDown': 'pointer',
	    'MSPointerMove': 'pointer',
	    'pointerdown': 'pointer',
	    'pointermove': 'pointer',
	    'touchstart': 'touch'
	  };

	  // array of all used input types
	  var inputTypes = [];

	  // boolean: true if touch buffer is active
	  var isBuffering = false;

	  // boolean: true if the page is being scrolled
	  var isScrolling = false;

	  // store current mouse position
	  var mousePos = {
	    'x': null,
	    'y': null
	  };

	  // map of IE 10 pointer events
	  var pointerMap = {
	    2: 'touch',
	    3: 'touch', // treat pen like touch
	    4: 'mouse'
	  };

	  /*
	   * set up
	   */

	  var setUp = function setUp() {
	    // add correct mouse wheel event mapping to `inputMap`
	    inputMap[detectWheel()] = 'mouse';

	    addListeners();
	    setInput();
	  };

	  /*
	   * events
	   */

	  var addListeners = function addListeners() {
	    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding
	    // can only demonstrate potential, but not actual, interaction
	    // and are treated separately

	    // pointer events (mouse, pen, touch)
	    if (window.PointerEvent) {
	      docElem.addEventListener('pointerdown', updateInput);
	      docElem.addEventListener('pointermove', setIntent);
	    } else if (window.MSPointerEvent) {
	      docElem.addEventListener('MSPointerDown', updateInput);
	      docElem.addEventListener('MSPointerMove', setIntent);
	    } else {
	      // mouse events
	      docElem.addEventListener('mousedown', updateInput);
	      docElem.addEventListener('mousemove', setIntent);

	      // touch events
	      if ('ontouchstart' in window) {
	        docElem.addEventListener('touchstart', touchBuffer);
	        docElem.addEventListener('touchend', touchBuffer);
	      }
	    }

	    // mouse wheel
	    docElem.addEventListener(detectWheel(), setIntent);

	    // keyboard events
	    docElem.addEventListener('keydown', updateInput);
	    docElem.addEventListener('keyup', updateInput);
	  };

	  // checks conditions before updating new input
	  var updateInput = function updateInput(event) {
	    // only execute if the touch buffer timer isn't running
	    if (!isBuffering) {
	      var eventKey = event.which;
	      var value = inputMap[event.type];
	      if (value === 'pointer') value = pointerType(event);

	      if (currentInput !== value || currentIntent !== value) {
	        var activeElem = document.activeElement;
	        var activeInput = false;

	        if (activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1) {
	          activeInput = true;
	        }

	        if (value === 'touch' ||

	        // ignore mouse modifier keys
	        value === 'mouse' && ignoreMap.indexOf(eventKey) === -1 ||

	        // don't switch if the current element is a form input
	        value === 'keyboard' && activeInput) {
	          // set the current and catch-all variable
	          currentInput = currentIntent = value;

	          setInput();
	        }
	      }
	    }
	  };

	  // updates the doc and `inputTypes` array with new input
	  var setInput = function setInput() {
	    docElem.setAttribute('data-whatinput', currentInput);
	    docElem.setAttribute('data-whatintent', currentInput);

	    if (inputTypes.indexOf(currentInput) === -1) {
	      inputTypes.push(currentInput);
	      docElem.className += ' whatinput-types-' + currentInput;
	    }
	  };

	  // updates input intent for `mousemove` and `pointermove`
	  var setIntent = function setIntent(event) {
	    // test to see if `mousemove` happened relative to the screen
	    // to detect scrolling versus mousemove
	    if (mousePos['x'] !== event.screenX || mousePos['y'] !== event.screenY) {
	      isScrolling = false;

	      mousePos['x'] = event.screenX;
	      mousePos['y'] = event.screenY;
	    } else {
	      isScrolling = true;
	    }

	    // only execute if the touch buffer timer isn't running
	    // or scrolling isn't happening
	    if (!isBuffering && !isScrolling) {
	      var value = inputMap[event.type];
	      if (value === 'pointer') value = pointerType(event);

	      if (currentIntent !== value) {
	        currentIntent = value;

	        docElem.setAttribute('data-whatintent', currentIntent);
	      }
	    }
	  };

	  // buffers touch events because they frequently also fire mouse events
	  var touchBuffer = function touchBuffer(event) {
	    if (event.type === 'touchstart') {
	      isBuffering = false;

	      // set the current input
	      updateInput(event);
	    } else {
	      isBuffering = true;
	    }
	  };

	  /*
	   * utilities
	   */

	  var pointerType = function pointerType(event) {
	    if (typeof event.pointerType === 'number') {
	      return pointerMap[event.pointerType];
	    } else {
	      // treat pen like touch
	      return event.pointerType === 'pen' ? 'touch' : event.pointerType;
	    }
	  };

	  // detect version of mouse wheel event to use
	  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
	  var detectWheel = function detectWheel() {
	    var wheelType = void 0;

	    // Modern browsers support "wheel"
	    if ('onwheel' in document.createElement('div')) {
	      wheelType = 'wheel';
	    } else {
	      // Webkit and IE support at least "mousewheel"
	      // or assume that remaining browsers are older Firefox
	      wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';
	    }

	    return wheelType;
	  };

	  /*
	   * init
	   */

	  // don't start script unless browser cuts the mustard
	  // (also passes if polyfills are used)
	  if ('addEventListener' in window && Array.prototype.indexOf) {
	    setUp();
	  }

	  /*
	   * api
	   */

	  return {
	    // returns string: the current input type
	    // opt: 'loose'|'strict'
	    // 'strict' (default): returns the same value as the `data-whatinput` attribute
	    // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`
	    ask: function ask(opt) {
	      return opt === 'loose' ? currentIntent : currentInput;
	    },

	    // returns array: all the detected input types
	    types: function types() {
	      return inputTypes;
	    }
	  };
	}();

/***/ }
/******/ ])
});
;
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function ($) {

  "use strict";

  var FOUNDATION_VERSION = '6.3.1';

  // Global Foundation object
  // This is attached to the window, or used as a module for AMD/Browserify
  var Foundation = {
    version: FOUNDATION_VERSION,

    /**
     * Stores initialized plugins.
     */
    _plugins: {},

    /**
     * Stores generated unique ids for plugin instances
     */
    _uuids: [],

    /**
     * Returns a boolean for RTL support
     */
    rtl: function rtl() {
      return $('html').attr('dir') === 'rtl';
    },
    /**
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.
     */
    plugin: function plugin(_plugin, name) {
      // Object key to use when adding to global Foundation object
      // Examples: Foundation.Reveal, Foundation.OffCanvas
      var className = name || functionName(_plugin);
      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
      // Examples: data-reveal, data-off-canvas
      var attrName = hyphenate(className);

      // Add to the Foundation object and the plugins list (for reflowing)
      this._plugins[attrName] = this[className] = _plugin;
    },
    /**
     * @function
     * Populates the _uuids array with pointers to each individual plugin instance.
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @param {String} name - the name of the plugin, passed as a camelCased string.
     * @fires Plugin#init
     */
    registerPlugin: function registerPlugin(plugin, name) {
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
      plugin.uuid = this.GetYoDigits(6, pluginName);

      if (!plugin.$element.attr('data-' + pluginName)) {
        plugin.$element.attr('data-' + pluginName, plugin.uuid);
      }
      if (!plugin.$element.data('zfPlugin')) {
        plugin.$element.data('zfPlugin', plugin);
      }
      /**
       * Fires when the plugin has initialized.
       * @event Plugin#init
       */
      plugin.$element.trigger('init.zf.' + pluginName);

      this._uuids.push(plugin.uuid);

      return;
    },
    /**
     * @function
     * Removes the plugins uuid from the _uuids array.
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
     * Also fires the destroyed event for the plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @fires Plugin#destroyed
     */
    unregisterPlugin: function unregisterPlugin(plugin) {
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      .trigger('destroyed.zf.' + pluginName);
      for (var prop in plugin) {
        plugin[prop] = null; //clean up script to prep for garbage collection.
      }
      return;
    },

    /**
     * @function
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.
     */
    reInit: function reInit(plugins) {
      var isJQ = plugins instanceof $;
      try {
        if (isJQ) {
          plugins.each(function () {
            $(this).data('zfPlugin')._init();
          });
        } else {
          var type = typeof plugins === 'undefined' ? 'undefined' : _typeof(plugins),
              _this = this,
              fns = {
            'object': function object(plgs) {
              plgs.forEach(function (p) {
                p = hyphenate(p);
                $('[data-' + p + ']').foundation('_init');
              });
            },
            'string': function string() {
              plugins = hyphenate(plugins);
              $('[data-' + plugins + ']').foundation('_init');
            },
            'undefined': function undefined() {
              this['object'](Object.keys(_this._plugins));
            }
          };
          fns[type](plugins);
        }
      } catch (err) {
        console.error(err);
      } finally {
        return plugins;
      }
    },

    /**
     * returns a random base-36 uid with namespacing
     * @function
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
     * @returns {String} - unique id
     */
    GetYoDigits: function GetYoDigits(length, namespace) {
      length = length || 6;
      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
    },
    /**
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
     */
    reflow: function reflow(elem, plugins) {

      // If plugins is undefined, just grab everything
      if (typeof plugins === 'undefined') {
        plugins = Object.keys(this._plugins);
      }
      // If plugins is a string, convert it to an array with one item
      else if (typeof plugins === 'string') {
          plugins = [plugins];
        }

      var _this = this;

      // Iterate through each plugin
      $.each(plugins, function (i, name) {
        // Get the current plugin
        var plugin = _this._plugins[name];

        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

        // For each plugin found, initialize it
        $elem.each(function () {
          var $el = $(this),
              opts = {};
          // Don't double-dip on plugins
          if ($el.data('zfPlugin')) {
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
            return;
          }

          if ($el.attr('data-options')) {
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
              var opt = e.split(':').map(function (el) {
                return el.trim();
              });
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
            });
          }
          try {
            $el.data('zfPlugin', new plugin($(this), opts));
          } catch (er) {
            console.error(er);
          } finally {
            return;
          }
        });
      });
    },
    getFnName: functionName,
    transitionend: function transitionend($elem) {
      var transitions = {
        'transition': 'transitionend',
        'WebkitTransition': 'webkitTransitionEnd',
        'MozTransition': 'transitionend',
        'OTransition': 'otransitionend'
      };
      var elem = document.createElement('div'),
          end;

      for (var t in transitions) {
        if (typeof elem.style[t] !== 'undefined') {
          end = transitions[t];
        }
      }
      if (end) {
        return end;
      } else {
        end = setTimeout(function () {
          $elem.triggerHandler('transitionend', [$elem]);
        }, 1);
        return 'transitionend';
      }
    }
  };

  Foundation.util = {
    /**
     * Function for applying a debounce effect to a function call.
     * @function
     * @param {Function} func - Function to be called at end of timeout.
     * @param {Number} delay - Time in ms to delay the call of `func`.
     * @returns function
     */
    throttle: function throttle(func, delay) {
      var timer = null;

      return function () {
        var context = this,
            args = arguments;

        if (timer === null) {
          timer = setTimeout(function () {
            func.apply(context, args);
            timer = null;
          }, delay);
        }
      };
    }
  };

  // TODO: consider not making this a jQuery function
  // TODO: need way to reflow vs. re-initialize
  /**
   * The Foundation jQuery method.
   * @param {String|Array} method - An action to perform on the current jQuery object.
   */
  var foundation = function foundation(method) {
    var type = typeof method === 'undefined' ? 'undefined' : _typeof(method),
        $meta = $('meta.foundation-mq'),
        $noJS = $('.no-js');

    if (!$meta.length) {
      $('<meta class="foundation-mq">').appendTo(document.head);
    }
    if ($noJS.length) {
      $noJS.removeClass('no-js');
    }

    if (type === 'undefined') {
      //needs to initialize the Foundation object, or an individual plugin.
      Foundation.MediaQuery._init();
      Foundation.reflow(this);
    } else if (type === 'string') {
      //an individual method to invoke on a plugin or group of plugins
      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
      var plugClass = this.data('zfPlugin'); //determine the class of plugin

      if (plugClass !== undefined && plugClass[method] !== undefined) {
        //make sure both the class and method exist
        if (this.length === 1) {
          //if there's only one, call it directly.
          plugClass[method].apply(plugClass, args);
        } else {
          this.each(function (i, el) {
            //otherwise loop through the jQuery collection and invoke the method on each
            plugClass[method].apply($(el).data('zfPlugin'), args);
          });
        }
      } else {
        //error for no class or no method
        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
      }
    } else {
      //error for invalid argument type
      throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
    }
    return this;
  };

  window.Foundation = Foundation;
  $.fn.foundation = foundation;

  // Polyfill for requestAnimationFrame
  (function () {
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
      return new Date().getTime();
    };

    var vendors = ['webkit', 'moz'];
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
      var vp = vendors[i];
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;
      window.requestAnimationFrame = function (callback) {
        var now = Date.now();
        var nextTime = Math.max(lastTime + 16, now);
        return setTimeout(function () {
          callback(lastTime = nextTime);
        }, nextTime - now);
      };
      window.cancelAnimationFrame = clearTimeout;
    }
    /**
     * Polyfill for performance.now, required by rAF
     */
    if (!window.performance || !window.performance.now) {
      window.performance = {
        start: Date.now(),
        now: function now() {
          return Date.now() - this.start;
        }
      };
    }
  })();
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // closest thing possible to the ECMAScript 5
        // internal IsCallable function
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function fNOP() {},
          fBound = function fBound() {
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };

      if (this.prototype) {
        // native functions don't have a prototype
        fNOP.prototype = this.prototype;
      }
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
  // Polyfill to get the name of a function in IE9
  function functionName(fn) {
    if (Function.prototype.name === undefined) {
      var funcNameRegex = /function\s([^(]{1,})\(/;
      var results = funcNameRegex.exec(fn.toString());
      return results && results.length > 1 ? results[1].trim() : "";
    } else if (fn.prototype === undefined) {
      return fn.constructor.name;
    } else {
      return fn.prototype.constructor.name;
    }
  }
  function parseValue(str) {
    if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;
  }
  // Convert PascalCase to kebab-case
  // Thank you: http://stackoverflow.com/a/8955580
  function hyphenate(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  }
}(jQuery);
'use strict';

!function ($) {

  Foundation.Box = {
    ImNotTouchingYou: ImNotTouchingYou,
    GetDimensions: GetDimensions,
    GetOffsets: GetOffsets
  };

  /**
   * Compares the dimensions of an element to a container and determines collision events with container.
   * @function
   * @param {jQuery} element - jQuery object to test for collisions.
   * @param {jQuery} parent - jQuery object to use as bounding container.
   * @param {Boolean} lrOnly - set to true to check left and right values only.
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.
   * @default if no parent object passed, detects collisions with `window`.
   * @returns {Boolean} - true if collision free, false if a collision in any direction.
   */
  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {
    var eleDims = GetDimensions(element),
        top,
        bottom,
        left,
        right;

    if (parent) {
      var parDims = GetDimensions(parent);

      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;
      top = eleDims.offset.top >= parDims.offset.top;
      left = eleDims.offset.left >= parDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;
    } else {
      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;
      top = eleDims.offset.top >= eleDims.windowDims.offset.top;
      left = eleDims.offset.left >= eleDims.windowDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;
    }

    var allDirs = [bottom, top, left, right];

    if (lrOnly) {
      return left === right === true;
    }

    if (tbOnly) {
      return top === bottom === true;
    }

    return allDirs.indexOf(false) === -1;
  };

  /**
   * Uses native methods to return an object of dimension values.
   * @function
   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
   * @returns {Object} - nested object of integer pixel values
   * TODO - if element is window, return only those values.
   */
  function GetDimensions(elem, test) {
    elem = elem.length ? elem[0] : elem;

    if (elem === window || elem === document) {
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
    }

    var rect = elem.getBoundingClientRect(),
        parRect = elem.parentNode.getBoundingClientRect(),
        winRect = document.body.getBoundingClientRect(),
        winY = window.pageYOffset,
        winX = window.pageXOffset;

    return {
      width: rect.width,
      height: rect.height,
      offset: {
        top: rect.top + winY,
        left: rect.left + winX
      },
      parentDims: {
        width: parRect.width,
        height: parRect.height,
        offset: {
          top: parRect.top + winY,
          left: parRect.left + winX
        }
      },
      windowDims: {
        width: winRect.width,
        height: winRect.height,
        offset: {
          top: winY,
          left: winX
        }
      }
    };
  }

  /**
   * Returns an object of top and left integer pixel values for dynamically rendered elements,
   * such as: Tooltip, Reveal, and Dropdown
   * @function
   * @param {jQuery} element - jQuery object for the element being positioned.
   * @param {jQuery} anchor - jQuery object for the element's anchor point.
   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
   * TODO alter/rewrite to work with `em` values as well/instead of pixels
   */
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
    var $eleDims = GetDimensions(element),
        $anchorDims = anchor ? GetDimensions(anchor) : null;

    switch (position) {
      case 'top':
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top
        };
        break;
      case 'right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset,
          top: $anchorDims.offset.top
        };
        break;
      case 'center top':
        return {
          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'center bottom':
        return {
          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'center left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center':
        return {
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'reveal':
        return {
          left: ($eleDims.windowDims.width - $eleDims.width) / 2,
          top: $eleDims.windowDims.offset.top + vOffset
        };
      case 'reveal full':
        return {
          left: $eleDims.windowDims.offset.left,
          top: $eleDims.windowDims.offset.top
        };
        break;
      case 'left bottom':
        return {
          left: $anchorDims.offset.left,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'right bottom':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      default:
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
    }
  }
}(jQuery);
/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/

'use strict';

!function ($) {

  var keyCodes = {
    9: 'TAB',
    13: 'ENTER',
    27: 'ESCAPE',
    32: 'SPACE',
    37: 'ARROW_LEFT',
    38: 'ARROW_UP',
    39: 'ARROW_RIGHT',
    40: 'ARROW_DOWN'
  };

  var commands = {};

  var Keyboard = {
    keys: getKeyCodes(keyCodes),

    /**
     * Parses the (keyboard) event and returns a String that represents its key
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
     * @param {Event} event - the event generated by the event handler
     * @return String key - String that represents the key pressed
     */
    parseKey: function parseKey(event) {
      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();

      // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
      key = key.replace(/\W+/, '');

      if (event.shiftKey) key = 'SHIFT_' + key;
      if (event.ctrlKey) key = 'CTRL_' + key;
      if (event.altKey) key = 'ALT_' + key;

      // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
      key = key.replace(/_$/, '');

      return key;
    },


    /**
     * Handles the given (keyboard) event
     * @param {Event} event - the event generated by the event handler
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal
     * @param {Objects} functions - collection of functions that are to be executed
     */
    handleKey: function handleKey(event, component, functions) {
      var commandList = commands[component],
          keyCode = this.parseKey(event),
          cmds,
          command,
          fn;

      if (!commandList) return console.warn('Component not defined!');

      if (typeof commandList.ltr === 'undefined') {
        // this component does not differentiate between ltr and rtl
        cmds = commandList; // use plain list
      } else {
        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
      }
      command = cmds[keyCode];

      fn = functions[command];
      if (fn && typeof fn === 'function') {
        // execute function  if exists
        var returnValue = fn.apply();
        if (functions.handled || typeof functions.handled === 'function') {
          // execute function when event was handled
          functions.handled(returnValue);
        }
      } else {
        if (functions.unhandled || typeof functions.unhandled === 'function') {
          // execute function when event was not handled
          functions.unhandled();
        }
      }
    },


    /**
     * Finds all focusable elements within the given `$element`
     * @param {jQuery} $element - jQuery object to search within
     * @return {jQuery} $focusable - all focusable elements within `$element`
     */
    findFocusable: function findFocusable($element) {
      if (!$element) {
        return false;
      }
      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {
          return false;
        } //only have visible elements and those that have a tabindex greater or equal 0
        return true;
      });
    },


    /**
     * Returns the component name name
     * @param {Object} component - Foundation component, e.g. Slider or Reveal
     * @return String componentName
     */

    register: function register(componentName, cmds) {
      commands[componentName] = cmds;
    },


    /**
     * Traps the focus in the given element.
     * @param  {jQuery} $element  jQuery object to trap the foucs into.
     */
    trapFocus: function trapFocus($element) {
      var $focusable = Foundation.Keyboard.findFocusable($element),
          $firstFocusable = $focusable.eq(0),
          $lastFocusable = $focusable.eq(-1);

      $element.on('keydown.zf.trapfocus', function (event) {
        if (event.target === $lastFocusable[0] && Foundation.Keyboard.parseKey(event) === 'TAB') {
          event.preventDefault();
          $firstFocusable.focus();
        } else if (event.target === $firstFocusable[0] && Foundation.Keyboard.parseKey(event) === 'SHIFT_TAB') {
          event.preventDefault();
          $lastFocusable.focus();
        }
      });
    },

    /**
     * Releases the trapped focus from the given element.
     * @param  {jQuery} $element  jQuery object to release the focus for.
     */
    releaseFocus: function releaseFocus($element) {
      $element.off('keydown.zf.trapfocus');
    }
  };

  /*
   * Constants for easier comparing.
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   */
  function getKeyCodes(kcs) {
    var k = {};
    for (var kc in kcs) {
      k[kcs[kc]] = kcs[kc];
    }return k;
  }

  Foundation.Keyboard = Keyboard;
}(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function ($) {

  // Default set of media queries
  var defaultQueries = {
    'default': 'only screen',
    landscape: 'only screen and (orientation: landscape)',
    portrait: 'only screen and (orientation: portrait)',
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };

  var MediaQuery = {
    queries: [],

    current: '',

    /**
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function
     * @private
     */
    _init: function _init() {
      var self = this;
      var extractedStyles = $('.foundation-mq').css('font-family');
      var namedQueries;

      namedQueries = parseStyleToObject(extractedStyles);

      for (var key in namedQueries) {
        if (namedQueries.hasOwnProperty(key)) {
          self.queries.push({
            name: key,
            value: 'only screen and (min-width: ' + namedQueries[key] + ')'
          });
        }
      }

      this.current = this._getCurrentSize();

      this._watcher();
    },


    /**
     * Checks if the screen is at least as wide as a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
     */
    atLeast: function atLeast(size) {
      var query = this.get(size);

      if (query) {
        return window.matchMedia(query).matches;
      }

      return false;
    },


    /**
     * Checks if the screen matches to a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
     */
    is: function is(size) {
      size = size.trim().split(' ');
      if (size.length > 1 && size[1] === 'only') {
        if (size[0] === this._getCurrentSize()) return true;
      } else {
        return this.atLeast(size[0]);
      }
      return false;
    },


    /**
     * Gets the media query of a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to get.
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
     */
    get: function get(size) {
      for (var i in this.queries) {
        if (this.queries.hasOwnProperty(i)) {
          var query = this.queries[i];
          if (size === query.name) return query.value;
        }
      }

      return null;
    },


    /**
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function
     * @private
     * @returns {String} Name of the current breakpoint.
     */
    _getCurrentSize: function _getCurrentSize() {
      var matched;

      for (var i = 0; i < this.queries.length; i++) {
        var query = this.queries[i];

        if (window.matchMedia(query.value).matches) {
          matched = query;
        }
      }

      if ((typeof matched === 'undefined' ? 'undefined' : _typeof(matched)) === 'object') {
        return matched.name;
      } else {
        return matched;
      }
    },


    /**
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
     * @function
     * @private
     */
    _watcher: function _watcher() {
      var _this = this;

      $(window).on('resize.zf.mediaquery', function () {
        var newSize = _this._getCurrentSize(),
            currentSize = _this.current;

        if (newSize !== currentSize) {
          // Change the current media query
          _this.current = newSize;

          // Broadcast the media query change on the window
          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
        }
      });
    }
  };

  Foundation.MediaQuery = MediaQuery;

  // matchMedia() polyfill - Test a CSS media type/query in JS.
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
  window.matchMedia || (window.matchMedia = function () {
    'use strict';

    // For browsers that support matchMedium api such as IE 9 and webkit

    var styleMedia = window.styleMedia || window.media;

    // For those that don't support matchMedium
    if (!styleMedia) {
      var style = document.createElement('style'),
          script = document.getElementsByTagName('script')[0],
          info = null;

      style.type = 'text/css';
      style.id = 'matchmediajs-test';

      script && script.parentNode && script.parentNode.insertBefore(style, script);

      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

      styleMedia = {
        matchMedium: function matchMedium(media) {
          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
          if (style.styleSheet) {
            style.styleSheet.cssText = text;
          } else {
            style.textContent = text;
          }

          // Test if media query is true or false
          return info.width === '1px';
        }
      };
    }

    return function (media) {
      return {
        matches: styleMedia.matchMedium(media || 'all'),
        media: media || 'all'
      };
    };
  }());

  // Thank you: https://github.com/sindresorhus/query-string
  function parseStyleToObject(str) {
    var styleObject = {};

    if (typeof str !== 'string') {
      return styleObject;
    }

    str = str.trim().slice(1, -1); // browsers re-quote string style values

    if (!str) {
      return styleObject;
    }

    styleObject = str.split('&').reduce(function (ret, param) {
      var parts = param.replace(/\+/g, ' ').split('=');
      var key = parts[0];
      var val = parts[1];
      key = decodeURIComponent(key);

      // missing `=` should be `null`:
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
      val = val === undefined ? null : decodeURIComponent(val);

      if (!ret.hasOwnProperty(key)) {
        ret[key] = val;
      } else if (Array.isArray(ret[key])) {
        ret[key].push(val);
      } else {
        ret[key] = [ret[key], val];
      }
      return ret;
    }, {});

    return styleObject;
  }

  Foundation.MediaQuery = MediaQuery;
}(jQuery);
'use strict';

!function ($) {

  /**
   * Motion module.
   * @module foundation.motion
   */

  var initClasses = ['mui-enter', 'mui-leave'];
  var activeClasses = ['mui-enter-active', 'mui-leave-active'];

  var Motion = {
    animateIn: function animateIn(element, animation, cb) {
      animate(true, element, animation, cb);
    },

    animateOut: function animateOut(element, animation, cb) {
      animate(false, element, animation, cb);
    }
  };

  function Move(duration, elem, fn) {
    var anim,
        prog,
        start = null;
    // console.log('called');

    if (duration === 0) {
      fn.apply(elem);
      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      return;
    }

    function move(ts) {
      if (!start) start = ts;
      // console.log(start, ts);
      prog = ts - start;
      fn.apply(elem);

      if (prog < duration) {
        anim = window.requestAnimationFrame(move, elem);
      } else {
        window.cancelAnimationFrame(anim);
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      }
    }
    anim = window.requestAnimationFrame(move);
  }

  /**
   * Animates an element in or out using a CSS transition class.
   * @function
   * @private
   * @param {Boolean} isIn - Defines if the animation is in or out.
   * @param {Object} element - jQuery or HTML object to animate.
   * @param {String} animation - CSS class to use.
   * @param {Function} cb - Callback to run when animation is finished.
   */
  function animate(isIn, element, animation, cb) {
    element = $(element).eq(0);

    if (!element.length) return;

    var initClass = isIn ? initClasses[0] : initClasses[1];
    var activeClass = isIn ? activeClasses[0] : activeClasses[1];

    // Set up the animation
    reset();

    element.addClass(animation).css('transition', 'none');

    requestAnimationFrame(function () {
      element.addClass(initClass);
      if (isIn) element.show();
    });

    // Start the animation
    requestAnimationFrame(function () {
      element[0].offsetWidth;
      element.css('transition', '').addClass(activeClass);
    });

    // Clean up the animation when it finishes
    element.one(Foundation.transitionend(element), finish);

    // Hides the element (for out animations), resets the element, and runs a callback
    function finish() {
      if (!isIn) element.hide();
      reset();
      if (cb) cb.apply(element);
    }

    // Resets transitions and removes motion-specific classes
    function reset() {
      element[0].style.transitionDuration = 0;
      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
    }
  }

  Foundation.Move = Move;
  Foundation.Motion = Motion;
}(jQuery);
'use strict';

!function ($) {

  var Nest = {
    Feather: function Feather(menu) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';

      menu.attr('role', 'menubar');

      var items = menu.find('li').attr({ 'role': 'menuitem' }),
          subMenuClass = 'is-' + type + '-submenu',
          subItemClass = subMenuClass + '-item',
          hasSubClass = 'is-' + type + '-submenu-parent';

      items.each(function () {
        var $item = $(this),
            $sub = $item.children('ul');

        if ($sub.length) {
          $item.addClass(hasSubClass).attr({
            'aria-haspopup': true,
            'aria-label': $item.children('a:first').text()
          });
          // Note:  Drilldowns behave differently in how they hide, and so need
          // additional attributes.  We should look if this possibly over-generalized
          // utility (Nest) is appropriate when we rework menus in 6.4
          if (type === 'drilldown') {
            $item.attr({ 'aria-expanded': false });
          }

          $sub.addClass('submenu ' + subMenuClass).attr({
            'data-submenu': '',
            'role': 'menu'
          });
          if (type === 'drilldown') {
            $sub.attr({ 'aria-hidden': true });
          }
        }

        if ($item.parent('[data-submenu]').length) {
          $item.addClass('is-submenu-item ' + subItemClass);
        }
      });

      return;
    },
    Burn: function Burn(menu, type) {
      var //items = menu.find('li'),
      subMenuClass = 'is-' + type + '-submenu',
          subItemClass = subMenuClass + '-item',
          hasSubClass = 'is-' + type + '-submenu-parent';

      menu.find('>li, .menu, .menu > li').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');

      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')
      //           .removeAttr('data-submenu'));
      // items.each(function(){
      //   var $item = $(this),
      //       $sub = $item.children('ul');
      //   if($item.parent('[data-submenu]').length){
      //     $item.removeClass('is-submenu-item ' + subItemClass);
      //   }
      //   if($sub.length){
      //     $item.removeClass('has-submenu');
      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');
      //   }
      // });
    }
  };

  Foundation.Nest = Nest;
}(jQuery);
'use strict';

!function ($) {

  function Timer(elem, options, cb) {
    var _this = this,
        duration = options.duration,
        //options is an object for easily adding features later.
    nameSpace = Object.keys(elem.data())[0] || 'timer',
        remain = -1,
        start,
        timer;

    this.isPaused = false;

    this.restart = function () {
      remain = -1;
      clearTimeout(timer);
      this.start();
    };

    this.start = function () {
      this.isPaused = false;
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      remain = remain <= 0 ? duration : remain;
      elem.data('paused', false);
      start = Date.now();
      timer = setTimeout(function () {
        if (options.infinite) {
          _this.restart(); //rerun the timer.
        }
        if (cb && typeof cb === 'function') {
          cb();
        }
      }, remain);
      elem.trigger('timerstart.zf.' + nameSpace);
    };

    this.pause = function () {
      this.isPaused = true;
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      elem.data('paused', true);
      var end = Date.now();
      remain = remain - (end - start);
      elem.trigger('timerpaused.zf.' + nameSpace);
    };
  }

  /**
   * Runs a callback function when images are fully loaded.
   * @param {Object} images - Image(s) to check if loaded.
   * @param {Func} callback - Function to execute when image is fully loaded.
   */
  function onImagesLoaded(images, callback) {
    var self = this,
        unloaded = images.length;

    if (unloaded === 0) {
      callback();
    }

    images.each(function () {
      // Check if image is loaded
      if (this.complete || this.readyState === 4 || this.readyState === 'complete') {
        singleImageLoaded();
      }
      // Force load the image
      else {
          // fix for IE. See https://css-tricks.com/snippets/jquery/fixing-load-in-ie-for-cached-images/
          var src = $(this).attr('src');
          $(this).attr('src', src + (src.indexOf('?') >= 0 ? '&' : '?') + new Date().getTime());
          $(this).one('load', function () {
            singleImageLoaded();
          });
        }
    });

    function singleImageLoaded() {
      unloaded--;
      if (unloaded === 0) {
        callback();
      }
    }
  }

  Foundation.Timer = Timer;
  Foundation.onImagesLoaded = onImagesLoaded;
}(jQuery);
'use strict';

//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************
(function ($) {

	$.spotSwipe = {
		version: '1.0.0',
		enabled: 'ontouchstart' in document.documentElement,
		preventDefault: false,
		moveThreshold: 75,
		timeThreshold: 200
	};

	var startPosX,
	    startPosY,
	    startTime,
	    elapsedTime,
	    isMoving = false;

	function onTouchEnd() {
		//  alert(this);
		this.removeEventListener('touchmove', onTouchMove);
		this.removeEventListener('touchend', onTouchEnd);
		isMoving = false;
	}

	function onTouchMove(e) {
		if ($.spotSwipe.preventDefault) {
			e.preventDefault();
		}
		if (isMoving) {
			var x = e.touches[0].pageX;
			var y = e.touches[0].pageY;
			var dx = startPosX - x;
			var dy = startPosY - y;
			var dir;
			elapsedTime = new Date().getTime() - startTime;
			if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
				dir = dx > 0 ? 'left' : 'right';
			}
			// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
			//   dir = dy > 0 ? 'down' : 'up';
			// }
			if (dir) {
				e.preventDefault();
				onTouchEnd.call(this);
				$(this).trigger('swipe', dir).trigger('swipe' + dir);
			}
		}
	}

	function onTouchStart(e) {
		if (e.touches.length == 1) {
			startPosX = e.touches[0].pageX;
			startPosY = e.touches[0].pageY;
			isMoving = true;
			startTime = new Date().getTime();
			this.addEventListener('touchmove', onTouchMove, false);
			this.addEventListener('touchend', onTouchEnd, false);
		}
	}

	function init() {
		this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
	}

	function teardown() {
		this.removeEventListener('touchstart', onTouchStart);
	}

	$.event.special.swipe = { setup: init };

	$.each(['left', 'up', 'down', 'right'], function () {
		$.event.special['swipe' + this] = { setup: function setup() {
				$(this).on('swipe', $.noop);
			} };
	});
})(jQuery);
/****************************************************
 * Method for adding psuedo drag events to elements *
 ***************************************************/
!function ($) {
	$.fn.addTouch = function () {
		this.each(function (i, el) {
			$(el).bind('touchstart touchmove touchend touchcancel', function () {
				//we pass the original event object because the jQuery event
				//object is normalized to w3c specs and does not provide the TouchList
				handleTouch(event);
			});
		});

		var handleTouch = function handleTouch(event) {
			var touches = event.changedTouches,
			    first = touches[0],
			    eventTypes = {
				touchstart: 'mousedown',
				touchmove: 'mousemove',
				touchend: 'mouseup'
			},
			    type = eventTypes[event.type],
			    simulatedEvent;

			if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
				simulatedEvent = new window.MouseEvent(type, {
					'bubbles': true,
					'cancelable': true,
					'screenX': first.screenX,
					'screenY': first.screenY,
					'clientX': first.clientX,
					'clientY': first.clientY
				});
			} else {
				simulatedEvent = document.createEvent('MouseEvent');
				simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
			}
			first.target.dispatchEvent(simulatedEvent);
		};
	};
}(jQuery);

//**********************************
//**From the jQuery Mobile Library**
//**need to recreate functionality**
//**and try to improve if possible**
//**********************************

/* Removing the jQuery function ****
************************************

(function( $, window, undefined ) {

	var $document = $( document ),
		// supportTouch = $.mobile.support.touch,
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";

	// setup new event shortcuts
	$.each( ( "touchstart touchmove touchend " +
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {

		$.fn[ name ] = function( fn ) {
			return fn ? this.bind( name, fn ) : this.trigger( name );
		};

		// jQuery < 1.8
		if ( $.attrFn ) {
			$.attrFn[ name ] = true;
		}
	});

	function triggerCustomEvent( obj, eventType, event, bubble ) {
		var originalType = event.type;
		event.type = eventType;
		if ( bubble ) {
			$.event.trigger( event, undefined, obj );
		} else {
			$.event.dispatch.call( obj, event );
		}
		event.type = originalType;
	}

	// also handles taphold

	// Also handles swipeleft, swiperight
	$.event.special.swipe = {

		// More than this horizontal displacement, and we will suppress scrolling.
		scrollSupressionThreshold: 30,

		// More time than this, and it isn't a swipe.
		durationThreshold: 1000,

		// Swipe horizontal displacement must be more than this.
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		// Swipe vertical displacement must be less than this.
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		getLocation: function ( event ) {
			var winPageX = window.pageXOffset,
				winPageY = window.pageYOffset,
				x = event.clientX,
				y = event.clientY;

			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {

				// iOS4 clientX/clientY have the value that should have been
				// in pageX/pageY. While pageX/page/ have the value 0
				x = x - winPageX;
				y = y - winPageY;
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {

				// Some Android browsers have totally bogus values for clientX/Y
				// when scrolling/zooming a page. Detectable since clientX/clientY
				// should never be smaller than pageX/pageY minus page scroll
				x = event.pageX - winPageX;
				y = event.pageY - winPageY;
			}

			return {
				x: x,
				y: y
			};
		},

		start: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ],
						origin: $( event.target )
					};
		},

		stop: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ]
					};
		},

		handleSwipe: function( start, stop, thisObject, origTarget ) {
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";

				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;
			}
			return false;

		},

		// This serves as a flag to ensure that at most one swipe event event is
		// in work at any given time
		eventInProgress: false,

		setup: function() {
			var events,
				thisObject = this,
				$this = $( thisObject ),
				context = {};

			// Retrieve the events data for this element and add the swipe context
			events = $.data( this, "mobile-events" );
			if ( !events ) {
				events = { length: 0 };
				$.data( this, "mobile-events", events );
			}
			events.length++;
			events.swipe = context;

			context.start = function( event ) {

				// Bail if we're already working on a swipe event
				if ( $.event.special.swipe.eventInProgress ) {
					return;
				}
				$.event.special.swipe.eventInProgress = true;

				var stop,
					start = $.event.special.swipe.start( event ),
					origTarget = event.target,
					emitted = false;

				context.move = function( event ) {
					if ( !start || event.isDefaultPrevented() ) {
						return;
					}

					stop = $.event.special.swipe.stop( event );
					if ( !emitted ) {
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );
						if ( emitted ) {

							// Reset the context to make way for the next swipe event
							$.event.special.swipe.eventInProgress = false;
						}
					}
					// prevent scrolling
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
						event.preventDefault();
					}
				};

				context.stop = function() {
						emitted = true;

						// Reset the context to make way for the next swipe event
						$.event.special.swipe.eventInProgress = false;
						$document.off( touchMoveEvent, context.move );
						context.move = null;
				};

				$document.on( touchMoveEvent, context.move )
					.one( touchStopEvent, context.stop );
			};
			$this.on( touchStartEvent, context.start );
		},

		teardown: function() {
			var events, context;

			events = $.data( this, "mobile-events" );
			if ( events ) {
				context = events.swipe;
				delete events.swipe;
				events.length--;
				if ( events.length === 0 ) {
					$.removeData( this, "mobile-events" );
				}
			}

			if ( context ) {
				if ( context.start ) {
					$( this ).off( touchStartEvent, context.start );
				}
				if ( context.move ) {
					$document.off( touchMoveEvent, context.move );
				}
				if ( context.stop ) {
					$document.off( touchStopEvent, context.stop );
				}
			}
		}
	};
	$.each({
		swipeleft: "swipe.left",
		swiperight: "swipe.right"
	}, function( event, sourceEvent ) {

		$.event.special[ event ] = {
			setup: function() {
				$( this ).bind( sourceEvent, $.noop );
			},
			teardown: function() {
				$( this ).unbind( sourceEvent );
			}
		};
	});
})( jQuery, this );
*/
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function ($) {

  var MutationObserver = function () {
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
    for (var i = 0; i < prefixes.length; i++) {
      if (prefixes[i] + 'MutationObserver' in window) {
        return window[prefixes[i] + 'MutationObserver'];
      }
    }
    return false;
  }();

  var triggers = function triggers(el, type) {
    el.data(type).split(' ').forEach(function (id) {
      $('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
    });
  };
  // Elements with [data-open] will reveal a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-open]', function () {
    triggers($(this), 'open');
  });

  // Elements with [data-close] will close a plugin that supports it when clicked.
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
  $(document).on('click.zf.trigger', '[data-close]', function () {
    var id = $(this).data('close');
    if (id) {
      triggers($(this), 'close');
    } else {
      $(this).trigger('close.zf.trigger');
    }
  });

  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-toggle]', function () {
    var id = $(this).data('toggle');
    if (id) {
      triggers($(this), 'toggle');
    } else {
      $(this).trigger('toggle.zf.trigger');
    }
  });

  // Elements with [data-closable] will respond to close.zf.trigger events.
  $(document).on('close.zf.trigger', '[data-closable]', function (e) {
    e.stopPropagation();
    var animation = $(this).data('closable');

    if (animation !== '') {
      Foundation.Motion.animateOut($(this), animation, function () {
        $(this).trigger('closed.zf');
      });
    } else {
      $(this).fadeOut().trigger('closed.zf');
    }
  });

  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {
    var id = $(this).data('toggle-focus');
    $('#' + id).triggerHandler('toggle.zf.trigger', [$(this)]);
  });

  /**
  * Fires once after all other scripts have loaded
  * @function
  * @private
  */
  $(window).on('load', function () {
    checkListeners();
  });

  function checkListeners() {
    eventsListener();
    resizeListener();
    scrollListener();
    mutateListener();
    closemeListener();
  }

  //******** only fires this function once on load, if there's something to watch ********
  function closemeListener(pluginName) {
    var yetiBoxes = $('[data-yeti-box]'),
        plugNames = ['dropdown', 'tooltip', 'reveal'];

    if (pluginName) {
      if (typeof pluginName === 'string') {
        plugNames.push(pluginName);
      } else if ((typeof pluginName === 'undefined' ? 'undefined' : _typeof(pluginName)) === 'object' && typeof pluginName[0] === 'string') {
        plugNames.concat(pluginName);
      } else {
        console.error('Plugin names must be strings');
      }
    }
    if (yetiBoxes.length) {
      var listeners = plugNames.map(function (name) {
        return 'closeme.zf.' + name;
      }).join(' ');

      $(window).off(listeners).on(listeners, function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = $('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = $(this);

          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      });
    }
  }

  function resizeListener(debounce) {
    var timer = void 0,
        $nodes = $('[data-resize]');
    if ($nodes.length) {
      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('resizeme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a resize event
          $nodes.attr('data-events', "resize");
        }, debounce || 10); //default time to emit resize event
      });
    }
  }

  function scrollListener(debounce) {
    var timer = void 0,
        $nodes = $('[data-scroll]');
    if ($nodes.length) {
      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('scrollme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a scroll event
          $nodes.attr('data-events', "scroll");
        }, debounce || 10); //default time to emit scroll event
      });
    }
  }

  function mutateListener(debounce) {
    var $nodes = $('[data-mutate]');
    if ($nodes.length && MutationObserver) {
      //trigger all listening elements and signal a mutate event
      //no IE 9 or 10
      $nodes.each(function () {
        $(this).triggerHandler('mutateme.zf.trigger');
      });
    }
  }

  function eventsListener() {
    if (!MutationObserver) {
      return false;
    }
    var nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');

    //element callback
    var listeningElementsMutation = function listeningElementsMutation(mutationRecordsList) {
      var $target = $(mutationRecordsList[0].target);

      //trigger the event handler for the element depending on type
      switch (mutationRecordsList[0].type) {

        case "attributes":
          if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
            $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
          }
          if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
            $target.triggerHandler('resizeme.zf.trigger', [$target]);
          }
          if (mutationRecordsList[0].attributeName === "style") {
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
          }
          break;

        case "childList":
          $target.closest("[data-mutate]").attr("data-events", "mutate");
          $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
          break;

        default:
          return false;
        //nothing
      }
    };

    if (nodes.length) {
      //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
      for (var i = 0; i <= nodes.length - 1; i++) {
        var elementObserver = new MutationObserver(listeningElementsMutation);
        elementObserver.observe(nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
      }
    }
  }

  // ------------------------------------

  // [PH]
  // Foundation.CheckWatchers = checkWatchers;
  Foundation.IHearYou = checkListeners;
  // Foundation.ISeeYou = scrollListener;
  // Foundation.IFeelYou = closemeListener;
}(jQuery);

// function domMutationObserver(debounce) {
//   // !!! This is coming soon and needs more work; not active  !!! //
//   var timer,
//   nodes = document.querySelectorAll('[data-mutate]');
//   //
//   if (nodes.length) {
//     // var MutationObserver = (function () {
//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
//     //   for (var i=0; i < prefixes.length; i++) {
//     //     if (prefixes[i] + 'MutationObserver' in window) {
//     //       return window[prefixes[i] + 'MutationObserver'];
//     //     }
//     //   }
//     //   return false;
//     // }());
//
//
//     //for the body, we need to listen for all changes effecting the style and class attributes
//     var bodyObserver = new MutationObserver(bodyMutation);
//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:["style", "class"]});
//
//
//     //body callback
//     function bodyMutation(mutate) {
//       //trigger all listening elements and signal a mutation event
//       if (timer) { clearTimeout(timer); }
//
//       timer = setTimeout(function() {
//         bodyObserver.disconnect();
//         $('[data-mutate]').attr('data-events',"mutate");
//       }, debounce || 150);
//     }
//   }
// }
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Magellan module.
   * @module foundation.magellan
   */

  var Magellan = function () {
    /**
     * Creates a new instance of Magellan.
     * @class
     * @fires Magellan#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Magellan(element, options) {
      _classCallCheck(this, Magellan);

      this.$element = element;
      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);

      this._init();
      this.calcPoints();

      Foundation.registerPlugin(this, 'Magellan');
    }

    /**
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
     * @private
     */


    _createClass(Magellan, [{
      key: '_init',
      value: function _init() {
        var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');
        var _this = this;
        this.$targets = $('[data-magellan-target]');
        this.$links = this.$element.find('a');
        this.$element.attr({
          'data-resize': id,
          'data-scroll': id,
          'id': id
        });
        this.$active = $();
        this.scrollPos = parseInt(window.pageYOffset, 10);

        this._events();
      }

      /**
       * Calculates an array of pixel values that are the demarcation lines between locations on the page.
       * Can be invoked if new elements are added or the size of a location changes.
       * @function
       */

    }, {
      key: 'calcPoints',
      value: function calcPoints() {
        var _this = this,
            body = document.body,
            html = document.documentElement;

        this.points = [];
        this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
        this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));

        this.$targets.each(function () {
          var $tar = $(this),
              pt = Math.round($tar.offset().top - _this.options.threshold);
          $tar.targetPoint = pt;
          _this.points.push(pt);
        });
      }

      /**
       * Initializes events for Magellan.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this,
            $body = $('html, body'),
            opts = {
          duration: _this.options.animationDuration,
          easing: _this.options.animationEasing
        };
        $(window).one('load', function () {
          if (_this.options.deepLinking) {
            if (location.hash) {
              _this.scrollToLoc(location.hash);
            }
          }
          _this.calcPoints();
          _this._updateActive();
        });

        this.$element.on({
          'resizeme.zf.trigger': this.reflow.bind(this),
          'scrollme.zf.trigger': this._updateActive.bind(this)
        }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
          e.preventDefault();
          var arrival = this.getAttribute('href');
          _this.scrollToLoc(arrival);
        });
        $(window).on('popstate', function (e) {
          if (_this.options.deepLinking) {
            _this.scrollToLoc(window.location.hash);
          }
        });
      }

      /**
       * Function to scroll to a given location on the page.
       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
       * @function
       */

    }, {
      key: 'scrollToLoc',
      value: function scrollToLoc(loc) {
        // Do nothing if target does not exist to prevent errors
        if (!$(loc).length) {
          return false;
        }
        this._inTransition = true;
        var _this = this,
            scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);

        $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing, function () {
          _this._inTransition = false;_this._updateActive();
        });
      }

      /**
       * Calls necessary functions to update Magellan upon DOM change
       * @function
       */

    }, {
      key: 'reflow',
      value: function reflow() {
        this.calcPoints();
        this._updateActive();
      }

      /**
       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
       * @private
       * @function
       * @fires Magellan#update
       */

    }, {
      key: '_updateActive',
      value: function _updateActive() /*evt, elem, scrollPos*/{
        if (this._inTransition) {
          return;
        }
        var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),
            curIdx;

        if (winPos + this.winHeight === this.docHeight) {
          curIdx = this.points.length - 1;
        } else if (winPos < this.points[0]) {
          curIdx = undefined;
        } else {
          var isDown = this.scrollPos < winPos,
              _this = this,
              curVisible = this.points.filter(function (p, i) {
            return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;
          });
          curIdx = curVisible.length ? curVisible.length - 1 : 0;
        }

        this.$active.removeClass(this.options.activeClass);
        this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);

        if (this.options.deepLinking) {
          var hash = "";
          if (curIdx != undefined) {
            hash = this.$active[0].getAttribute('href');
          }
          if (hash !== window.location.hash) {
            if (window.history.pushState) {
              window.history.pushState(null, null, hash);
            } else {
              window.location.hash = hash;
            }
          }
        }

        this.scrollPos = winPos;
        /**
         * Fires when magellan is finished updating to the new active element.
         * @event Magellan#update
         */
        this.$element.trigger('update.zf.magellan', [this.$active]);
      }

      /**
       * Destroys an instance of Magellan and resets the url of the window.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);

        if (this.options.deepLinking) {
          var hash = this.$active[0].getAttribute('href');
          window.location.hash.replace(hash, '');
        }

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Magellan;
  }();

  /**
   * Default settings for plugin
   */


  Magellan.defaults = {
    /**
     * Amount of time, in ms, the animated scrolling should take between locations.
     * @option
     * @type {number}
     * @default 500
     */
    animationDuration: 500,
    /**
     * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
     * @option
     * @type {string}
     * @default 'linear'
     * @see {@link https://api.jquery.com/animate|Jquery animate}
     */
    animationEasing: 'linear',
    /**
     * Number of pixels to use as a marker for location changes.
     * @option
     * @type {number}
     * @default 50
     */
    threshold: 50,
    /**
     * Class applied to the active locations link on the magellan container.
     * @option
     * @type {string}
     * @default 'active'
     */
    activeClass: 'active',
    /**
     * Allows the script to manipulate the url of the current page, and if supported, alter the history.
     * @option
     * @type {boolean}
     * @default false
     */
    deepLinking: false,
    /**
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
     * @option
     * @type {number}
     * @default 0
     */
    barOffset: 0
  };

  // Window exports
  Foundation.plugin(Magellan, 'Magellan');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * ResponsiveToggle module.
   * @module foundation.responsiveToggle
   * @requires foundation.util.mediaQuery
   */

  var ResponsiveToggle = function () {
    /**
     * Creates a new instance of Tab Bar.
     * @class
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function ResponsiveToggle(element, options) {
      _classCallCheck(this, ResponsiveToggle);

      this.$element = $(element);
      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveToggle');
    }

    /**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */


    _createClass(ResponsiveToggle, [{
      key: '_init',
      value: function _init() {
        var targetID = this.$element.data('responsive-toggle');
        if (!targetID) {
          console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
        }

        this.$targetMenu = $('#' + targetID);
        this.$toggler = this.$element.find('[data-toggle]').filter(function () {
          var target = $(this).data('toggle');
          return target === targetID || target === "";
        });
        this.options = $.extend({}, this.options, this.$targetMenu.data());

        // If they were set, parse the animation classes
        if (this.options.animate) {
          var input = this.options.animate.split(' ');

          this.animationIn = input[0];
          this.animationOut = input[1] || null;
        }

        this._update();
      }

      /**
       * Adds necessary event handlers for the tab bar to work.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        this._updateMqHandler = this._update.bind(this);

        $(window).on('changed.zf.mediaquery', this._updateMqHandler);

        this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
      }

      /**
       * Checks the current media query to determine if the tab bar should be visible or hidden.
       * @function
       * @private
       */

    }, {
      key: '_update',
      value: function _update() {
        // Mobile
        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
          this.$element.show();
          this.$targetMenu.hide();
        }

        // Desktop
        else {
            this.$element.hide();
            this.$targetMenu.show();
          }
      }

      /**
       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
       * @function
       * @fires ResponsiveToggle#toggled
       */

    }, {
      key: 'toggleMenu',
      value: function toggleMenu() {
        var _this2 = this;

        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
          /**
           * Fires when the element attached to the tab bar toggles.
           * @event ResponsiveToggle#toggled
           */
          if (this.options.animate) {
            if (this.$targetMenu.is(':hidden')) {
              Foundation.Motion.animateIn(this.$targetMenu, this.animationIn, function () {
                _this2.$element.trigger('toggled.zf.responsiveToggle');
                _this2.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');
              });
            } else {
              Foundation.Motion.animateOut(this.$targetMenu, this.animationOut, function () {
                _this2.$element.trigger('toggled.zf.responsiveToggle');
              });
            }
          } else {
            this.$targetMenu.toggle(0);
            this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');
            this.$element.trigger('toggled.zf.responsiveToggle');
          }
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.responsiveToggle');
        this.$toggler.off('.zf.responsiveToggle');

        $(window).off('changed.zf.mediaquery', this._updateMqHandler);

        Foundation.unregisterPlugin(this);
      }
    }]);

    return ResponsiveToggle;
  }();

  ResponsiveToggle.defaults = {
    /**
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.
     * @option
     * @type {string}
     * @default 'medium'
     */
    hideFor: 'medium',

    /**
     * To decide if the toggle should be animated or not.
     * @option
     * @type {boolean}
     * @default false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Sticky module.
   * @module foundation.sticky
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   */

  var Sticky = function () {
    /**
     * Creates a new instance of a sticky thing.
     * @class
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */
    function Sticky(element, options) {
      _classCallCheck(this, Sticky);

      this.$element = element;
      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Sticky');
    }

    /**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */


    _createClass(Sticky, [{
      key: '_init',
      value: function _init() {
        var $parent = this.$element.parent('[data-sticky-container]'),
            id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),
            _this = this;

        if (!$parent.length) {
          this.wasWrapped = true;
        }
        this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);
        this.$container.addClass(this.options.containerClass);

        this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });

        this.scrollCount = this.options.checkEvery;
        this.isStuck = false;
        $(window).one('load.zf.sticky', function () {
          //We calculate the container height to have correct values for anchor points offset calculation.
          _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
          _this.$container.css('height', _this.containerHeight);
          _this.elemHeight = _this.containerHeight;
          if (_this.options.anchor !== '') {
            _this.$anchor = $('#' + _this.options.anchor);
          } else {
            _this._parsePoints();
          }

          _this._setSizes(function () {
            var scroll = window.pageYOffset;
            _this._calc(false, scroll);
            //Unstick the element will ensure that proper classes are set.
            if (!_this.isStuck) {
              _this._removeSticky(scroll >= _this.topPoint ? false : true);
            }
          });
          _this._events(id.split('-').reverse().join('-'));
        });
      }

      /**
       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
       * @function
       * @private
       */

    }, {
      key: '_parsePoints',
      value: function _parsePoints() {
        var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
            btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
            pts = [top, btm],
            breaks = {};
        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
          var pt;
          if (typeof pts[i] === 'number') {
            pt = pts[i];
          } else {
            var place = pts[i].split(':'),
                anchor = $('#' + place[0]);

            pt = anchor.offset().top;
            if (place[1] && place[1].toLowerCase() === 'bottom') {
              pt += anchor[0].getBoundingClientRect().height;
            }
          }
          breaks[i] = pt;
        }

        this.points = breaks;
        return;
      }

      /**
       * Adds event handlers for the scrolling element.
       * @private
       * @param {String} id - psuedo-random id for unique scroll event listener.
       */

    }, {
      key: '_events',
      value: function _events(id) {
        var _this = this,
            scrollListener = this.scrollListener = 'scroll.zf.' + id;
        if (this.isOn) {
          return;
        }
        if (this.canStick) {
          this.isOn = true;
          $(window).off(scrollListener).on(scrollListener, function (e) {
            if (_this.scrollCount === 0) {
              _this.scrollCount = _this.options.checkEvery;
              _this._setSizes(function () {
                _this._calc(false, window.pageYOffset);
              });
            } else {
              _this.scrollCount--;
              _this._calc(false, window.pageYOffset);
            }
          });
        }

        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
          _this._setSizes(function () {
            _this._calc(false);
            if (_this.canStick) {
              if (!_this.isOn) {
                _this._events(id);
              }
            } else if (_this.isOn) {
              _this._pauseListeners(scrollListener);
            }
          });
        });
      }

      /**
       * Removes event handlers for scroll and change events on anchor.
       * @fires Sticky#pause
       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
       */

    }, {
      key: '_pauseListeners',
      value: function _pauseListeners(scrollListener) {
        this.isOn = false;
        $(window).off(scrollListener);

        /**
         * Fires when the plugin is paused due to resize event shrinking the view.
         * @event Sticky#pause
         * @private
         */
        this.$element.trigger('pause.zf.sticky');
      }

      /**
       * Called on every `scroll` event and on `_init`
       * fires functions based on booleans and cached values
       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
       */

    }, {
      key: '_calc',
      value: function _calc(checkSizes, scroll) {
        if (checkSizes) {
          this._setSizes();
        }

        if (!this.canStick) {
          if (this.isStuck) {
            this._removeSticky(true);
          }
          return false;
        }

        if (!scroll) {
          scroll = window.pageYOffset;
        }

        if (scroll >= this.topPoint) {
          if (scroll <= this.bottomPoint) {
            if (!this.isStuck) {
              this._setSticky();
            }
          } else {
            if (this.isStuck) {
              this._removeSticky(false);
            }
          }
        } else {
          if (this.isStuck) {
            this._removeSticky(true);
          }
        }
      }

      /**
       * Causes the $element to become stuck.
       * Adds `position: fixed;`, and helper classes.
       * @fires Sticky#stuckto
       * @function
       * @private
       */

    }, {
      key: '_setSticky',
      value: function _setSticky() {
        var _this = this,
            stickTo = this.options.stickTo,
            mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
            notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
            css = {};

        css[mrgn] = this.options[mrgn] + 'em';
        css[stickTo] = 0;
        css[notStuckTo] = 'auto';
        this.isStuck = true;
        this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)
        /**
         * Fires when the $element has become `position: fixed;`
         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
         * @event Sticky#stuckto
         */
        .trigger('sticky.zf.stuckto:' + stickTo);
        this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
          _this._setSizes();
        });
      }

      /**
       * Causes the $element to become unstuck.
       * Removes `position: fixed;`, and helper classes.
       * Adds other helper classes.
       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
       * @fires Sticky#unstuckfrom
       * @private
       */

    }, {
      key: '_removeSticky',
      value: function _removeSticky(isTop) {
        var stickTo = this.options.stickTo,
            stickToTop = stickTo === 'top',
            css = {},
            anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
            mrgn = stickToTop ? 'marginTop' : 'marginBottom',
            notStuckTo = stickToTop ? 'bottom' : 'top',
            topOrBottom = isTop ? 'top' : 'bottom';

        css[mrgn] = 0;

        css['bottom'] = 'auto';
        if (isTop) {
          css['top'] = 0;
        } else {
          css['top'] = anchorPt;
        }

        this.isStuck = false;
        this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)
        /**
         * Fires when the $element has become anchored.
         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
         * @event Sticky#unstuckfrom
         */
        .trigger('sticky.zf.unstuckfrom:' + topOrBottom);
      }

      /**
       * Sets the $element and $container sizes for plugin.
       * Calls `_setBreakPoints`.
       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
       * @private
       */

    }, {
      key: '_setSizes',
      value: function _setSizes(cb) {
        this.canStick = Foundation.MediaQuery.is(this.options.stickyOn);
        if (!this.canStick) {
          if (cb && typeof cb === 'function') {
            cb();
          }
        }
        var _this = this,
            newElemWidth = this.$container[0].getBoundingClientRect().width,
            comp = window.getComputedStyle(this.$container[0]),
            pdngl = parseInt(comp['padding-left'], 10),
            pdngr = parseInt(comp['padding-right'], 10);

        if (this.$anchor && this.$anchor.length) {
          this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
        } else {
          this._parsePoints();
        }

        this.$element.css({
          'max-width': newElemWidth - pdngl - pdngr + 'px'
        });

        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
        if (this.$element.css("display") == "none") {
          newContainerHeight = 0;
        }
        this.containerHeight = newContainerHeight;
        this.$container.css({
          height: newContainerHeight
        });
        this.elemHeight = newContainerHeight;

        if (!this.isStuck) {
          if (this.$element.hasClass('is-at-bottom')) {
            var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
            this.$element.css('top', anchorPt);
          }
        }

        this._setBreakPoints(newContainerHeight, function () {
          if (cb && typeof cb === 'function') {
            cb();
          }
        });
      }

      /**
       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
       * @param {Function} cb - optional callback function to be called on completion.
       * @private
       */

    }, {
      key: '_setBreakPoints',
      value: function _setBreakPoints(elemHeight, cb) {
        if (!this.canStick) {
          if (cb && typeof cb === 'function') {
            cb();
          } else {
            return false;
          }
        }
        var mTop = emCalc(this.options.marginTop),
            mBtm = emCalc(this.options.marginBottom),
            topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
            bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,

        // topPoint = this.$anchor.offset().top || this.points[0],
        // bottomPoint = topPoint + this.anchorHeight || this.points[1],
        winHeight = window.innerHeight;

        if (this.options.stickTo === 'top') {
          topPoint -= mTop;
          bottomPoint -= elemHeight + mTop;
        } else if (this.options.stickTo === 'bottom') {
          topPoint -= winHeight - (elemHeight + mBtm);
          bottomPoint -= winHeight - mBtm;
        } else {
          //this would be the stickTo: both option... tricky
        }

        this.topPoint = topPoint;
        this.bottomPoint = bottomPoint;

        if (cb && typeof cb === 'function') {
          cb();
        }
      }

      /**
       * Destroys the current sticky element.
       * Resets the element to the top position first.
       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this._removeSticky(true);

        this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({
          height: '',
          top: '',
          bottom: '',
          'max-width': ''
        }).off('resizeme.zf.trigger');
        if (this.$anchor && this.$anchor.length) {
          this.$anchor.off('change.zf.sticky');
        }
        $(window).off(this.scrollListener);

        if (this.wasWrapped) {
          this.$element.unwrap();
        } else {
          this.$container.removeClass(this.options.containerClass).css({
            height: ''
          });
        }
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Sticky;
  }();

  Sticky.defaults = {
    /**
     * Customizable container template. Add your own classes for styling and sizing.
     * @option
     * @type {string}
     * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'
     */
    container: '<div data-sticky-container></div>',
    /**
     * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.
     * @option
     * @type {string}
     * @default 'top'
     */
    stickTo: 'top',
    /**
     * If anchored to a single element, the id of that element.
     * @option
     * @type {string}
     * @default ''
     */
    anchor: '',
    /**
     * If using more than one element as anchor points, the id of the top anchor.
     * @option
     * @type {string}
     * @default ''
     */
    topAnchor: '',
    /**
     * If using more than one element as anchor points, the id of the bottom anchor.
     * @option
     * @type {string}
     * @default ''
     */
    btmAnchor: '',
    /**
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
     * @option
     * @type {number}
     * @default 1
     */
    marginTop: 1,
    /**
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
     * @option
     * @type {number}
     * @default 1
     */
    marginBottom: 1,
    /**
     * Breakpoint string that is the minimum screen size an element should become sticky.
     * @option
     * @type {string}
     * @default 'medium'
     */
    stickyOn: 'medium',
    /**
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
     * @option
     * @type {string}
     * @default 'sticky'
     */
    stickyClass: 'sticky',
    /**
     * Class applied to sticky container. Foundation defaults to `sticky-container`.
     * @option
     * @type {string}
     * @default 'sticky-container'
     */
    containerClass: 'sticky-container',
    /**
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option
     * @type {number}
     * @default -1
     */
    checkEvery: -1
  };

  /**
   * Helper function to calculate em values
   * @param Number {em} - number of em's to calculate into pixels
   */
  function emCalc(em) {
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
  }

  // Window exports
  Foundation.plugin(Sticky, 'Sticky');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Toggler module.
   * @module foundation.toggler
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   */

  var Toggler = function () {
    /**
     * Creates a new instance of Toggler.
     * @class
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Toggler(element, options) {
      _classCallCheck(this, Toggler);

      this.$element = element;
      this.options = $.extend({}, Toggler.defaults, element.data(), options);
      this.className = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Toggler');
    }

    /**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */


    _createClass(Toggler, [{
      key: '_init',
      value: function _init() {
        var input;
        // Parse animation classes if they were set
        if (this.options.animate) {
          input = this.options.animate.split(' ');

          this.animationIn = input[0];
          this.animationOut = input[1] || null;
        }
        // Otherwise, parse toggle class
        else {
            input = this.$element.data('toggler');
            // Allow for a . at the beginning of the string
            this.className = input[0] === '.' ? input.slice(1) : input;
          }

        // Add ARIA attributes to triggers
        var id = this.$element[0].id;
        $('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-controls', id);
        // If the target is hidden, add aria-hidden
        this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
      }

      /**
       * Initializes events for the toggle trigger.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
      }

      /**
       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
       * @function
       * @fires Toggler#on
       * @fires Toggler#off
       */

    }, {
      key: 'toggle',
      value: function toggle() {
        this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
      }
    }, {
      key: '_toggleClass',
      value: function _toggleClass() {
        this.$element.toggleClass(this.className);

        var isOn = this.$element.hasClass(this.className);
        if (isOn) {
          /**
           * Fires if the target element has the class after a toggle.
           * @event Toggler#on
           */
          this.$element.trigger('on.zf.toggler');
        } else {
          /**
           * Fires if the target element does not have the class after a toggle.
           * @event Toggler#off
           */
          this.$element.trigger('off.zf.toggler');
        }

        this._updateARIA(isOn);
        this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');
      }
    }, {
      key: '_toggleAnimate',
      value: function _toggleAnimate() {
        var _this = this;

        if (this.$element.is(':hidden')) {
          Foundation.Motion.animateIn(this.$element, this.animationIn, function () {
            _this._updateARIA(true);
            this.trigger('on.zf.toggler');
            this.find('[data-mutate]').trigger('mutateme.zf.trigger');
          });
        } else {
          Foundation.Motion.animateOut(this.$element, this.animationOut, function () {
            _this._updateARIA(false);
            this.trigger('off.zf.toggler');
            this.find('[data-mutate]').trigger('mutateme.zf.trigger');
          });
        }
      }
    }, {
      key: '_updateARIA',
      value: function _updateARIA(isOn) {
        this.$element.attr('aria-expanded', isOn ? true : false);
      }

      /**
       * Destroys the instance of Toggler on the element.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.toggler');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Toggler;
  }();

  Toggler.defaults = {
    /**
     * Tells the plugin if the element should animated when toggled.
     * @option
     * @type {boolean}
     * @default false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(Toggler, 'Toggler');
}(jQuery);
"use strict";

/*
 * Color Thief v2.0
 * by Lokesh Dhakar - http://www.lokeshdhakar.com
 *
 * Thanks
 * ------
 * Nick Rabinowitz - For creating quantize.js.
 * John Schulz - For clean up and optimization. @JFSIII
 * Nathan Spady - For adding drag and drop support to the demo page.
 *
 * License
 * -------
 * Copyright 2011, 2015 Lokesh Dhakar
 * Released under the MIT license
 * https://raw.githubusercontent.com/lokesh/color-thief/master/LICENSE
 *
 * @license
 */
var CanvasImage = function CanvasImage(a) {
    this.canvas = document.createElement("canvas"), this.context = this.canvas.getContext("2d"), document.body.appendChild(this.canvas), this.width = this.canvas.width = a.width, this.height = this.canvas.height = a.height, this.context.drawImage(a, 0, 0, this.width, this.height);
};
CanvasImage.prototype.clear = function () {
    this.context.clearRect(0, 0, this.width, this.height);
}, CanvasImage.prototype.update = function (a) {
    this.context.putImageData(a, 0, 0);
}, CanvasImage.prototype.getPixelCount = function () {
    return this.width * this.height;
}, CanvasImage.prototype.getImageData = function () {
    return this.context.getImageData(0, 0, this.width, this.height);
}, CanvasImage.prototype.removeCanvas = function () {
    this.canvas.parentNode.removeChild(this.canvas);
};
var ColorThief = function ColorThief() {};
/*!
 * quantize.js Copyright 2008 Nick Rabinowitz.
 * Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
 * @license
 */
/*!
 * Block below copied from Protovis: http://mbostock.github.com/protovis/
 * Copyright 2010 Stanford Visualization Group
 * Licensed under the BSD License: http://www.opensource.org/licenses/bsd-license.php
 * @license
 */
if (ColorThief.prototype.getColor = function (a, b) {
    var c = this.getPalette(a, 5, b),
        d = c[0];
    return d;
}, ColorThief.prototype.getPalette = function (a, b, c) {
    "undefined" == typeof b && (b = 10), ("undefined" == typeof c || c < 1) && (c = 10);
    for (var d, e, f, g, h, i = new CanvasImage(a), j = i.getImageData(), k = j.data, l = i.getPixelCount(), m = [], n = 0; n < l; n += c) {
        d = 4 * n, e = k[d + 0], f = k[d + 1], g = k[d + 2], h = k[d + 3], h >= 125 && (e > 250 && f > 250 && g > 250 || m.push([e, f, g]));
    }var o = MMCQ.quantize(m, b),
        p = o ? o.palette() : null;
    return i.removeCanvas(), p;
}, !pv) var pv = {
    map: function map(a, b) {
        var c = {};
        return b ? a.map(function (a, d) {
            return c.index = d, b.call(c, a);
        }) : a.slice();
    },
    naturalOrder: function naturalOrder(a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
    },
    sum: function sum(a, b) {
        var c = {};
        return a.reduce(b ? function (a, d, e) {
            return c.index = e, a + b.call(c, d);
        } : function (a, b) {
            return a + b;
        }, 0);
    },
    max: function max(a, b) {
        return Math.max.apply(null, b ? pv.map(a, b) : a);
    }
};
var MMCQ = function () {
    function a(a, b, c) {
        return (a << 2 * i) + (b << i) + c;
    }

    function b(a) {
        function b() {
            c.sort(a), d = !0;
        }
        var c = [],
            d = !1;
        return {
            push: function push(a) {
                c.push(a), d = !1;
            },
            peek: function peek(a) {
                return d || b(), void 0 === a && (a = c.length - 1), c[a];
            },
            pop: function pop() {
                return d || b(), c.pop();
            },
            size: function size() {
                return c.length;
            },
            map: function map(a) {
                return c.map(a);
            },
            debug: function debug() {
                return d || b(), c;
            }
        };
    }

    function c(a, b, c, d, e, f, g) {
        var h = this;
        h.r1 = a, h.r2 = b, h.g1 = c, h.g2 = d, h.b1 = e, h.b2 = f, h.histo = g;
    }

    function d() {
        this.vboxes = new b(function (a, b) {
            return pv.naturalOrder(a.vbox.count() * a.vbox.volume(), b.vbox.count() * b.vbox.volume());
        });
    }

    function e(b) {
        var c,
            d,
            e,
            f,
            g = 1 << 3 * i,
            h = new Array(g);
        return b.forEach(function (b) {
            d = b[0] >> j, e = b[1] >> j, f = b[2] >> j, c = a(d, e, f), h[c] = (h[c] || 0) + 1;
        }), h;
    }

    function f(a, b) {
        var d,
            e,
            f,
            g = 1e6,
            h = 0,
            i = 1e6,
            k = 0,
            l = 1e6,
            m = 0;
        return a.forEach(function (a) {
            d = a[0] >> j, e = a[1] >> j, f = a[2] >> j, d < g ? g = d : d > h && (h = d), e < i ? i = e : e > k && (k = e), f < l ? l = f : f > m && (m = f);
        }), new c(g, h, i, k, l, m, b);
    }

    function g(b, c) {
        function d(a) {
            var b,
                d,
                e,
                f,
                g,
                h = a + "1",
                j = a + "2",
                k = 0;
            for (i = c[h]; i <= c[j]; i++) {
                if (o[i] > n / 2) {
                    for (e = c.copy(), f = c.copy(), b = i - c[h], d = c[j] - i, g = b <= d ? Math.min(c[j] - 1, ~~(i + d / 2)) : Math.max(c[h], ~~(i - 1 - b / 2)); !o[g];) {
                        g++;
                    }for (k = p[g]; !k && o[g - 1];) {
                        k = p[--g];
                    }return e[j] = g, f[h] = e[j] + 1, [e, f];
                }
            }
        }
        if (c.count()) {
            var e = c.r2 - c.r1 + 1,
                f = c.g2 - c.g1 + 1,
                g = c.b2 - c.b1 + 1,
                h = pv.max([e, f, g]);
            if (1 == c.count()) return [c.copy()];
            var i,
                j,
                k,
                l,
                m,
                n = 0,
                o = [],
                p = [];
            if (h == e) for (i = c.r1; i <= c.r2; i++) {
                for (l = 0, j = c.g1; j <= c.g2; j++) {
                    for (k = c.b1; k <= c.b2; k++) {
                        m = a(i, j, k), l += b[m] || 0;
                    }
                }n += l, o[i] = n;
            } else if (h == f) for (i = c.g1; i <= c.g2; i++) {
                for (l = 0, j = c.r1; j <= c.r2; j++) {
                    for (k = c.b1; k <= c.b2; k++) {
                        m = a(j, i, k), l += b[m] || 0;
                    }
                }n += l, o[i] = n;
            } else for (i = c.b1; i <= c.b2; i++) {
                for (l = 0, j = c.r1; j <= c.r2; j++) {
                    for (k = c.g1; k <= c.g2; k++) {
                        m = a(j, k, i), l += b[m] || 0;
                    }
                }n += l, o[i] = n;
            }
            return o.forEach(function (a, b) {
                p[b] = n - a;
            }), d(h == e ? "r" : h == f ? "g" : "b");
        }
    }

    function h(a, c) {
        function h(a, b) {
            for (var c, d = 1, e = 0; e < k;) {
                if (c = a.pop(), c.count()) {
                    var f = g(i, c),
                        h = f[0],
                        j = f[1];
                    if (!h) return;
                    if (a.push(h), j && (a.push(j), d++), d >= b) return;
                    if (e++ > k) return;
                } else a.push(c), e++;
            }
        }
        if (!a.length || c < 2 || c > 256) return !1;
        var i = e(a),
            j = 0;
        i.forEach(function () {
            j++;
        });
        var m = f(a, i),
            n = new b(function (a, b) {
            return pv.naturalOrder(a.count(), b.count());
        });
        n.push(m), h(n, l * c);
        for (var o = new b(function (a, b) {
            return pv.naturalOrder(a.count() * a.volume(), b.count() * b.volume());
        }); n.size();) {
            o.push(n.pop());
        }h(o, c - o.size());
        for (var p = new d(); o.size();) {
            p.push(o.pop());
        }return p;
    }
    var i = 5,
        j = 8 - i,
        k = 1e3,
        l = .75;
    return c.prototype = {
        volume: function volume(a) {
            var b = this;
            return b._volume && !a || (b._volume = (b.r2 - b.r1 + 1) * (b.g2 - b.g1 + 1) * (b.b2 - b.b1 + 1)), b._volume;
        },
        count: function count(b) {
            var c = this,
                d = c.histo;
            if (!c._count_set || b) {
                var e,
                    f,
                    g,
                    h = 0;
                for (e = c.r1; e <= c.r2; e++) {
                    for (f = c.g1; f <= c.g2; f++) {
                        for (g = c.b1; g <= c.b2; g++) {
                            var index;
                            index = a(e, f, g), h += d[index] || 0;
                        }
                    }
                }c._count = h, c._count_set = !0;
            }
            return c._count;
        },
        copy: function copy() {
            var a = this;
            return new c(a.r1, a.r2, a.g1, a.g2, a.b1, a.b2, a.histo);
        },
        avg: function avg(b) {
            var c = this,
                d = c.histo;
            if (!c._avg || b) {
                var e,
                    f,
                    g,
                    h,
                    j,
                    k = 0,
                    l = 1 << 8 - i,
                    m = 0,
                    n = 0,
                    o = 0;
                for (f = c.r1; f <= c.r2; f++) {
                    for (g = c.g1; g <= c.g2; g++) {
                        for (h = c.b1; h <= c.b2; h++) {
                            j = a(f, g, h), e = d[j] || 0, k += e, m += e * (f + .5) * l, n += e * (g + .5) * l, o += e * (h + .5) * l;
                        }
                    }
                }k ? c._avg = [~~(m / k), ~~(n / k), ~~(o / k)] : c._avg = [~~(l * (c.r1 + c.r2 + 1) / 2), ~~(l * (c.g1 + c.g2 + 1) / 2), ~~(l * (c.b1 + c.b2 + 1) / 2)];
            }
            return c._avg;
        },
        contains: function contains(a) {
            var b = this,
                c = a[0] >> j;
            return gval = a[1] >> j, bval = a[2] >> j, c >= b.r1 && c <= b.r2 && gval >= b.g1 && gval <= b.g2 && bval >= b.b1 && bval <= b.b2;
        }
    }, d.prototype = {
        push: function push(a) {
            this.vboxes.push({
                vbox: a,
                color: a.avg()
            });
        },
        palette: function palette() {
            return this.vboxes.map(function (a) {
                return a.color;
            });
        },
        size: function size() {
            return this.vboxes.size();
        },
        map: function map(a) {
            for (var b = this.vboxes, c = 0; c < b.size(); c++) {
                if (b.peek(c).vbox.contains(a)) return b.peek(c).color;
            }return this.nearest(a);
        },
        nearest: function nearest(a) {
            for (var b, c, d, e = this.vboxes, f = 0; f < e.size(); f++) {
                c = Math.sqrt(Math.pow(a[0] - e.peek(f).color[0], 2) + Math.pow(a[1] - e.peek(f).color[1], 2) + Math.pow(a[2] - e.peek(f).color[2], 2)), (c < b || void 0 === b) && (b = c, d = e.peek(f).color);
            }return d;
        },
        forcebw: function forcebw() {
            var a = this.vboxes;
            a.sort(function (a, b) {
                return pv.naturalOrder(pv.sum(a.color), pv.sum(b.color));
            });
            var b = a[0].color;
            b[0] < 5 && b[1] < 5 && b[2] < 5 && (a[0].color = [0, 0, 0]);
            var c = a.length - 1,
                d = a[c].color;
            d[0] > 251 && d[1] > 251 && d[2] > 251 && (a[c].color = [255, 255, 255]);
        }
    }, {
        quantize: h
    };
}();
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Owl Carousel v2.2.0
 * Copyright 2013-2016 David Deutsch
 * Licensed under MIT (https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE)
 */
!function (a, b, c, d) {
  function e(b, c) {
    this.settings = null, this.options = a.extend({}, e.Defaults, c), this.$element = a(b), this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, this._pipe = [], this._drag = { time: null, target: null, pointer: null, stage: { start: null, current: null }, direction: null }, this._states = { current: {}, tags: { initializing: ["busy"], animating: ["busy"], dragging: ["interacting"] } }, a.each(["onResize", "onThrottledResize"], a.proxy(function (b, c) {
      this._handlers[c] = a.proxy(this[c], this);
    }, this)), a.each(e.Plugins, a.proxy(function (a, b) {
      this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this);
    }, this)), a.each(e.Workers, a.proxy(function (b, c) {
      this._pipe.push({ filter: c.filter, run: a.proxy(c.run, this) });
    }, this)), this.setup(), this.initialize();
  }e.Defaults = { items: 3, loop: !1, center: !1, rewind: !1, mouseDrag: !0, touchDrag: !0, pullDrag: !0, freeDrag: !1, margin: 0, stagePadding: 0, merge: !1, mergeFit: !0, autoWidth: !1, startPosition: 0, rtl: !1, smartSpeed: 250, fluidSpeed: !1, dragEndSpeed: !1, responsive: {}, responsiveRefreshRate: 200, responsiveBaseElement: b, fallbackEasing: "swing", info: !1, nestedItemSelector: !1, itemElement: "div", stageElement: "div", refreshClass: "owl-refresh", loadedClass: "owl-loaded", loadingClass: "owl-loading", rtlClass: "owl-rtl", responsiveClass: "owl-responsive", dragClass: "owl-drag", itemClass: "owl-item", stageClass: "owl-stage", stageOuterClass: "owl-stage-outer", grabClass: "owl-grab" }, e.Width = { Default: "default", Inner: "inner", Outer: "outer" }, e.Type = { Event: "event", State: "state" }, e.Plugins = {}, e.Workers = [{ filter: ["width", "settings"], run: function run() {
      this._width = this.$element.width();
    } }, { filter: ["width", "items", "settings"], run: function run(a) {
      a.current = this._items && this._items[this.relative(this._current)];
    } }, { filter: ["items", "settings"], run: function run() {
      this.$stage.children(".cloned").remove();
    } }, { filter: ["width", "items", "settings"], run: function run(a) {
      var b = this.settings.margin || "",
          c = !this.settings.autoWidth,
          d = this.settings.rtl,
          e = { width: "auto", "margin-left": d ? b : "", "margin-right": d ? "" : b };!c && this.$stage.children().css(e), a.css = e;
    } }, { filter: ["width", "items", "settings"], run: function run(a) {
      var b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
          c = null,
          d = this._items.length,
          e = !this.settings.autoWidth,
          f = [];for (a.items = { merge: !1, width: b }; d--;) {
        c = this._mergers[d], c = this.settings.mergeFit && Math.min(c, this.settings.items) || c, a.items.merge = c > 1 || a.items.merge, f[d] = e ? b * c : this._items[d].width();
      }this._widths = f;
    } }, { filter: ["items", "settings"], run: function run() {
      var b = [],
          c = this._items,
          d = this.settings,
          e = Math.max(2 * d.items, 4),
          f = 2 * Math.ceil(c.length / 2),
          g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0,
          h = "",
          i = "";for (g /= 2; g--;) {
        b.push(this.normalize(b.length / 2, !0)), h += c[b[b.length - 1]][0].outerHTML, b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, !0)), i = c[b[b.length - 1]][0].outerHTML + i;
      }this._clones = b, a(h).addClass("cloned").appendTo(this.$stage), a(i).addClass("cloned").prependTo(this.$stage);
    } }, { filter: ["width", "items", "settings"], run: function run() {
      for (var a = this.settings.rtl ? 1 : -1, b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;) {
        d = f[c - 1] || 0, e = this._widths[this.relative(c)] + this.settings.margin, f.push(d + e * a);
      }this._coordinates = f;
    } }, { filter: ["width", "items", "settings"], run: function run() {
      var a = this.settings.stagePadding,
          b = this._coordinates,
          c = { width: Math.ceil(Math.abs(b[b.length - 1])) + 2 * a, "padding-left": a || "", "padding-right": a || "" };this.$stage.css(c);
    } }, { filter: ["width", "items", "settings"], run: function run(a) {
      var b = this._coordinates.length,
          c = !this.settings.autoWidth,
          d = this.$stage.children();if (c && a.items.merge) for (; b--;) {
        a.css.width = this._widths[this.relative(b)], d.eq(b).css(a.css);
      } else c && (a.css.width = a.items.width, d.css(a.css));
    } }, { filter: ["items"], run: function run() {
      this._coordinates.length < 1 && this.$stage.removeAttr("style");
    } }, { filter: ["width", "items", "settings"], run: function run(a) {
      a.current = a.current ? this.$stage.children().index(a.current) : 0, a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current)), this.reset(a.current);
    } }, { filter: ["position"], run: function run() {
      this.animate(this.coordinates(this._current));
    } }, { filter: ["width", "position", "items", "settings"], run: function run() {
      var a,
          b,
          c,
          d,
          e = this.settings.rtl ? 1 : -1,
          f = 2 * this.settings.stagePadding,
          g = this.coordinates(this.current()) + f,
          h = g + this.width() * e,
          i = [];for (c = 0, d = this._coordinates.length; d > c; c++) {
        a = this._coordinates[c - 1] || 0, b = Math.abs(this._coordinates[c]) + f * e, (this.op(a, "<=", g) && this.op(a, ">", h) || this.op(b, "<", g) && this.op(b, ">", h)) && i.push(c);
      }this.$stage.children(".active").removeClass("active"), this.$stage.children(":eq(" + i.join("), :eq(") + ")").addClass("active"), this.settings.center && (this.$stage.children(".center").removeClass("center"), this.$stage.children().eq(this.current()).addClass("center"));
    } }], e.prototype.initialize = function () {
    if (this.enter("initializing"), this.trigger("initialize"), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), this.settings.autoWidth && !this.is("pre-loading")) {
      var b, c, e;b = this.$element.find("img"), c = this.settings.nestedItemSelector ? "." + this.settings.nestedItemSelector : d, e = this.$element.children(c).width(), b.length && 0 >= e && this.preloadAutoWidthImages(b);
    }this.$element.addClass(this.options.loadingClass), this.$stage = a("<" + this.settings.stageElement + ' class="' + this.settings.stageClass + '"/>').wrap('<div class="' + this.settings.stageOuterClass + '"/>'), this.$element.append(this.$stage.parent()), this.replace(this.$element.children().not(this.$stage.parent())), this.$element.is(":visible") ? this.refresh() : this.invalidate("width"), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass), this.registerEventHandlers(), this.leave("initializing"), this.trigger("initialized");
  }, e.prototype.setup = function () {
    var b = this.viewport(),
        c = this.options.responsive,
        d = -1,
        e = null;c ? (a.each(c, function (a) {
      b >= a && a > d && (d = Number(a));
    }), e = a.extend({}, this.options, c[d]), "function" == typeof e.stagePadding && (e.stagePadding = e.stagePadding()), delete e.responsive, e.responsiveClass && this.$element.attr("class", this.$element.attr("class").replace(new RegExp("(" + this.options.responsiveClass + "-)\\S+\\s", "g"), "$1" + d))) : e = a.extend({}, this.options), this.trigger("change", { property: { name: "settings", value: e } }), this._breakpoint = d, this.settings = e, this.invalidate("settings"), this.trigger("changed", { property: { name: "settings", value: this.settings } });
  }, e.prototype.optionsLogic = function () {
    this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1);
  }, e.prototype.prepare = function (b) {
    var c = this.trigger("prepare", { content: b });return c.data || (c.data = a("<" + this.settings.itemElement + "/>").addClass(this.options.itemClass).append(b)), this.trigger("prepared", { content: c.data }), c.data;
  }, e.prototype.update = function () {
    for (var b = 0, c = this._pipe.length, d = a.proxy(function (a) {
      return this[a];
    }, this._invalidated), e = {}; c > b;) {
      (this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) && this._pipe[b].run(e), b++;
    }this._invalidated = {}, !this.is("valid") && this.enter("valid");
  }, e.prototype.width = function (a) {
    switch (a = a || e.Width.Default) {case e.Width.Inner:case e.Width.Outer:
        return this._width;default:
        return this._width - 2 * this.settings.stagePadding + this.settings.margin;}
  }, e.prototype.refresh = function () {
    this.enter("refreshing"), this.trigger("refresh"), this.setup(), this.optionsLogic(), this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), this.leave("refreshing"), this.trigger("refreshed");
  }, e.prototype.onThrottledResize = function () {
    b.clearTimeout(this.resizeTimer), this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
  }, e.prototype.onResize = function () {
    return this._items.length ? this._width === this.$element.width() ? !1 : this.$element.is(":visible") ? (this.enter("resizing"), this.trigger("resize").isDefaultPrevented() ? (this.leave("resizing"), !1) : (this.invalidate("width"), this.refresh(), this.leave("resizing"), void this.trigger("resized"))) : !1 : !1;
  }, e.prototype.registerEventHandlers = function () {
    a.support.transition && this.$stage.on(a.support.transition.end + ".owl.core", a.proxy(this.onTransitionEnd, this)), this.settings.responsive !== !1 && this.on(b, "resize", this._handlers.onThrottledResize), this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on("mousedown.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("dragstart.owl.core selectstart.owl.core", function () {
      return !1;
    })), this.settings.touchDrag && (this.$stage.on("touchstart.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("touchcancel.owl.core", a.proxy(this.onDragEnd, this)));
  }, e.prototype.onDragStart = function (b) {
    var d = null;3 !== b.which && (a.support.transform ? (d = this.$stage.css("transform").replace(/.*\(|\)| /g, "").split(","), d = { x: d[16 === d.length ? 12 : 4], y: d[16 === d.length ? 13 : 5] }) : (d = this.$stage.position(), d = { x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left, y: d.top }), this.is("animating") && (a.support.transform ? this.animate(d.x) : this.$stage.stop(), this.invalidate("position")), this.$element.toggleClass(this.options.grabClass, "mousedown" === b.type), this.speed(0), this._drag.time = new Date().getTime(), this._drag.target = a(b.target), this._drag.stage.start = d, this._drag.stage.current = d, this._drag.pointer = this.pointer(b), a(c).on("mouseup.owl.core touchend.owl.core", a.proxy(this.onDragEnd, this)), a(c).one("mousemove.owl.core touchmove.owl.core", a.proxy(function (b) {
      var d = this.difference(this._drag.pointer, this.pointer(b));a(c).on("mousemove.owl.core touchmove.owl.core", a.proxy(this.onDragMove, this)), Math.abs(d.x) < Math.abs(d.y) && this.is("valid") || (b.preventDefault(), this.enter("dragging"), this.trigger("drag"));
    }, this)));
  }, e.prototype.onDragMove = function (a) {
    var b = null,
        c = null,
        d = null,
        e = this.difference(this._drag.pointer, this.pointer(a)),
        f = this.difference(this._drag.stage.start, e);this.is("dragging") && (a.preventDefault(), this.settings.loop ? (b = this.coordinates(this.minimum()), c = this.coordinates(this.maximum() + 1) - b, f.x = ((f.x - b) % c + c) % c + b) : (b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), d = this.settings.pullDrag ? -1 * e.x / 5 : 0, f.x = Math.max(Math.min(f.x, b + d), c + d)), this._drag.stage.current = f, this.animate(f.x));
  }, e.prototype.onDragEnd = function (b) {
    var d = this.difference(this._drag.pointer, this.pointer(b)),
        e = this._drag.stage.current,
        f = d.x > 0 ^ this.settings.rtl ? "left" : "right";a(c).off(".owl.core"), this.$element.removeClass(this.options.grabClass), (0 !== d.x && this.is("dragging") || !this.is("valid")) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), this.current(this.closest(e.x, 0 !== d.x ? f : this._drag.direction)), this.invalidate("position"), this.update(), this._drag.direction = f, (Math.abs(d.x) > 3 || new Date().getTime() - this._drag.time > 300) && this._drag.target.one("click.owl.core", function () {
      return !1;
    })), this.is("dragging") && (this.leave("dragging"), this.trigger("dragged"));
  }, e.prototype.closest = function (b, c) {
    var d = -1,
        e = 30,
        f = this.width(),
        g = this.coordinates();return this.settings.freeDrag || a.each(g, a.proxy(function (a, h) {
      return "left" === c && b > h - e && h + e > b ? d = a : "right" === c && b > h - f - e && h - f + e > b ? d = a + 1 : this.op(b, "<", h) && this.op(b, ">", g[a + 1] || h - f) && (d = "left" === c ? a + 1 : a), -1 === d;
    }, this)), this.settings.loop || (this.op(b, ">", g[this.minimum()]) ? d = b = this.minimum() : this.op(b, "<", g[this.maximum()]) && (d = b = this.maximum())), d;
  }, e.prototype.animate = function (b) {
    var c = this.speed() > 0;this.is("animating") && this.onTransitionEnd(), c && (this.enter("animating"), this.trigger("translate")), a.support.transform3d && a.support.transition ? this.$stage.css({ transform: "translate3d(" + b + "px,0px,0px)", transition: this.speed() / 1e3 + "s" }) : c ? this.$stage.animate({ left: b + "px" }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this)) : this.$stage.css({ left: b + "px" });
  }, e.prototype.is = function (a) {
    return this._states.current[a] && this._states.current[a] > 0;
  }, e.prototype.current = function (a) {
    if (a === d) return this._current;if (0 === this._items.length) return d;if (a = this.normalize(a), this._current !== a) {
      var b = this.trigger("change", { property: { name: "position", value: a } });b.data !== d && (a = this.normalize(b.data)), this._current = a, this.invalidate("position"), this.trigger("changed", { property: { name: "position", value: this._current } });
    }return this._current;
  }, e.prototype.invalidate = function (b) {
    return "string" === a.type(b) && (this._invalidated[b] = !0, this.is("valid") && this.leave("valid")), a.map(this._invalidated, function (a, b) {
      return b;
    });
  }, e.prototype.reset = function (a) {
    a = this.normalize(a), a !== d && (this._speed = 0, this._current = a, this.suppress(["translate", "translated"]), this.animate(this.coordinates(a)), this.release(["translate", "translated"]));
  }, e.prototype.normalize = function (a, b) {
    var c = this._items.length,
        e = b ? 0 : this._clones.length;return !this.isNumeric(a) || 1 > c ? a = d : (0 > a || a >= c + e) && (a = ((a - e / 2) % c + c) % c + e / 2), a;
  }, e.prototype.relative = function (a) {
    return a -= this._clones.length / 2, this.normalize(a, !0);
  }, e.prototype.maximum = function (a) {
    var b,
        c,
        d,
        e = this.settings,
        f = this._coordinates.length;if (e.loop) f = this._clones.length / 2 + this._items.length - 1;else if (e.autoWidth || e.merge) {
      for (b = this._items.length, c = this._items[--b].width(), d = this.$element.width(); b-- && (c += this._items[b].width() + this.settings.margin, !(c > d));) {}f = b + 1;
    } else f = e.center ? this._items.length - 1 : this._items.length - e.items;return a && (f -= this._clones.length / 2), Math.max(f, 0);
  }, e.prototype.minimum = function (a) {
    return a ? 0 : this._clones.length / 2;
  }, e.prototype.items = function (a) {
    return a === d ? this._items.slice() : (a = this.normalize(a, !0), this._items[a]);
  }, e.prototype.mergers = function (a) {
    return a === d ? this._mergers.slice() : (a = this.normalize(a, !0), this._mergers[a]);
  }, e.prototype.clones = function (b) {
    var c = this._clones.length / 2,
        e = c + this._items.length,
        f = function f(a) {
      return a % 2 === 0 ? e + a / 2 : c - (a + 1) / 2;
    };return b === d ? a.map(this._clones, function (a, b) {
      return f(b);
    }) : a.map(this._clones, function (a, c) {
      return a === b ? f(c) : null;
    });
  }, e.prototype.speed = function (a) {
    return a !== d && (this._speed = a), this._speed;
  }, e.prototype.coordinates = function (b) {
    var c,
        e = 1,
        f = b - 1;return b === d ? a.map(this._coordinates, a.proxy(function (a, b) {
      return this.coordinates(b);
    }, this)) : (this.settings.center ? (this.settings.rtl && (e = -1, f = b + 1), c = this._coordinates[b], c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e) : c = this._coordinates[f] || 0, c = Math.ceil(c));
  }, e.prototype.duration = function (a, b, c) {
    return 0 === c ? 0 : Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed);
  }, e.prototype.to = function (a, b) {
    var c = this.current(),
        d = null,
        e = a - this.relative(c),
        f = (e > 0) - (0 > e),
        g = this._items.length,
        h = this.minimum(),
        i = this.maximum();this.settings.loop ? (!this.settings.rewind && Math.abs(e) > g / 2 && (e += -1 * f * g), a = c + e, d = ((a - h) % g + g) % g + h, d !== a && i >= d - e && d - e > 0 && (c = d - e, a = d, this.reset(c))) : this.settings.rewind ? (i += 1, a = (a % i + i) % i) : a = Math.max(h, Math.min(i, a)), this.speed(this.duration(c, a, b)), this.current(a), this.$element.is(":visible") && this.update();
  }, e.prototype.next = function (a) {
    a = a || !1, this.to(this.relative(this.current()) + 1, a);
  }, e.prototype.prev = function (a) {
    a = a || !1, this.to(this.relative(this.current()) - 1, a);
  }, e.prototype.onTransitionEnd = function (a) {
    return a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0)) ? !1 : (this.leave("animating"), void this.trigger("translated"));
  }, e.prototype.viewport = function () {
    var d;if (this.options.responsiveBaseElement !== b) d = a(this.options.responsiveBaseElement).width();else if (b.innerWidth) d = b.innerWidth;else {
      if (!c.documentElement || !c.documentElement.clientWidth) throw "Can not detect viewport width.";d = c.documentElement.clientWidth;
    }return d;
  }, e.prototype.replace = function (b) {
    this.$stage.empty(), this._items = [], b && (b = b instanceof jQuery ? b : a(b)), this.settings.nestedItemSelector && (b = b.find("." + this.settings.nestedItemSelector)), b.filter(function () {
      return 1 === this.nodeType;
    }).each(a.proxy(function (a, b) {
      b = this.prepare(b), this.$stage.append(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1);
    }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), this.invalidate("items");
  }, e.prototype.add = function (b, c) {
    var e = this.relative(this._current);c = c === d ? this._items.length : this.normalize(c, !0), b = b instanceof jQuery ? b : a(b), this.trigger("add", { content: b, position: c }), b = this.prepare(b), 0 === this._items.length || c === this._items.length ? (0 === this._items.length && this.$stage.append(b), 0 !== this._items.length && this._items[c - 1].after(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)) : (this._items[c].before(b), this._items.splice(c, 0, b), this._mergers.splice(c, 0, 1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)), this._items[e] && this.reset(this._items[e].index()), this.invalidate("items"), this.trigger("added", { content: b, position: c });
  }, e.prototype.remove = function (a) {
    a = this.normalize(a, !0), a !== d && (this.trigger("remove", { content: this._items[a], position: a }), this._items[a].remove(), this._items.splice(a, 1), this._mergers.splice(a, 1), this.invalidate("items"), this.trigger("removed", { content: null, position: a }));
  }, e.prototype.preloadAutoWidthImages = function (b) {
    b.each(a.proxy(function (b, c) {
      this.enter("pre-loading"), c = a(c), a(new Image()).one("load", a.proxy(function (a) {
        c.attr("src", a.target.src), c.css("opacity", 1), this.leave("pre-loading"), !this.is("pre-loading") && !this.is("initializing") && this.refresh();
      }, this)).attr("src", c.attr("src") || c.attr("data-src") || c.attr("data-src-retina"));
    }, this));
  }, e.prototype.destroy = function () {
    this.$element.off(".owl.core"), this.$stage.off(".owl.core"), a(c).off(".owl.core"), this.settings.responsive !== !1 && (b.clearTimeout(this.resizeTimer), this.off(b, "resize", this._handlers.onThrottledResize));for (var d in this._plugins) {
      this._plugins[d].destroy();
    }this.$stage.children(".cloned").remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), this.$stage.children().unwrap(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class", this.$element.attr("class").replace(new RegExp(this.options.responsiveClass + "-\\S+\\s", "g"), "")).removeData("owl.carousel");
  }, e.prototype.op = function (a, b, c) {
    var d = this.settings.rtl;switch (b) {case "<":
        return d ? a > c : c > a;case ">":
        return d ? c > a : a > c;case ">=":
        return d ? c >= a : a >= c;case "<=":
        return d ? a >= c : c >= a;}
  }, e.prototype.on = function (a, b, c, d) {
    a.addEventListener ? a.addEventListener(b, c, d) : a.attachEvent && a.attachEvent("on" + b, c);
  }, e.prototype.off = function (a, b, c, d) {
    a.removeEventListener ? a.removeEventListener(b, c, d) : a.detachEvent && a.detachEvent("on" + b, c);
  }, e.prototype.trigger = function (b, c, d, f, g) {
    var h = { item: { count: this._items.length, index: this.current() } },
        i = a.camelCase(a.grep(["on", b, d], function (a) {
      return a;
    }).join("-").toLowerCase()),
        j = a.Event([b, "owl", d || "carousel"].join(".").toLowerCase(), a.extend({ relatedTarget: this }, h, c));return this._supress[b] || (a.each(this._plugins, function (a, b) {
      b.onTrigger && b.onTrigger(j);
    }), this.register({ type: e.Type.Event, name: b }), this.$element.trigger(j), this.settings && "function" == typeof this.settings[i] && this.settings[i].call(this, j)), j;
  }, e.prototype.enter = function (b) {
    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
      this._states.current[b] === d && (this._states.current[b] = 0), this._states.current[b]++;
    }, this));
  }, e.prototype.leave = function (b) {
    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
      this._states.current[b]--;
    }, this));
  }, e.prototype.register = function (b) {
    if (b.type === e.Type.Event) {
      if (a.event.special[b.name] || (a.event.special[b.name] = {}), !a.event.special[b.name].owl) {
        var c = a.event.special[b.name]._default;a.event.special[b.name]._default = function (a) {
          return !c || !c.apply || a.namespace && -1 !== a.namespace.indexOf("owl") ? a.namespace && a.namespace.indexOf("owl") > -1 : c.apply(this, arguments);
        }, a.event.special[b.name].owl = !0;
      }
    } else b.type === e.Type.State && (this._states.tags[b.name] ? this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags) : this._states.tags[b.name] = b.tags, this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function (c, d) {
      return a.inArray(c, this._states.tags[b.name]) === d;
    }, this)));
  }, e.prototype.suppress = function (b) {
    a.each(b, a.proxy(function (a, b) {
      this._supress[b] = !0;
    }, this));
  }, e.prototype.release = function (b) {
    a.each(b, a.proxy(function (a, b) {
      delete this._supress[b];
    }, this));
  }, e.prototype.pointer = function (a) {
    var c = { x: null, y: null };return a = a.originalEvent || a || b.event, a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a, a.pageX ? (c.x = a.pageX, c.y = a.pageY) : (c.x = a.clientX, c.y = a.clientY), c;
  }, e.prototype.isNumeric = function (a) {
    return !isNaN(parseFloat(a));
  }, e.prototype.difference = function (a, b) {
    return { x: a.x - b.x, y: a.y - b.y };
  }, a.fn.owlCarousel = function (b) {
    var c = Array.prototype.slice.call(arguments, 1);return this.each(function () {
      var d = a(this),
          f = d.data("owl.carousel");f || (f = new e(this, "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b), d.data("owl.carousel", f), a.each(["next", "prev", "to", "destroy", "refresh", "replace", "add", "remove"], function (b, c) {
        f.register({ type: e.Type.Event, name: c }), f.$element.on(c + ".owl.carousel.core", a.proxy(function (a) {
          a.namespace && a.relatedTarget !== this && (this.suppress([c]), f[c].apply(this, [].slice.call(arguments, 1)), this.release([c]));
        }, f));
      })), "string" == typeof b && "_" !== b.charAt(0) && f[b].apply(f, c);
    });
  }, a.fn.owlCarousel.Constructor = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._interval = null, this._visible = null, this._handlers = { "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoRefresh && this.watch();
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };e.Defaults = { autoRefresh: !0, autoRefreshInterval: 500 }, e.prototype.watch = function () {
    this._interval || (this._visible = this._core.$element.is(":visible"), this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval));
  }, e.prototype.refresh = function () {
    this._core.$element.is(":visible") !== this._visible && (this._visible = !this._visible, this._core.$element.toggleClass("owl-hidden", !this._visible), this._visible && this._core.invalidate("width") && this._core.refresh());
  }, e.prototype.destroy = function () {
    var a, c;b.clearInterval(this._interval);for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }for (c in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[c] && (this[c] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._loaded = [], this._handlers = { "initialized.owl.carousel change.owl.carousel resized.owl.carousel": a.proxy(function (b) {
        if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && "position" == b.property.name || "initialized" == b.type)) for (var c = this._core.settings, e = c.center && Math.ceil(c.items / 2) || c.items, f = c.center && -1 * e || 0, g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f, h = this._core.clones().length, i = a.proxy(function (a, b) {
          this.load(b);
        }, this); f++ < e;) {
          this.load(h / 2 + this._core.relative(g)), h && a.each(this._core.clones(this._core.relative(g)), i), g++;
        }
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };e.Defaults = { lazyLoad: !1 }, e.prototype.load = function (c) {
    var d = this._core.$stage.children().eq(c),
        e = d && d.find(".owl-lazy");!e || a.inArray(d.get(0), this._loaded) > -1 || (e.each(a.proxy(function (c, d) {
      var e,
          f = a(d),
          g = b.devicePixelRatio > 1 && f.attr("data-src-retina") || f.attr("data-src");this._core.trigger("load", { element: f, url: g }, "lazy"), f.is("img") ? f.one("load.owl.lazy", a.proxy(function () {
        f.css("opacity", 1), this._core.trigger("loaded", { element: f, url: g }, "lazy");
      }, this)).attr("src", g) : (e = new Image(), e.onload = a.proxy(function () {
        f.css({ "background-image": "url(" + g + ")", opacity: "1" }), this._core.trigger("loaded", { element: f, url: g }, "lazy");
      }, this), e.src = g);
    }, this)), this._loaded.push(d.get(0)));
  }, e.prototype.destroy = function () {
    var a, b;for (a in this.handlers) {
      this._core.$element.off(a, this.handlers[a]);
    }for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Lazy = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._handlers = { "initialized.owl.carousel refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && this.update();
      }, this), "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && "position" == a.property.name && this.update();
      }, this), "loaded.owl.lazy": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && a.element.closest("." + this._core.settings.itemClass).index() === this._core.current() && this.update();
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };e.Defaults = { autoHeight: !1, autoHeightClass: "owl-height" }, e.prototype.update = function () {
    var b = this._core._current,
        c = b + this._core.settings.items,
        d = this._core.$stage.children().toArray().slice(b, c),
        e = [],
        f = 0;a.each(d, function (b, c) {
      e.push(a(c).height());
    }), f = Math.max.apply(null, e), this._core.$stage.parent().height(f).addClass(this._core.settings.autoHeightClass);
  }, e.prototype.destroy = function () {
    var a, b;for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._videos = {}, this._playing = null, this._handlers = { "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.register({ type: "state", name: "playing", tags: ["interacting"] });
      }, this), "resize.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.video && this.isInFullScreen() && a.preventDefault();
      }, this), "refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.is("resizing") && this._core.$stage.find(".cloned .owl-video-frame").remove();
      }, this), "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" === a.property.name && this._playing && this.stop();
      }, this), "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace) {
          var c = a(b.content).find(".owl-video");c.length && (c.css("display", "none"), this.fetch(c, a(b.content)));
        }
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._core.$element.on("click.owl.video", ".owl-video-play-icon", a.proxy(function (a) {
      this.play(a);
    }, this));
  };e.Defaults = { video: !1, videoHeight: !1, videoWidth: !1 }, e.prototype.fetch = function (a, b) {
    var c = function () {
      return a.attr("data-vimeo-id") ? "vimeo" : a.attr("data-vzaar-id") ? "vzaar" : "youtube";
    }(),
        d = a.attr("data-vimeo-id") || a.attr("data-youtube-id") || a.attr("data-vzaar-id"),
        e = a.attr("data-width") || this._core.settings.videoWidth,
        f = a.attr("data-height") || this._core.settings.videoHeight,
        g = a.attr("href");if (!g) throw new Error("Missing video URL.");if (d = g.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/), d[3].indexOf("youtu") > -1) c = "youtube";else if (d[3].indexOf("vimeo") > -1) c = "vimeo";else {
      if (!(d[3].indexOf("vzaar") > -1)) throw new Error("Video URL not supported.");c = "vzaar";
    }d = d[6], this._videos[g] = { type: c, id: d, width: e, height: f }, b.attr("data-video", g), this.thumbnail(a, this._videos[g]);
  }, e.prototype.thumbnail = function (b, c) {
    var d,
        e,
        f,
        g = c.width && c.height ? 'style="width:' + c.width + "px;height:" + c.height + 'px;"' : "",
        h = b.find("img"),
        i = "src",
        j = "",
        k = this._core.settings,
        l = function l(a) {
      e = '<div class="owl-video-play-icon"></div>', d = k.lazyLoad ? '<div class="owl-video-tn ' + j + '" ' + i + '="' + a + '"></div>' : '<div class="owl-video-tn" style="opacity:1;background-image:url(' + a + ')"></div>', b.after(d), b.after(e);
    };return b.wrap('<div class="owl-video-wrapper"' + g + "></div>"), this._core.settings.lazyLoad && (i = "data-src", j = "owl-lazy"), h.length ? (l(h.attr(i)), h.remove(), !1) : void ("youtube" === c.type ? (f = "//img.youtube.com/vi/" + c.id + "/hqdefault.jpg", l(f)) : "vimeo" === c.type ? a.ajax({ type: "GET", url: "//vimeo.com/api/v2/video/" + c.id + ".json", jsonp: "callback", dataType: "jsonp", success: function success(a) {
        f = a[0].thumbnail_large, l(f);
      } }) : "vzaar" === c.type && a.ajax({ type: "GET", url: "//vzaar.com/api/videos/" + c.id + ".json", jsonp: "callback", dataType: "jsonp", success: function success(a) {
        f = a.framegrab_url, l(f);
      } }));
  }, e.prototype.stop = function () {
    this._core.trigger("stop", null, "video"), this._playing.find(".owl-video-frame").remove(), this._playing.removeClass("owl-video-playing"), this._playing = null, this._core.leave("playing"), this._core.trigger("stopped", null, "video");
  }, e.prototype.play = function (b) {
    var c,
        d = a(b.target),
        e = d.closest("." + this._core.settings.itemClass),
        f = this._videos[e.attr("data-video")],
        g = f.width || "100%",
        h = f.height || this._core.$stage.height();this._playing || (this._core.enter("playing"), this._core.trigger("play", null, "video"), e = this._core.items(this._core.relative(e.index())), this._core.reset(e.index()), "youtube" === f.type ? c = '<iframe width="' + g + '" height="' + h + '" src="//www.youtube.com/embed/' + f.id + "?autoplay=1&v=" + f.id + '" frameborder="0" allowfullscreen></iframe>' : "vimeo" === f.type ? c = '<iframe src="//player.vimeo.com/video/' + f.id + '?autoplay=1" width="' + g + '" height="' + h + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>' : "vzaar" === f.type && (c = '<iframe frameborder="0"height="' + h + '"width="' + g + '" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/' + f.id + '/player?autoplay=true"></iframe>'), a('<div class="owl-video-frame">' + c + "</div>").insertAfter(e.find(".owl-video")), this._playing = e.addClass("owl-video-playing"));
  }, e.prototype.isInFullScreen = function () {
    var b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement;return b && a(b).parent().hasClass("owl-video-frame");
  }, e.prototype.destroy = function () {
    var a, b;this._core.$element.off("click.owl.video");for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Video = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this.core = b, this.core.options = a.extend({}, e.Defaults, this.core.options), this.swapping = !0, this.previous = d, this.next = d, this.handlers = { "change.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" == a.property.name && (this.previous = this.core.current(), this.next = a.property.value);
      }, this), "drag.owl.carousel dragged.owl.carousel translated.owl.carousel": a.proxy(function (a) {
        a.namespace && (this.swapping = "translated" == a.type);
      }, this), "translate.owl.carousel": a.proxy(function (a) {
        a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap();
      }, this) }, this.core.$element.on(this.handlers);
  };e.Defaults = { animateOut: !1, animateIn: !1 }, e.prototype.swap = function () {
    if (1 === this.core.settings.items && a.support.animation && a.support.transition) {
      this.core.speed(0);var b,
          c = a.proxy(this.clear, this),
          d = this.core.$stage.children().eq(this.previous),
          e = this.core.$stage.children().eq(this.next),
          f = this.core.settings.animateIn,
          g = this.core.settings.animateOut;this.core.current() !== this.previous && (g && (b = this.core.coordinates(this.previous) - this.core.coordinates(this.next), d.one(a.support.animation.end, c).css({ left: b + "px" }).addClass("animated owl-animated-out").addClass(g)), f && e.one(a.support.animation.end, c).addClass("animated owl-animated-in").addClass(f));
    }
  }, e.prototype.clear = function (b) {
    a(b.target).css({ left: "" }).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), this.core.onTransitionEnd();
  }, e.prototype.destroy = function () {
    var a, b;for (a in this.handlers) {
      this.core.$element.off(a, this.handlers[a]);
    }for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Animate = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._timeout = null, this._paused = !1, this._handlers = { "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "settings" === a.property.name ? this._core.settings.autoplay ? this.play() : this.stop() : a.namespace && "position" === a.property.name && this._core.settings.autoplay && this._setAutoPlayInterval();
      }, this), "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoplay && this.play();
      }, this), "play.owl.autoplay": a.proxy(function (a, b, c) {
        a.namespace && this.play(b, c);
      }, this), "stop.owl.autoplay": a.proxy(function (a) {
        a.namespace && this.stop();
      }, this), "mouseover.owl.autoplay": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
      }, this), "mouseleave.owl.autoplay": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.play();
      }, this), "touchstart.owl.core": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
      }, this), "touchend.owl.core": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this.play();
      }, this) }, this._core.$element.on(this._handlers), this._core.options = a.extend({}, e.Defaults, this._core.options);
  };e.Defaults = { autoplay: !1, autoplayTimeout: 5e3, autoplayHoverPause: !1, autoplaySpeed: !1 }, e.prototype.play = function (a, b) {
    this._paused = !1, this._core.is("rotating") || (this._core.enter("rotating"), this._setAutoPlayInterval());
  }, e.prototype._getNextTimeout = function (d, e) {
    return this._timeout && b.clearTimeout(this._timeout), b.setTimeout(a.proxy(function () {
      this._paused || this._core.is("busy") || this._core.is("interacting") || c.hidden || this._core.next(e || this._core.settings.autoplaySpeed);
    }, this), d || this._core.settings.autoplayTimeout);
  }, e.prototype._setAutoPlayInterval = function () {
    this._timeout = this._getNextTimeout();
  }, e.prototype.stop = function () {
    this._core.is("rotating") && (b.clearTimeout(this._timeout), this._core.leave("rotating"));
  }, e.prototype.pause = function () {
    this._core.is("rotating") && (this._paused = !0);
  }, e.prototype.destroy = function () {
    var a, b;this.stop();for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.autoplay = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  "use strict";
  var e = function e(b) {
    this._core = b, this._initialized = !1, this._pages = [], this._controls = {}, this._templates = [], this.$element = this._core.$element, this._overrides = { next: this._core.next, prev: this._core.prev, to: this._core.to }, this._handlers = { "prepared.owl.carousel": a.proxy(function (b) {
        b.namespace && this._core.settings.dotsData && this._templates.push('<div class="' + this._core.settings.dotClass + '">' + a(b.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot") + "</div>");
      }, this), "added.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 0, this._templates.pop());
      }, this), "remove.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 1);
      }, this), "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" == a.property.name && this.draw();
      }, this), "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && !this._initialized && (this._core.trigger("initialize", null, "navigation"), this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger("initialized", null, "navigation"));
      }, this), "refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._initialized && (this._core.trigger("refresh", null, "navigation"), this.update(), this.draw(), this._core.trigger("refreshed", null, "navigation"));
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers);
  };e.Defaults = { nav: !1, navText: ["prev", "next"], navSpeed: !1, navElement: "div", navContainer: !1, navContainerClass: "owl-nav", navClass: ["owl-prev", "owl-next"], slideBy: 1, dotClass: "owl-dot", dotsClass: "owl-dots", dots: !0, dotsEach: !1, dotsData: !1, dotsSpeed: !1, dotsContainer: !1 }, e.prototype.initialize = function () {
    var b,
        c = this._core.settings;this._controls.$relative = (c.navContainer ? a(c.navContainer) : a("<div>").addClass(c.navContainerClass).appendTo(this.$element)).addClass("disabled"), this._controls.$previous = a("<" + c.navElement + ">").addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on("click", a.proxy(function (a) {
      this.prev(c.navSpeed);
    }, this)), this._controls.$next = a("<" + c.navElement + ">").addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on("click", a.proxy(function (a) {
      this.next(c.navSpeed);
    }, this)), c.dotsData || (this._templates = [a("<div>").addClass(c.dotClass).append(a("<span>")).prop("outerHTML")]), this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a("<div>").addClass(c.dotsClass).appendTo(this.$element)).addClass("disabled"), this._controls.$absolute.on("click", "div", a.proxy(function (b) {
      var d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index();b.preventDefault(), this.to(d, c.dotsSpeed);
    }, this));for (b in this._overrides) {
      this._core[b] = a.proxy(this[b], this);
    }
  }, e.prototype.destroy = function () {
    var a, b, c, d;for (a in this._handlers) {
      this.$element.off(a, this._handlers[a]);
    }for (b in this._controls) {
      this._controls[b].remove();
    }for (d in this.overides) {
      this._core[d] = this._overrides[d];
    }for (c in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[c] && (this[c] = null);
    }
  }, e.prototype.update = function () {
    var a,
        b,
        c,
        d = this._core.clones().length / 2,
        e = d + this._core.items().length,
        f = this._core.maximum(!0),
        g = this._core.settings,
        h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items;if ("page" !== g.slideBy && (g.slideBy = Math.min(g.slideBy, g.items)), g.dots || "page" == g.slideBy) for (this._pages = [], a = d, b = 0, c = 0; e > a; a++) {
      if (b >= h || 0 === b) {
        if (this._pages.push({ start: Math.min(f, a - d), end: a - d + h - 1 }), Math.min(f, a - d) === f) break;b = 0, ++c;
      }b += this._core.mergers(this._core.relative(a));
    }
  }, e.prototype.draw = function () {
    var b,
        c = this._core.settings,
        d = this._core.items().length <= c.items,
        e = this._core.relative(this._core.current()),
        f = c.loop || c.rewind;this._controls.$relative.toggleClass("disabled", !c.nav || d), c.nav && (this._controls.$previous.toggleClass("disabled", !f && e <= this._core.minimum(!0)), this._controls.$next.toggleClass("disabled", !f && e >= this._core.maximum(!0))), this._controls.$absolute.toggleClass("disabled", !c.dots || d), c.dots && (b = this._pages.length - this._controls.$absolute.children().length, c.dotsData && 0 !== b ? this._controls.$absolute.html(this._templates.join("")) : b > 0 ? this._controls.$absolute.append(new Array(b + 1).join(this._templates[0])) : 0 > b && this._controls.$absolute.children().slice(b).remove(), this._controls.$absolute.find(".active").removeClass("active"), this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass("active"));
  }, e.prototype.onTrigger = function (b) {
    var c = this._core.settings;b.page = { index: a.inArray(this.current(), this._pages), count: this._pages.length, size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items) };
  }, e.prototype.current = function () {
    var b = this._core.relative(this._core.current());return a.grep(this._pages, a.proxy(function (a, c) {
      return a.start <= b && a.end >= b;
    }, this)).pop();
  }, e.prototype.getPosition = function (b) {
    var c,
        d,
        e = this._core.settings;return "page" == e.slideBy ? (c = a.inArray(this.current(), this._pages), d = this._pages.length, b ? ++c : --c, c = this._pages[(c % d + d) % d].start) : (c = this._core.relative(this._core.current()), d = this._core.items().length, b ? c += e.slideBy : c -= e.slideBy), c;
  }, e.prototype.next = function (b) {
    a.proxy(this._overrides.to, this._core)(this.getPosition(!0), b);
  }, e.prototype.prev = function (b) {
    a.proxy(this._overrides.to, this._core)(this.getPosition(!1), b);
  }, e.prototype.to = function (b, c, d) {
    var e;!d && this._pages.length ? (e = this._pages.length, a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c)) : a.proxy(this._overrides.to, this._core)(b, c);
  }, a.fn.owlCarousel.Constructor.Plugins.Navigation = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  "use strict";
  var e = function e(c) {
    this._core = c, this._hashes = {}, this.$element = this._core.$element, this._handlers = { "initialized.owl.carousel": a.proxy(function (c) {
        c.namespace && "URLHash" === this._core.settings.startPosition && a(b).trigger("hashchange.owl.navigation");
      }, this), "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace) {
          var c = a(b.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if (!c) return;this._hashes[c] = b.content;
        }
      }, this), "changed.owl.carousel": a.proxy(function (c) {
        if (c.namespace && "position" === c.property.name) {
          var d = this._core.items(this._core.relative(this._core.current())),
              e = a.map(this._hashes, function (a, b) {
            return a === d ? b : null;
          }).join();if (!e || b.location.hash.slice(1) === e) return;b.location.hash = e;
        }
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers), a(b).on("hashchange.owl.navigation", a.proxy(function (a) {
      var c = b.location.hash.substring(1),
          e = this._core.$stage.children(),
          f = this._hashes[c] && e.index(this._hashes[c]);f !== d && f !== this._core.current() && this._core.to(this._core.relative(f), !1, !0);
    }, this));
  };e.Defaults = { URLhashListener: !1 }, e.prototype.destroy = function () {
    var c, d;a(b).off("hashchange.owl.navigation");for (c in this._handlers) {
      this._core.$element.off(c, this._handlers[c]);
    }for (d in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[d] && (this[d] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Hash = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  function e(b, c) {
    var e = !1,
        f = b.charAt(0).toUpperCase() + b.slice(1);return a.each((b + " " + h.join(f + " ") + f).split(" "), function (a, b) {
      return g[b] !== d ? (e = c ? b : !0, !1) : void 0;
    }), e;
  }function f(a) {
    return e(a, !0);
  }var g = a("<support>").get(0).style,
      h = "Webkit Moz O ms".split(" "),
      i = { transition: { end: { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd", transition: "transitionend" } }, animation: { end: { WebkitAnimation: "webkitAnimationEnd", MozAnimation: "animationend", OAnimation: "oAnimationEnd", animation: "animationend" } } },
      j = { csstransforms: function csstransforms() {
      return !!e("transform");
    }, csstransforms3d: function csstransforms3d() {
      return !!e("perspective");
    }, csstransitions: function csstransitions() {
      return !!e("transition");
    }, cssanimations: function cssanimations() {
      return !!e("animation");
    } };j.csstransitions() && (a.support.transition = new String(f("transition")), a.support.transition.end = i.transition.end[a.support.transition]), j.cssanimations() && (a.support.animation = new String(f("animation")), a.support.animation.end = i.animation.end[a.support.animation]), j.csstransforms() && (a.support.transform = new String(f("transform")), a.support.transform3d = j.csstransforms3d());
}(window.Zepto || window.jQuery, window, document);
"use strict";

(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
            }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
                var n = t[o][1][e];return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }return n[o].exports;
    }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
        s(r[o]);
    }return s;
})({ 1: [function (require, module, exports) {
        /*
         * quantize.js Copyright 2008 Nick Rabinowitz
         * Ported to node.js by Olivier Lesnicki
         * Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
         */

        // fill out a couple protovis dependencies
        /*
         * Block below copied from Protovis: http://mbostock.github.com/protovis/
         * Copyright 2010 Stanford Visualization Group
         * Licensed under the BSD License: http://www.opensource.org/licenses/bsd-license.php
         */
        if (!pv) {
            var pv = {
                map: function map(array, f) {
                    var o = {};
                    return f ? array.map(function (d, i) {
                        o.index = i;
                        return f.call(o, d);
                    }) : array.slice();
                },
                naturalOrder: function naturalOrder(a, b) {
                    return a < b ? -1 : a > b ? 1 : 0;
                },
                sum: function sum(array, f) {
                    var o = {};
                    return array.reduce(f ? function (p, d, i) {
                        o.index = i;
                        return p + f.call(o, d);
                    } : function (p, d) {
                        return p + d;
                    }, 0);
                },
                max: function max(array, f) {
                    return Math.max.apply(null, f ? pv.map(array, f) : array);
                }
            };
        }

        /**
         * Basic Javascript port of the MMCQ (modified median cut quantization)
         * algorithm from the Leptonica library (http://www.leptonica.com/).
         * Returns a color map you can use to map original pixels to the reduced
         * palette. Still a work in progress.
         * 
         * @author Nick Rabinowitz
         * @example
         
        // array of pixels as [R,G,B] arrays
        var myPixels = [[190,197,190], [202,204,200], [207,214,210], [211,214,211], [205,207,207]
                        // etc
                        ];
        var maxColors = 4;
         
        var cmap = MMCQ.quantize(myPixels, maxColors);
        var newPalette = cmap.palette();
        var newPixels = myPixels.map(function(p) { 
            return cmap.map(p); 
        });
         
         */
        var MMCQ = function () {
            // private constants
            var sigbits = 5,
                rshift = 8 - sigbits,
                maxIterations = 1000,
                fractByPopulations = 0.75;

            // get reduced-space color index for a pixel

            function getColorIndex(r, g, b) {
                return (r << 2 * sigbits) + (g << sigbits) + b;
            }

            // Simple priority queue

            function PQueue(comparator) {
                var contents = [],
                    sorted = false;

                function sort() {
                    contents.sort(comparator);
                    sorted = true;
                }

                return {
                    push: function push(o) {
                        contents.push(o);
                        sorted = false;
                    },
                    peek: function peek(index) {
                        if (!sorted) sort();
                        if (index === undefined) index = contents.length - 1;
                        return contents[index];
                    },
                    pop: function pop() {
                        if (!sorted) sort();
                        return contents.pop();
                    },
                    size: function size() {
                        return contents.length;
                    },
                    map: function map(f) {
                        return contents.map(f);
                    },
                    debug: function debug() {
                        if (!sorted) sort();
                        return contents;
                    }
                };
            }

            // 3d color space box

            function VBox(r1, r2, g1, g2, b1, b2, histo) {
                var vbox = this;
                vbox.r1 = r1;
                vbox.r2 = r2;
                vbox.g1 = g1;
                vbox.g2 = g2;
                vbox.b1 = b1;
                vbox.b2 = b2;
                vbox.histo = histo;
            }
            VBox.prototype = {
                volume: function volume(force) {
                    var vbox = this;
                    if (!vbox._volume || force) {
                        vbox._volume = (vbox.r2 - vbox.r1 + 1) * (vbox.g2 - vbox.g1 + 1) * (vbox.b2 - vbox.b1 + 1);
                    }
                    return vbox._volume;
                },
                count: function count(force) {
                    var vbox = this,
                        histo = vbox.histo;
                    if (!vbox._count_set || force) {
                        var npix = 0,
                            i,
                            j,
                            k,
                            index;
                        for (i = vbox.r1; i <= vbox.r2; i++) {
                            for (j = vbox.g1; j <= vbox.g2; j++) {
                                for (k = vbox.b1; k <= vbox.b2; k++) {
                                    index = getColorIndex(i, j, k);
                                    npix += histo[index] || 0;
                                }
                            }
                        }
                        vbox._count = npix;
                        vbox._count_set = true;
                    }
                    return vbox._count;
                },
                copy: function copy() {
                    var vbox = this;
                    return new VBox(vbox.r1, vbox.r2, vbox.g1, vbox.g2, vbox.b1, vbox.b2, vbox.histo);
                },
                avg: function avg(force) {
                    var vbox = this,
                        histo = vbox.histo;
                    if (!vbox._avg || force) {
                        var ntot = 0,
                            mult = 1 << 8 - sigbits,
                            rsum = 0,
                            gsum = 0,
                            bsum = 0,
                            hval,
                            i,
                            j,
                            k,
                            histoindex;
                        for (i = vbox.r1; i <= vbox.r2; i++) {
                            for (j = vbox.g1; j <= vbox.g2; j++) {
                                for (k = vbox.b1; k <= vbox.b2; k++) {
                                    histoindex = getColorIndex(i, j, k);
                                    hval = histo[histoindex] || 0;
                                    ntot += hval;
                                    rsum += hval * (i + 0.5) * mult;
                                    gsum += hval * (j + 0.5) * mult;
                                    bsum += hval * (k + 0.5) * mult;
                                }
                            }
                        }
                        if (ntot) {
                            vbox._avg = [~~(rsum / ntot), ~~(gsum / ntot), ~~(bsum / ntot)];
                        } else {
                            //console.log('empty box');
                            vbox._avg = [~~(mult * (vbox.r1 + vbox.r2 + 1) / 2), ~~(mult * (vbox.g1 + vbox.g2 + 1) / 2), ~~(mult * (vbox.b1 + vbox.b2 + 1) / 2)];
                        }
                    }
                    return vbox._avg;
                },
                contains: function contains(pixel) {
                    var vbox = this,
                        rval = pixel[0] >> rshift;
                    gval = pixel[1] >> rshift;
                    bval = pixel[2] >> rshift;
                    return rval >= vbox.r1 && rval <= vbox.r2 && gval >= vbox.g1 && gval <= vbox.g2 && bval >= vbox.b1 && bval <= vbox.b2;
                }
            };

            // Color map

            function CMap() {
                this.vboxes = new PQueue(function (a, b) {
                    return pv.naturalOrder(a.vbox.count() * a.vbox.volume(), b.vbox.count() * b.vbox.volume());
                });;
            }
            CMap.prototype = {
                push: function push(vbox) {
                    this.vboxes.push({
                        vbox: vbox,
                        color: vbox.avg()
                    });
                },
                palette: function palette() {
                    return this.vboxes.map(function (vb) {
                        return vb.color;
                    });
                },
                size: function size() {
                    return this.vboxes.size();
                },
                map: function map(color) {
                    var vboxes = this.vboxes;
                    for (var i = 0; i < vboxes.size(); i++) {
                        if (vboxes.peek(i).vbox.contains(color)) {
                            return vboxes.peek(i).color;
                        }
                    }
                    return this.nearest(color);
                },
                nearest: function nearest(color) {
                    var vboxes = this.vboxes,
                        d1,
                        d2,
                        pColor;
                    for (var i = 0; i < vboxes.size(); i++) {
                        d2 = Math.sqrt(Math.pow(color[0] - vboxes.peek(i).color[0], 2) + Math.pow(color[1] - vboxes.peek(i).color[1], 2) + Math.pow(color[2] - vboxes.peek(i).color[2], 2));
                        if (d2 < d1 || d1 === undefined) {
                            d1 = d2;
                            pColor = vboxes.peek(i).color;
                        }
                    }
                    return pColor;
                },
                forcebw: function forcebw() {
                    // XXX: won't  work yet
                    var vboxes = this.vboxes;
                    vboxes.sort(function (a, b) {
                        return pv.naturalOrder(pv.sum(a.color), pv.sum(b.color));
                    });

                    // force darkest color to black if everything < 5
                    var lowest = vboxes[0].color;
                    if (lowest[0] < 5 && lowest[1] < 5 && lowest[2] < 5) vboxes[0].color = [0, 0, 0];

                    // force lightest color to white if everything > 251
                    var idx = vboxes.length - 1,
                        highest = vboxes[idx].color;
                    if (highest[0] > 251 && highest[1] > 251 && highest[2] > 251) vboxes[idx].color = [255, 255, 255];
                }
            };

            // histo (1-d array, giving the number of pixels in
            // each quantized region of color space), or null on error

            function getHisto(pixels) {
                var histosize = 1 << 3 * sigbits,
                    histo = new Array(histosize),
                    index,
                    rval,
                    gval,
                    bval;
                pixels.forEach(function (pixel) {
                    rval = pixel[0] >> rshift;
                    gval = pixel[1] >> rshift;
                    bval = pixel[2] >> rshift;
                    index = getColorIndex(rval, gval, bval);
                    histo[index] = (histo[index] || 0) + 1;
                });
                return histo;
            }

            function vboxFromPixels(pixels, histo) {
                var rmin = 1000000,
                    rmax = 0,
                    gmin = 1000000,
                    gmax = 0,
                    bmin = 1000000,
                    bmax = 0,
                    rval,
                    gval,
                    bval;
                // find min/max
                pixels.forEach(function (pixel) {
                    rval = pixel[0] >> rshift;
                    gval = pixel[1] >> rshift;
                    bval = pixel[2] >> rshift;
                    if (rval < rmin) rmin = rval;else if (rval > rmax) rmax = rval;
                    if (gval < gmin) gmin = gval;else if (gval > gmax) gmax = gval;
                    if (bval < bmin) bmin = bval;else if (bval > bmax) bmax = bval;
                });
                return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, histo);
            }

            function medianCutApply(histo, vbox) {
                if (!vbox.count()) return;

                var rw = vbox.r2 - vbox.r1 + 1,
                    gw = vbox.g2 - vbox.g1 + 1,
                    bw = vbox.b2 - vbox.b1 + 1,
                    maxw = pv.max([rw, gw, bw]);
                // only one pixel, no split
                if (vbox.count() == 1) {
                    return [vbox.copy()];
                }
                /* Find the partial sum arrays along the selected axis. */
                var total = 0,
                    partialsum = [],
                    lookaheadsum = [],
                    i,
                    j,
                    k,
                    sum,
                    index;
                if (maxw == rw) {
                    for (i = vbox.r1; i <= vbox.r2; i++) {
                        sum = 0;
                        for (j = vbox.g1; j <= vbox.g2; j++) {
                            for (k = vbox.b1; k <= vbox.b2; k++) {
                                index = getColorIndex(i, j, k);
                                sum += histo[index] || 0;
                            }
                        }
                        total += sum;
                        partialsum[i] = total;
                    }
                } else if (maxw == gw) {
                    for (i = vbox.g1; i <= vbox.g2; i++) {
                        sum = 0;
                        for (j = vbox.r1; j <= vbox.r2; j++) {
                            for (k = vbox.b1; k <= vbox.b2; k++) {
                                index = getColorIndex(j, i, k);
                                sum += histo[index] || 0;
                            }
                        }
                        total += sum;
                        partialsum[i] = total;
                    }
                } else {
                    /* maxw == bw */
                    for (i = vbox.b1; i <= vbox.b2; i++) {
                        sum = 0;
                        for (j = vbox.r1; j <= vbox.r2; j++) {
                            for (k = vbox.g1; k <= vbox.g2; k++) {
                                index = getColorIndex(j, k, i);
                                sum += histo[index] || 0;
                            }
                        }
                        total += sum;
                        partialsum[i] = total;
                    }
                }
                partialsum.forEach(function (d, i) {
                    lookaheadsum[i] = total - d;
                });

                function doCut(color) {
                    var dim1 = color + '1',
                        dim2 = color + '2',
                        left,
                        right,
                        vbox1,
                        vbox2,
                        d2,
                        count2 = 0;
                    for (i = vbox[dim1]; i <= vbox[dim2]; i++) {
                        if (partialsum[i] > total / 2) {
                            vbox1 = vbox.copy();
                            vbox2 = vbox.copy();
                            left = i - vbox[dim1];
                            right = vbox[dim2] - i;
                            if (left <= right) d2 = Math.min(vbox[dim2] - 1, ~~(i + right / 2));else d2 = Math.max(vbox[dim1], ~~(i - 1 - left / 2));
                            // avoid 0-count boxes
                            while (!partialsum[d2]) {
                                d2++;
                            }count2 = lookaheadsum[d2];
                            while (!count2 && partialsum[d2 - 1]) {
                                count2 = lookaheadsum[--d2];
                            } // set dimensions
                            vbox1[dim2] = d2;
                            vbox2[dim1] = vbox1[dim2] + 1;
                            // console.log('vbox counts:', vbox.count(), vbox1.count(), vbox2.count());
                            return [vbox1, vbox2];
                        }
                    }
                }
                // determine the cut planes
                return maxw == rw ? doCut('r') : maxw == gw ? doCut('g') : doCut('b');
            }

            function quantize(pixels, maxcolors) {
                // short-circuit
                if (!pixels.length || maxcolors < 2 || maxcolors > 256) {
                    // console.log('wrong number of maxcolors');
                    return false;
                }

                // XXX: check color content and convert to grayscale if insufficient

                var histo = getHisto(pixels),
                    histosize = 1 << 3 * sigbits;

                // check that we aren't below maxcolors already
                var nColors = 0;
                histo.forEach(function () {
                    nColors++;
                });
                if (nColors <= maxcolors) {}
                // XXX: generate the new colors from the histo and return


                // get the beginning vbox from the colors
                var vbox = vboxFromPixels(pixels, histo),
                    pq = new PQueue(function (a, b) {
                    return pv.naturalOrder(a.count(), b.count());
                });
                pq.push(vbox);

                // inner function to do the iteration

                function iter(lh, target) {
                    var ncolors = 1,
                        niters = 0,
                        vbox;
                    while (niters < maxIterations) {
                        vbox = lh.pop();
                        if (!vbox.count()) {
                            /* just put it back */
                            lh.push(vbox);
                            niters++;
                            continue;
                        }
                        // do the cut
                        var vboxes = medianCutApply(histo, vbox),
                            vbox1 = vboxes[0],
                            vbox2 = vboxes[1];

                        if (!vbox1) {
                            // console.log("vbox1 not defined; shouldn't happen!");
                            return;
                        }
                        lh.push(vbox1);
                        if (vbox2) {
                            /* vbox2 can be null */
                            lh.push(vbox2);
                            ncolors++;
                        }
                        if (ncolors >= target) return;
                        if (niters++ > maxIterations) {
                            // console.log("infinite loop; perhaps too few pixels!");
                            return;
                        }
                    }
                }

                // first set of colors, sorted by population
                iter(pq, fractByPopulations * maxcolors);
                // console.log(pq.size(), pq.debug().length, pq.debug().slice());

                // Re-sort by the product of pixel occupancy times the size in color space.
                var pq2 = new PQueue(function (a, b) {
                    return pv.naturalOrder(a.count() * a.volume(), b.count() * b.volume());
                });
                while (pq.size()) {
                    pq2.push(pq.pop());
                }

                // next set - generate the median cuts using the (npix * vol) sorting.
                iter(pq2, maxcolors - pq2.size());

                // calculate the actual colors
                var cmap = new CMap();
                while (pq2.size()) {
                    cmap.push(pq2.pop());
                }

                return cmap;
            }

            return {
                quantize: quantize
            };
        }();

        module.exports = MMCQ.quantize;
    }, {}], 2: [function (require, module, exports) {

        /*
          Vibrant.js
          by Jari Zwarts
        
          Color algorithm class that finds variations on colors in an image.
        
          Credits
          --------
          Lokesh Dhakar (http://www.lokeshdhakar.com) - Created ColorThief
          Google - Palette support library in Android
         */

        (function () {
            var CanvasImage,
                Swatch,
                Vibrant,
                bind = function bind(fn, me) {
                return function () {
                    return fn.apply(me, arguments);
                };
            },
                slice = [].slice;

            window.Swatch = Swatch = function () {
                Swatch.prototype.hsl = void 0;

                Swatch.prototype.rgb = void 0;

                Swatch.prototype.population = 1;

                Swatch.yiq = 0;

                function Swatch(rgb, population) {
                    this.rgb = rgb;
                    this.population = population;
                }

                Swatch.prototype.getHsl = function () {
                    if (!this.hsl) {
                        return this.hsl = Vibrant.rgbToHsl(this.rgb[0], this.rgb[1], this.rgb[2]);
                    } else {
                        return this.hsl;
                    }
                };

                Swatch.prototype.getPopulation = function () {
                    return this.population;
                };

                Swatch.prototype.getRgb = function () {
                    return this.rgb;
                };

                Swatch.prototype.getHex = function () {
                    return "#" + ((1 << 24) + (this.rgb[0] << 16) + (this.rgb[1] << 8) + this.rgb[2]).toString(16).slice(1, 7);
                };

                Swatch.prototype.getTitleTextColor = function () {
                    this._ensureTextColors();
                    if (this.yiq < 200) {
                        return "#fff";
                    } else {
                        return "#000";
                    }
                };

                Swatch.prototype.getBodyTextColor = function () {
                    this._ensureTextColors();
                    if (this.yiq < 150) {
                        return "#fff";
                    } else {
                        return "#000";
                    }
                };

                Swatch.prototype._ensureTextColors = function () {
                    if (!this.yiq) {
                        return this.yiq = (this.rgb[0] * 299 + this.rgb[1] * 587 + this.rgb[2] * 114) / 1000;
                    }
                };

                return Swatch;
            }();

            window.Vibrant = Vibrant = function () {
                Vibrant.prototype.quantize = require('quantize');

                Vibrant.prototype._swatches = [];

                Vibrant.prototype.TARGET_DARK_LUMA = 0.26;

                Vibrant.prototype.MAX_DARK_LUMA = 0.45;

                Vibrant.prototype.MIN_LIGHT_LUMA = 0.55;

                Vibrant.prototype.TARGET_LIGHT_LUMA = 0.74;

                Vibrant.prototype.MIN_NORMAL_LUMA = 0.3;

                Vibrant.prototype.TARGET_NORMAL_LUMA = 0.5;

                Vibrant.prototype.MAX_NORMAL_LUMA = 0.7;

                Vibrant.prototype.TARGET_MUTED_SATURATION = 0.3;

                Vibrant.prototype.MAX_MUTED_SATURATION = 0.4;

                Vibrant.prototype.TARGET_VIBRANT_SATURATION = 1;

                Vibrant.prototype.MIN_VIBRANT_SATURATION = 0.35;

                Vibrant.prototype.WEIGHT_SATURATION = 3;

                Vibrant.prototype.WEIGHT_LUMA = 6;

                Vibrant.prototype.WEIGHT_POPULATION = 1;

                Vibrant.prototype.VibrantSwatch = void 0;

                Vibrant.prototype.MutedSwatch = void 0;

                Vibrant.prototype.DarkVibrantSwatch = void 0;

                Vibrant.prototype.DarkMutedSwatch = void 0;

                Vibrant.prototype.LightVibrantSwatch = void 0;

                Vibrant.prototype.LightMutedSwatch = void 0;

                Vibrant.prototype.HighestPopulation = 0;

                function Vibrant(sourceImage, colorCount, quality) {
                    this.swatches = bind(this.swatches, this);
                    var a, allPixels, b, cmap, g, i, image, imageData, offset, pixelCount, pixels, r;
                    if (typeof colorCount === 'undefined') {
                        colorCount = 64;
                    }
                    if (typeof quality === 'undefined') {
                        quality = 5;
                    }
                    image = new CanvasImage(sourceImage);
                    try {
                        imageData = image.getImageData();
                        pixels = imageData.data;
                        pixelCount = image.getPixelCount();
                        allPixels = [];
                        i = 0;
                        while (i < pixelCount) {
                            offset = i * 4;
                            r = pixels[offset + 0];
                            g = pixels[offset + 1];
                            b = pixels[offset + 2];
                            a = pixels[offset + 3];
                            if (a >= 125) {
                                if (!(r > 250 && g > 250 && b > 250)) {
                                    allPixels.push([r, g, b]);
                                }
                            }
                            i = i + quality;
                        }
                        cmap = this.quantize(allPixels, colorCount);
                        this._swatches = cmap.vboxes.map(function (_this) {
                            return function (vbox) {
                                return new Swatch(vbox.color, vbox.vbox.count());
                            };
                        }(this));
                        this.maxPopulation = this.findMaxPopulation;
                        this.generateVarationColors();
                        this.generateEmptySwatches();
                    } finally {
                        image.removeCanvas();
                    }
                }

                Vibrant.prototype.generateVarationColors = function () {
                    this.VibrantSwatch = this.findColorVariation(this.TARGET_NORMAL_LUMA, this.MIN_NORMAL_LUMA, this.MAX_NORMAL_LUMA, this.TARGET_VIBRANT_SATURATION, this.MIN_VIBRANT_SATURATION, 1);
                    this.LightVibrantSwatch = this.findColorVariation(this.TARGET_LIGHT_LUMA, this.MIN_LIGHT_LUMA, 1, this.TARGET_VIBRANT_SATURATION, this.MIN_VIBRANT_SATURATION, 1);
                    this.DarkVibrantSwatch = this.findColorVariation(this.TARGET_DARK_LUMA, 0, this.MAX_DARK_LUMA, this.TARGET_VIBRANT_SATURATION, this.MIN_VIBRANT_SATURATION, 1);
                    this.MutedSwatch = this.findColorVariation(this.TARGET_NORMAL_LUMA, this.MIN_NORMAL_LUMA, this.MAX_NORMAL_LUMA, this.TARGET_MUTED_SATURATION, 0, this.MAX_MUTED_SATURATION);
                    this.LightMutedSwatch = this.findColorVariation(this.TARGET_LIGHT_LUMA, this.MIN_LIGHT_LUMA, 1, this.TARGET_MUTED_SATURATION, 0, this.MAX_MUTED_SATURATION);
                    return this.DarkMutedSwatch = this.findColorVariation(this.TARGET_DARK_LUMA, 0, this.MAX_DARK_LUMA, this.TARGET_MUTED_SATURATION, 0, this.MAX_MUTED_SATURATION);
                };

                Vibrant.prototype.generateEmptySwatches = function () {
                    var hsl;
                    if (this.VibrantSwatch === void 0) {
                        if (this.DarkVibrantSwatch !== void 0) {
                            hsl = this.DarkVibrantSwatch.getHsl();
                            hsl[2] = this.TARGET_NORMAL_LUMA;
                            this.VibrantSwatch = new Swatch(Vibrant.hslToRgb(hsl[0], hsl[1], hsl[2]), 0);
                        }
                    }
                    if (this.DarkVibrantSwatch === void 0) {
                        if (this.VibrantSwatch !== void 0) {
                            hsl = this.VibrantSwatch.getHsl();
                            hsl[2] = this.TARGET_DARK_LUMA;
                            return this.DarkVibrantSwatch = new Swatch(Vibrant.hslToRgb(hsl[0], hsl[1], hsl[2]), 0);
                        }
                    }
                };

                Vibrant.prototype.findMaxPopulation = function () {
                    var j, len, population, ref, swatch;
                    population = 0;
                    ref = this._swatches;
                    for (j = 0, len = ref.length; j < len; j++) {
                        swatch = ref[j];
                        population = Math.max(population, swatch.getPopulation());
                    }
                    return population;
                };

                Vibrant.prototype.findColorVariation = function (targetLuma, minLuma, maxLuma, targetSaturation, minSaturation, maxSaturation) {
                    var j, len, luma, max, maxValue, ref, sat, swatch, value;
                    max = void 0;
                    maxValue = 0;
                    ref = this._swatches;
                    for (j = 0, len = ref.length; j < len; j++) {
                        swatch = ref[j];
                        sat = swatch.getHsl()[1];
                        luma = swatch.getHsl()[2];
                        if (sat >= minSaturation && sat <= maxSaturation && luma >= minLuma && luma <= maxLuma && !this.isAlreadySelected(swatch)) {
                            value = this.createComparisonValue(sat, targetSaturation, luma, targetLuma, swatch.getPopulation(), this.HighestPopulation);
                            if (max === void 0 || value > maxValue) {
                                max = swatch;
                                maxValue = value;
                            }
                        }
                    }
                    return max;
                };

                Vibrant.prototype.createComparisonValue = function (saturation, targetSaturation, luma, targetLuma, population, maxPopulation) {
                    return this.weightedMean(this.invertDiff(saturation, targetSaturation), this.WEIGHT_SATURATION, this.invertDiff(luma, targetLuma), this.WEIGHT_LUMA, population / maxPopulation, this.WEIGHT_POPULATION);
                };

                Vibrant.prototype.invertDiff = function (value, targetValue) {
                    return 1 - Math.abs(value - targetValue);
                };

                Vibrant.prototype.weightedMean = function () {
                    var i, sum, sumWeight, value, values, weight;
                    values = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                    sum = 0;
                    sumWeight = 0;
                    i = 0;
                    while (i < values.length) {
                        value = values[i];
                        weight = values[i + 1];
                        sum += value * weight;
                        sumWeight += weight;
                        i += 2;
                    }
                    return sum / sumWeight;
                };

                Vibrant.prototype.swatches = function () {
                    return {
                        Vibrant: this.VibrantSwatch,
                        Muted: this.MutedSwatch,
                        DarkVibrant: this.DarkVibrantSwatch,
                        DarkMuted: this.DarkMutedSwatch,
                        LightVibrant: this.LightVibrantSwatch,
                        LightMuted: this.LightMuted
                    };
                };

                Vibrant.prototype.isAlreadySelected = function (swatch) {
                    return this.VibrantSwatch === swatch || this.DarkVibrantSwatch === swatch || this.LightVibrantSwatch === swatch || this.MutedSwatch === swatch || this.DarkMutedSwatch === swatch || this.LightMutedSwatch === swatch;
                };

                Vibrant.rgbToHsl = function (r, g, b) {
                    var d, h, l, max, min, s;
                    r /= 255;
                    g /= 255;
                    b /= 255;
                    max = Math.max(r, g, b);
                    min = Math.min(r, g, b);
                    h = void 0;
                    s = void 0;
                    l = (max + min) / 2;
                    if (max === min) {
                        h = s = 0;
                    } else {
                        d = max - min;
                        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                        switch (max) {
                            case r:
                                h = (g - b) / d + (g < b ? 6 : 0);
                                break;
                            case g:
                                h = (b - r) / d + 2;
                                break;
                            case b:
                                h = (r - g) / d + 4;
                        }
                        h /= 6;
                    }
                    return [h, s, l];
                };

                Vibrant.hslToRgb = function (h, s, l) {
                    var b, g, hue2rgb, p, q, r;
                    r = void 0;
                    g = void 0;
                    b = void 0;
                    hue2rgb = function hue2rgb(p, q, t) {
                        if (t < 0) {
                            t += 1;
                        }
                        if (t > 1) {
                            t -= 1;
                        }
                        if (t < 1 / 6) {
                            return p + (q - p) * 6 * t;
                        }
                        if (t < 1 / 2) {
                            return q;
                        }
                        if (t < 2 / 3) {
                            return p + (q - p) * (2 / 3 - t) * 6;
                        }
                        return p;
                    };
                    if (s === 0) {
                        r = g = b = l;
                    } else {
                        q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                        p = 2 * l - q;
                        r = hue2rgb(p, q, h + 1 / 3);
                        g = hue2rgb(p, q, h);
                        b = hue2rgb(p, q, h - 1 / 3);
                    }
                    return [r * 255, g * 255, b * 255];
                };

                return Vibrant;
            }();

            /*
              CanvasImage Class
              Class that wraps the html image element and canvas.
              It also simplifies some of the canvas context manipulation
              with a set of helper functions.
              Stolen from https://github.com/lokesh/color-thief
             */

            window.CanvasImage = CanvasImage = function () {
                function CanvasImage(image) {
                    this.canvas = document.createElement('canvas');
                    this.context = this.canvas.getContext('2d');
                    document.body.appendChild(this.canvas);
                    this.width = this.canvas.width = image.width;
                    this.height = this.canvas.height = image.height;
                    this.context.drawImage(image, 0, 0, this.width, this.height);
                }

                CanvasImage.prototype.clear = function () {
                    return this.context.clearRect(0, 0, this.width, this.height);
                };

                CanvasImage.prototype.update = function (imageData) {
                    return this.context.putImageData(imageData, 0, 0);
                };

                CanvasImage.prototype.getPixelCount = function () {
                    return this.width * this.height;
                };

                CanvasImage.prototype.getImageData = function () {
                    return this.context.getImageData(0, 0, this.width, this.height);
                };

                CanvasImage.prototype.removeCanvas = function () {
                    return this.canvas.parentNode.removeChild(this.canvas);
                };

                return CanvasImage;
            }();
        }).call(this);
    }, { "quantize": 1 }] }, {}, [2]);
"use strict";

(function () {
  var MutationObserver,
      Util,
      WeakMap,
      getComputedStyle,
      getComputedStyleRX,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  };

  Util = function () {
    function Util() {}

    Util.prototype.extend = function (custom, defaults) {
      var key, value;
      for (key in defaults) {
        value = defaults[key];
        if (custom[key] == null) {
          custom[key] = value;
        }
      }
      return custom;
    };

    Util.prototype.isMobile = function (agent) {
      return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(agent)
      );
    };

    Util.prototype.createEvent = function (event, bubble, cancel, detail) {
      var customEvent;
      if (bubble == null) {
        bubble = false;
      }
      if (cancel == null) {
        cancel = false;
      }
      if (detail == null) {
        detail = null;
      }
      if (document.createEvent != null) {
        customEvent = document.createEvent('CustomEvent');
        customEvent.initCustomEvent(event, bubble, cancel, detail);
      } else if (document.createEventObject != null) {
        customEvent = document.createEventObject();
        customEvent.eventType = event;
      } else {
        customEvent.eventName = event;
      }
      return customEvent;
    };

    Util.prototype.emitEvent = function (elem, event) {
      if (elem.dispatchEvent != null) {
        return elem.dispatchEvent(event);
      } else if (event in (elem != null)) {
        return elem[event]();
      } else if ("on" + event in (elem != null)) {
        return elem["on" + event]();
      }
    };

    Util.prototype.addEvent = function (elem, event, fn) {
      if (elem.addEventListener != null) {
        return elem.addEventListener(event, fn, false);
      } else if (elem.attachEvent != null) {
        return elem.attachEvent("on" + event, fn);
      } else {
        return elem[event] = fn;
      }
    };

    Util.prototype.removeEvent = function (elem, event, fn) {
      if (elem.removeEventListener != null) {
        return elem.removeEventListener(event, fn, false);
      } else if (elem.detachEvent != null) {
        return elem.detachEvent("on" + event, fn);
      } else {
        return delete elem[event];
      }
    };

    Util.prototype.innerHeight = function () {
      if ('innerHeight' in window) {
        return window.innerHeight;
      } else {
        return document.documentElement.clientHeight;
      }
    };

    return Util;
  }();

  WeakMap = this.WeakMap || this.MozWeakMap || (WeakMap = function () {
    function WeakMap() {
      this.keys = [];
      this.values = [];
    }

    WeakMap.prototype.get = function (key) {
      var i, item, j, len, ref;
      ref = this.keys;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        item = ref[i];
        if (item === key) {
          return this.values[i];
        }
      }
    };

    WeakMap.prototype.set = function (key, value) {
      var i, item, j, len, ref;
      ref = this.keys;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        item = ref[i];
        if (item === key) {
          this.values[i] = value;
          return;
        }
      }
      this.keys.push(key);
      return this.values.push(value);
    };

    return WeakMap;
  }());

  MutationObserver = this.MutationObserver || this.WebkitMutationObserver || this.MozMutationObserver || (MutationObserver = function () {
    function MutationObserver() {
      if (typeof console !== "undefined" && console !== null) {
        console.warn('MutationObserver is not supported by your browser.');
      }
      if (typeof console !== "undefined" && console !== null) {
        console.warn('WOW.js cannot detect dom mutations, please call .sync() after loading new content.');
      }
    }

    MutationObserver.notSupported = true;

    MutationObserver.prototype.observe = function () {};

    return MutationObserver;
  }());

  getComputedStyle = this.getComputedStyle || function (el, pseudo) {
    this.getPropertyValue = function (prop) {
      var ref;
      if (prop === 'float') {
        prop = 'styleFloat';
      }
      if (getComputedStyleRX.test(prop)) {
        prop.replace(getComputedStyleRX, function (_, _char) {
          return _char.toUpperCase();
        });
      }
      return ((ref = el.currentStyle) != null ? ref[prop] : void 0) || null;
    };
    return this;
  };

  getComputedStyleRX = /(\-([a-z]){1})/g;

  this.WOW = function () {
    WOW.prototype.defaults = {
      boxClass: 'wow',
      animateClass: 'animated',
      offset: 0,
      mobile: true,
      live: true,
      callback: null,
      scrollContainer: null
    };

    function WOW(options) {
      if (options == null) {
        options = {};
      }
      this.scrollCallback = bind(this.scrollCallback, this);
      this.scrollHandler = bind(this.scrollHandler, this);
      this.resetAnimation = bind(this.resetAnimation, this);
      this.start = bind(this.start, this);
      this.scrolled = true;
      this.config = this.util().extend(options, this.defaults);
      if (options.scrollContainer != null) {
        this.config.scrollContainer = document.querySelector(options.scrollContainer);
      }
      this.animationNameCache = new WeakMap();
      this.wowEvent = this.util().createEvent(this.config.boxClass);
    }

    WOW.prototype.init = function () {
      var ref;
      this.element = window.document.documentElement;
      if ((ref = document.readyState) === "interactive" || ref === "complete") {
        this.start();
      } else {
        this.util().addEvent(document, 'DOMContentLoaded', this.start);
      }
      return this.finished = [];
    };

    WOW.prototype.start = function () {
      var box, j, len, ref;
      this.stopped = false;
      this.boxes = function () {
        var j, len, ref, results;
        ref = this.element.querySelectorAll("." + this.config.boxClass);
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          box = ref[j];
          results.push(box);
        }
        return results;
      }.call(this);
      this.all = function () {
        var j, len, ref, results;
        ref = this.boxes;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          box = ref[j];
          results.push(box);
        }
        return results;
      }.call(this);
      if (this.boxes.length) {
        if (this.disabled()) {
          this.resetStyle();
        } else {
          ref = this.boxes;
          for (j = 0, len = ref.length; j < len; j++) {
            box = ref[j];
            this.applyStyle(box, true);
          }
        }
      }
      if (!this.disabled()) {
        this.util().addEvent(this.config.scrollContainer || window, 'scroll', this.scrollHandler);
        this.util().addEvent(window, 'resize', this.scrollHandler);
        this.interval = setInterval(this.scrollCallback, 50);
      }
      if (this.config.live) {
        return new MutationObserver(function (_this) {
          return function (records) {
            var k, len1, node, record, results;
            results = [];
            for (k = 0, len1 = records.length; k < len1; k++) {
              record = records[k];
              results.push(function () {
                var l, len2, ref1, results1;
                ref1 = record.addedNodes || [];
                results1 = [];
                for (l = 0, len2 = ref1.length; l < len2; l++) {
                  node = ref1[l];
                  results1.push(this.doSync(node));
                }
                return results1;
              }.call(_this));
            }
            return results;
          };
        }(this)).observe(document.body, {
          childList: true,
          subtree: true
        });
      }
    };

    WOW.prototype.stop = function () {
      this.stopped = true;
      this.util().removeEvent(this.config.scrollContainer || window, 'scroll', this.scrollHandler);
      this.util().removeEvent(window, 'resize', this.scrollHandler);
      if (this.interval != null) {
        return clearInterval(this.interval);
      }
    };

    WOW.prototype.sync = function (element) {
      if (MutationObserver.notSupported) {
        return this.doSync(this.element);
      }
    };

    WOW.prototype.doSync = function (element) {
      var box, j, len, ref, results;
      if (element == null) {
        element = this.element;
      }
      if (element.nodeType !== 1) {
        return;
      }
      element = element.parentNode || element;
      ref = element.querySelectorAll("." + this.config.boxClass);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        box = ref[j];
        if (indexOf.call(this.all, box) < 0) {
          this.boxes.push(box);
          this.all.push(box);
          if (this.stopped || this.disabled()) {
            this.resetStyle();
          } else {
            this.applyStyle(box, true);
          }
          results.push(this.scrolled = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    WOW.prototype.show = function (box) {
      this.applyStyle(box);
      box.className = box.className + " " + this.config.animateClass;
      if (this.config.callback != null) {
        this.config.callback(box);
      }
      this.util().emitEvent(box, this.wowEvent);
      this.util().addEvent(box, 'animationend', this.resetAnimation);
      this.util().addEvent(box, 'oanimationend', this.resetAnimation);
      this.util().addEvent(box, 'webkitAnimationEnd', this.resetAnimation);
      this.util().addEvent(box, 'MSAnimationEnd', this.resetAnimation);
      return box;
    };

    WOW.prototype.applyStyle = function (box, hidden) {
      var delay, duration, iteration;
      duration = box.getAttribute('data-wow-duration');
      delay = box.getAttribute('data-wow-delay');
      iteration = box.getAttribute('data-wow-iteration');
      return this.animate(function (_this) {
        return function () {
          return _this.customStyle(box, hidden, duration, delay, iteration);
        };
      }(this));
    };

    WOW.prototype.animate = function () {
      if ('requestAnimationFrame' in window) {
        return function (callback) {
          return window.requestAnimationFrame(callback);
        };
      } else {
        return function (callback) {
          return callback();
        };
      }
    }();

    WOW.prototype.resetStyle = function () {
      var box, j, len, ref, results;
      ref = this.boxes;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        box = ref[j];
        results.push(box.style.visibility = 'visible');
      }
      return results;
    };

    WOW.prototype.resetAnimation = function (event) {
      var target;
      if (event.type.toLowerCase().indexOf('animationend') >= 0) {
        target = event.target || event.srcElement;
        return target.className = target.className.replace(this.config.animateClass, '').trim();
      }
    };

    WOW.prototype.customStyle = function (box, hidden, duration, delay, iteration) {
      if (hidden) {
        this.cacheAnimationName(box);
      }
      box.style.visibility = hidden ? 'hidden' : 'visible';
      if (duration) {
        this.vendorSet(box.style, {
          animationDuration: duration
        });
      }
      if (delay) {
        this.vendorSet(box.style, {
          animationDelay: delay
        });
      }
      if (iteration) {
        this.vendorSet(box.style, {
          animationIterationCount: iteration
        });
      }
      this.vendorSet(box.style, {
        animationName: hidden ? 'none' : this.cachedAnimationName(box)
      });
      return box;
    };

    WOW.prototype.vendors = ["moz", "webkit"];

    WOW.prototype.vendorSet = function (elem, properties) {
      var name, results, value, vendor;
      results = [];
      for (name in properties) {
        value = properties[name];
        elem["" + name] = value;
        results.push(function () {
          var j, len, ref, results1;
          ref = this.vendors;
          results1 = [];
          for (j = 0, len = ref.length; j < len; j++) {
            vendor = ref[j];
            results1.push(elem["" + vendor + name.charAt(0).toUpperCase() + name.substr(1)] = value);
          }
          return results1;
        }.call(this));
      }
      return results;
    };

    WOW.prototype.vendorCSS = function (elem, property) {
      var j, len, ref, result, style, vendor;
      style = getComputedStyle(elem);
      result = style.getPropertyCSSValue(property);
      ref = this.vendors;
      for (j = 0, len = ref.length; j < len; j++) {
        vendor = ref[j];
        result = result || style.getPropertyCSSValue("-" + vendor + "-" + property);
      }
      return result;
    };

    WOW.prototype.animationName = function (box) {
      var animationName, error;
      try {
        animationName = this.vendorCSS(box, 'animation-name').cssText;
      } catch (error) {
        animationName = getComputedStyle(box).getPropertyValue('animation-name');
      }
      if (animationName === 'none') {
        return '';
      } else {
        return animationName;
      }
    };

    WOW.prototype.cacheAnimationName = function (box) {
      return this.animationNameCache.set(box, this.animationName(box));
    };

    WOW.prototype.cachedAnimationName = function (box) {
      return this.animationNameCache.get(box);
    };

    WOW.prototype.scrollHandler = function () {
      return this.scrolled = true;
    };

    WOW.prototype.scrollCallback = function () {
      var box;
      if (this.scrolled) {
        this.scrolled = false;
        this.boxes = function () {
          var j, len, ref, results;
          ref = this.boxes;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            box = ref[j];
            if (!box) {
              continue;
            }
            if (this.isVisible(box)) {
              this.show(box);
              continue;
            }
            results.push(box);
          }
          return results;
        }.call(this);
        if (!(this.boxes.length || this.config.live)) {
          return this.stop();
        }
      }
    };

    WOW.prototype.offsetTop = function (element) {
      var top;
      while (element.offsetTop === void 0) {
        element = element.parentNode;
      }
      top = element.offsetTop;
      while (element = element.offsetParent) {
        top += element.offsetTop;
      }
      return top;
    };

    WOW.prototype.isVisible = function (box) {
      var bottom, offset, top, viewBottom, viewTop;
      offset = box.getAttribute('data-wow-offset') || this.config.offset;
      viewTop = this.config.scrollContainer && this.config.scrollContainer.scrollTop || window.pageYOffset;
      viewBottom = viewTop + Math.min(this.element.clientHeight, this.util().innerHeight()) - offset;
      top = this.offsetTop(box);
      bottom = top + box.clientHeight;
      return top <= viewBottom && bottom >= viewTop;
    };

    WOW.prototype.util = function () {
      return this._util != null ? this._util : this._util = new Util();
    };

    WOW.prototype.disabled = function () {
      return !this.config.mobile && this.util().isMobile(navigator.userAgent);
    };

    return WOW;
  }();
}).call(window);
"use strict";

// window.onload

// When do they fire ?

//     window.onload

// By
// default, it is fired when the entire page loads, including its content(images, css, scripts, etc.)
// In some browsers it now takes over the role of document.onload and fires when the DOM is ready as well.
// document.onload

// It is called when the DOM is ready which can be prior to images and other external content is loaded.


$(document).foundation();
new WOW().init();
// var logoSquare = new Image()
// logoSquare.src = "assets/img/logo_gen_h.svg";
// var logoRect = new Image()
// logoRect.src = "assets/img/logo_gen.svg";


// $(document).ready(function () {
//     $('.c-dropdown').hover(
//         function () {
//             $(this).children('.c-sub-menu').slideDown(200);
//         },
//         function () {
//             $(this).children('.c-sub-menu').slideUp(200);
//         }
//     );
// });

// var portFolioCarousel = $('#portfolioCarousel');
// $('#topCarousel').owlCarousel({
//     loop: true,
//     margin: 10,
//     autoplay: true,
//     responsive: {
//         0: {
//             items: 1
//         }
//     }
// });

// portFolioCarousel.owlCarousel({
//     loop: true,
//     margin: 10,
//     autoplay: true,
//     nav: true,
//     responsive: {
//         0: {
//             items: 1
//         }
//     }
// });
// portFolioCarousel.on('changed.owl.carousel', function (property) {
//     var current = property.item.index;
//     var owlImg = $(property.target).find(".owl-item").eq(current).find("img");
//     //console.log('Image current is ' + vibImage.attr('src'));
//     var vibImage = new Image();
//     vibImage.src = owlImg.attr('src');
//    // var vibrant = new Vibrant(vibImage);
//    // var swatches = vibrant.swatches();
//    // console.log(swatches['Vibrant'].getHex());
//     //$('.portfolio-bg').css("background", "" + swatches['DarkVibrant'].getHex());
//     /*
//      * Results into:
//      * Vibrant #7a4426
//      * Muted #7b9eae
//      * DarkVibrant #348945
//      * DarkMuted #141414
//      * LightVibrant #f3ccb4
//      */
//         var colorThief = new ColorThief();
//         var col = colorThief.getColor(vibImage);
//         var colString = "rgb(" + col+")";
//         console.log(colString);
//         $('.portfolio-bg').css("background", colString);
// });


// $(window).scroll(function (event) {
//     var scroll = $(window).scrollTop();
//     if (scroll > 300) {
//         $('.top-bar').removeClass('top-bar-before');
//         $('.top-bar').addClass('top-bar-after');
//         $("#logoImage").attr("src", logoSquare.src);
//         //document.getElementById("logoImage").src = logoSquare.src;
//     } else {

//         $('.top-bar').addClass('top-bar-before');
//         $('.top-bar').removeClass('top-bar-after');
//         $("#logoImage").attr("src", logoRect.src);
//     }

// });

// var ismenuactv = false;
// var animtime = 700; //Keep this value same as "$animtime" in scss file 

// $(document).ready(function () {

//     var menu_icon = $('#menu-icon');
//     var c_path = $('#c_path');
//     var t_line = $('#t_line');
//     var f_line = $('#f_line');

//     menu_icon.click(function () {

//         if (!ismenuactv) {
//             c_path.addClass('path-anim');

//             setTimeout(function () {
//                 c_path.addClass('cpath-end').removeClass('path-anim');
//                 t_line.addClass('linemoveup');
//                 f_line.addClass('linemovedown');
//                 ismenuactv = true;
//             }, animtime);

//         } else {

//             c_path.addClass('path-anim-rev');
//             setTimeout(function () {
//                 t_line.removeClass('linemoveup');
//                 f_line.removeClass('linemovedown');
//                 c_path.removeClass('cpath-end path-anim-rev');
//                 ismenuactv = false;
//             }, animtime);
//         }
//     });
// });
//   $(window).load(function() {
//       $('#loader').fadeOut('slow', function() {
//           $(this).remove();
//       });
//   });


// $(document).ready(function () {
//     var movementStrength = 25;
//     var height = movementStrength / $(window).height();
//     var width = movementStrength / $(window).width();
//     $(".home-top-container").mousemove(function (e) {
//         var pageX = e.pageX - ($(window).width() / 2);
//         var pageY = e.pageY - ($(window).height() / 2);
//         var newvalueX = width * pageX * -3 ;
//         var newvalueY = height * pageY * -3;
//         $('.home-top-container').css("background-position", newvalueX + "px     " + newvalueY + "px");
//     });
// });
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsIndoYXQtaW5wdXQuanMiLCJmb3VuZGF0aW9uLmNvcmUuanMiLCJmb3VuZGF0aW9uLnV0aWwuYm94LmpzIiwiZm91bmRhdGlvbi51dGlsLmtleWJvYXJkLmpzIiwiZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnkuanMiLCJmb3VuZGF0aW9uLnV0aWwubW90aW9uLmpzIiwiZm91bmRhdGlvbi51dGlsLm5lc3QuanMiLCJmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlci5qcyIsImZvdW5kYXRpb24udXRpbC50b3VjaC5qcyIsImZvdW5kYXRpb24udXRpbC50cmlnZ2Vycy5qcyIsImZvdW5kYXRpb24ubWFnZWxsYW4uanMiLCJmb3VuZGF0aW9uLnJlc3BvbnNpdmVUb2dnbGUuanMiLCJmb3VuZGF0aW9uLnN0aWNreS5qcyIsImZvdW5kYXRpb24udG9nZ2xlci5qcyIsImNvbG9yLXRoaWVmLm1pbi5qcyIsIm93bC5jYXJvdXNlbC5taW4uanMiLCJ2aWJyYW50LmpzIiwid293LmpzIiwiYXBwLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJub0dsb2JhbCIsImFyciIsInNsaWNlIiwiY29uY2F0IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInN1cHBvcnQiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJ0b0FycmF5IiwiY2FsbCIsImdldCIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwiYXJncyIsIm1hcCIsImVsZW0iLCJpIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwib3B0aW9ucyIsIm5hbWUiLCJzcmMiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsInRhcmdldCIsImRlZXAiLCJpc0Z1bmN0aW9uIiwiaXNQbGFpbk9iamVjdCIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwib2JqIiwidHlwZSIsIkFycmF5IiwiaXNXaW5kb3ciLCJpc051bWVyaWMiLCJwYXJzZUZsb2F0Iiwibm9kZVR5cGUiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsImNvZGUiLCJzY3JpcHQiLCJpbmRpcmVjdCIsImV2YWwiLCJ0cmltIiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwidmFsdWUiLCJpc0FycmF5bGlrZSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJPYmplY3QiLCJpbkFycmF5Iiwic2Vjb25kIiwiZ3JlcCIsImludmVydCIsImNhbGxiYWNrSW52ZXJzZSIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJwcm94eSIsInRtcCIsIm5vdyIsIkRhdGUiLCJzcGxpdCIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJNQVhfTkVHQVRJVkUiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJjaGFyYWN0ZXJFbmNvZGluZyIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJlc2NhcGUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtYXRjaCIsIm0iLCJncm91cHMiLCJvbGQiLCJuaWQiLCJuZXdDb250ZXh0IiwibmV3U2VsZWN0b3IiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0Iiwiam9pbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImtleSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJkaXYiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsImRvY3VtZW50RWxlbWVudCIsIm5vZGUiLCJoYXNDb21wYXJlIiwicGFyZW50IiwiZG9jIiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmluZCIsImZpbHRlciIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJpbm5lckhUTUwiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJ2YWwiLCJzcGVjaWZpZWQiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJkaXIiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJkaXNhYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJ0b2tlbnMiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJhZGRDb21iaW5hdG9yIiwiY29tYmluYXRvciIsImJhc2UiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwidG9rZW4iLCJjb21waWxlZCIsImRpdjEiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwicmlzU2ltcGxlIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwic2VsZiIsImlzIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJuZXh0IiwicHJldiIsInVudGlsIiwidHJ1bmNhdGUiLCJzaWJsaW5nIiwibiIsImhhcyIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsInBvcyIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsInNpYmxpbmdzIiwiY29udGVudERvY3VtZW50IiwicmV2ZXJzZSIsInJub3R3aGl0ZSIsIm9wdGlvbnNDYWNoZSIsImNyZWF0ZU9wdGlvbnMiLCJvYmplY3QiLCJmbGFnIiwiQ2FsbGJhY2tzIiwibWVtb3J5IiwiZmlyZWQiLCJmaXJpbmciLCJmaXJpbmdTdGFydCIsImZpcmluZ0xlbmd0aCIsImZpcmluZ0luZGV4Iiwic3RhY2siLCJvbmNlIiwiZmlyZSIsImRhdGEiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJyZW1vdmUiLCJlbXB0eSIsImxvY2siLCJsb2NrZWQiLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwicHJvbWlzZSIsImFsd2F5cyIsImRlZmVycmVkIiwiZmFpbCIsInRoZW4iLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJwaXBlIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic3Vib3JkaW5hdGUiLCJyZXNvbHZlVmFsdWVzIiwicmVtYWluaW5nIiwidXBkYXRlRnVuYyIsInZhbHVlcyIsInByb2dyZXNzVmFsdWVzIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvZ3Jlc3NDb250ZXh0cyIsInJlc29sdmVDb250ZXh0cyIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImhvbGQiLCJ3YWl0IiwidHJpZ2dlckhhbmRsZXIiLCJvZmYiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlTdGF0ZSIsInNldFRpbWVvdXQiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwiZGVmaW5lUHJvcGVydHkiLCJ1aWQiLCJhY2NlcHRzIiwiZGVzY3JpcHRvciIsInVubG9jayIsImRlZmluZVByb3BlcnRpZXMiLCJzZXQiLCJwcm9wIiwic3RvcmVkIiwiY2FtZWwiLCJoYXNEYXRhIiwiZGlzY2FyZCIsImRhdGFfcHJpdiIsImRhdGFfdXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsInBhcnNlSlNPTiIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiY2FtZWxLZXkiLCJxdWV1ZSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwiY3NzRXhwYW5kIiwiaXNIaWRkZW4iLCJlbCIsImNzcyIsInJjaGVja2FibGVUeXBlIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwic3RydW5kZWZpbmVkIiwiZm9jdXNpbkJ1YmJsZXMiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJmb2N1c01vcnBoIiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImVyciIsImV2ZW50IiwidHlwZXMiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwidCIsImhhbmRsZU9iaiIsInNwZWNpYWwiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsInRyaWdnZXIiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiRXZlbnQiLCJpc1RyaWdnZXIiLCJuYW1lc3BhY2VfcmUiLCJub0J1YmJsZSIsInBhcmVudFdpbmRvdyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJfZGVmYXVsdCIsImZpeCIsImhhbmRsZXJRdWV1ZSIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJzZWwiLCJidXR0b24iLCJwcm9wcyIsImZpeEhvb2tzIiwia2V5SG9va3MiLCJvcmlnaW5hbCIsIndoaWNoIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwibW91c2VIb29rcyIsImV2ZW50RG9jIiwiYm9keSIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwib3JpZ2luYWxFdmVudCIsImZpeEhvb2siLCJsb2FkIiwiZm9jdXMiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInNpbXVsYXRlIiwiYnViYmxlIiwiaXNTaW11bGF0ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidGltZVN0YW1wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJhdHRhY2hlcyIsIm9uIiwib25lIiwib3JpZ0ZuIiwicnhodG1sVGFnIiwicnRhZ05hbWUiLCJyaHRtbCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicnNjcmlwdFR5cGUiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJjbGVhblNjcmlwdCIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZ2V0QWxsIiwiZml4SW5wdXQiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwid3JhcCIsIm5vZGVzIiwiY3JlYXRlVGV4dE5vZGUiLCJjbGVhbkRhdGEiLCJhcHBlbmQiLCJkb21NYW5pcCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsImtlZXBEYXRhIiwiaHRtbCIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiZGV0YWNoIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwiX2V2YWxVcmwiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImluc2VydCIsImlmcmFtZSIsImVsZW1kaXNwbGF5IiwiYWN0dWFsRGlzcGxheSIsInN0eWxlIiwiZGlzcGxheSIsImdldERlZmF1bHRDb21wdXRlZFN0eWxlIiwiZGVmYXVsdERpc3BsYXkiLCJ3cml0ZSIsImNsb3NlIiwicm1hcmdpbiIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsInBpeGVsUG9zaXRpb25WYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsImNvbnRhaW5lciIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiY3NzVGV4dCIsImNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJib3hTaXppbmdSZWxpYWJsZSIsInJlbGlhYmxlTWFyZ2luUmlnaHQiLCJtYXJnaW5EaXYiLCJtYXJnaW5SaWdodCIsInN3YXAiLCJyZGlzcGxheXN3YXAiLCJybnVtc3BsaXQiLCJycmVsTnVtIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJ2ZW5kb3JQcm9wTmFtZSIsImNhcE5hbWUiLCJvcmlnTmFtZSIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0Iiwic2hvd0hpZGUiLCJzaG93IiwiaGlkZGVuIiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiY3NzTnVtYmVyIiwiY3NzUHJvcHMiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsImhpZGUiLCJ0b2dnbGUiLCJUd2VlbiIsImVhc2luZyIsInVuaXQiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInN0ZXAiLCJ0d2VlbiIsImZ4IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsInRpbWVySWQiLCJyZnh0eXBlcyIsInJmeG51bSIsInJydW4iLCJhbmltYXRpb25QcmVmaWx0ZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsInR3ZWVuZXJzIiwiY3JlYXRlVHdlZW4iLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiYW5pbWF0aW9uIiwiY29sbGVjdGlvbiIsIm9wdHMiLCJvbGRmaXJlIiwiY2hlY2tEaXNwbGF5IiwiYW5pbSIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwiQW5pbWF0aW9uIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJ0aWNrIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsInRpbWVyIiwiY29tcGxldGUiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsIm5vZGVIb29rIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwicHJvcE5hbWUiLCJhdHRyTmFtZXMiLCJwcm9wRml4IiwiZ2V0dGVyIiwicmZvY3VzYWJsZSIsInJlbW92ZVByb3AiLCJub3R4bWwiLCJoYXNBdHRyaWJ1dGUiLCJyY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJwcm9jZWVkIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJub25jZSIsInJxdWVyeSIsIkpTT04iLCJwYXJzZSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmhhc2giLCJydHMiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInJ1cmwiLCJwcmVmaWx0ZXJzIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwiYWpheExvY2F0aW9uIiwiYWpheExvY1BhcnRzIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwianNvbiIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJmaXJlR2xvYmFscyIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwibG5hbWUiLCJvdmVycmlkZU1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0Iiwic3VjY2VzcyIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwicGFyYW0iLCJ0cmFkaXRpb25hbCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsIm1vZGlmaWVkIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJyMjAiLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ2IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhocklkIiwieGhyQ2FsbGJhY2tzIiwieGhyU3VjY2Vzc1N0YXR1cyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwicmVzcG9uc2VUZXh0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJfbG9hZCIsInBhcmFtcyIsImFuaW1hdGVkIiwiZ2V0V2luZG93Iiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsImxlZnQiLCJ1c2luZyIsIndpbiIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJzaXplIiwiYW5kU2VsZiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiRk9VTkRBVElPTl9WRVJTSU9OIiwiRm91bmRhdGlvbiIsIl9wbHVnaW5zIiwiX3V1aWRzIiwicnRsIiwicGx1Z2luIiwiZnVuY3Rpb25OYW1lIiwiYXR0ck5hbWUiLCJoeXBoZW5hdGUiLCJyZWdpc3RlclBsdWdpbiIsInBsdWdpbk5hbWUiLCJ1dWlkIiwiR2V0WW9EaWdpdHMiLCIkZWxlbWVudCIsInVucmVnaXN0ZXJQbHVnaW4iLCJyZUluaXQiLCJwbHVnaW5zIiwiaXNKUSIsIl9pbml0IiwiX3RoaXMiLCJwbGdzIiwiZm9yRWFjaCIsImZvdW5kYXRpb24iLCJjb25zb2xlIiwicm91bmQiLCJwb3ciLCJyZWZsb3ciLCIkZWxlbSIsIiRlbCIsIndhcm4iLCJ0aGluZyIsInBhcnNlVmFsdWUiLCJlciIsImdldEZuTmFtZSIsInRyYW5zaXRpb25lbmQiLCJ0cmFuc2l0aW9ucyIsInV0aWwiLCJ0aHJvdHRsZSIsIiRtZXRhIiwiJG5vSlMiLCJNZWRpYVF1ZXJ5IiwicGx1Z0NsYXNzIiwiUmVmZXJlbmNlRXJyb3IiLCJUeXBlRXJyb3IiLCJnZXRUaW1lIiwidmVuZG9ycyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInZwIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJsYXN0VGltZSIsIm5leHRUaW1lIiwicGVyZm9ybWFuY2UiLCJGdW5jdGlvbiIsIm9UaGlzIiwiYUFyZ3MiLCJmVG9CaW5kIiwiZk5PUCIsImZCb3VuZCIsImZ1bmNOYW1lUmVnZXgiLCJzdHIiLCJpc05hTiIsIkJveCIsIkltTm90VG91Y2hpbmdZb3UiLCJHZXREaW1lbnNpb25zIiwiR2V0T2Zmc2V0cyIsImVsZW1lbnQiLCJsck9ubHkiLCJ0Yk9ubHkiLCJlbGVEaW1zIiwiYm90dG9tIiwicmlnaHQiLCJwYXJEaW1zIiwid2luZG93RGltcyIsImFsbERpcnMiLCJyZWN0IiwicGFyUmVjdCIsIndpblJlY3QiLCJ3aW5ZIiwid2luWCIsInBhcmVudERpbXMiLCJhbmNob3IiLCJ2T2Zmc2V0IiwiaE9mZnNldCIsImlzT3ZlcmZsb3ciLCIkZWxlRGltcyIsIiRhbmNob3JEaW1zIiwia2V5Q29kZXMiLCJjb21tYW5kcyIsIktleWJvYXJkIiwiZ2V0S2V5Q29kZXMiLCJwYXJzZUtleSIsInNoaWZ0S2V5IiwiY3RybEtleSIsImFsdEtleSIsImhhbmRsZUtleSIsImNvbXBvbmVudCIsImZ1bmN0aW9ucyIsImNvbW1hbmRMaXN0IiwiY21kcyIsImNvbW1hbmQiLCJsdHIiLCJoYW5kbGVkIiwidW5oYW5kbGVkIiwiZmluZEZvY3VzYWJsZSIsInJlZ2lzdGVyIiwiY29tcG9uZW50TmFtZSIsInRyYXBGb2N1cyIsIiRmb2N1c2FibGUiLCIkZmlyc3RGb2N1c2FibGUiLCIkbGFzdEZvY3VzYWJsZSIsInJlbGVhc2VGb2N1cyIsImtjcyIsImsiLCJrYyIsImRlZmF1bHRRdWVyaWVzIiwibGFuZHNjYXBlIiwicG9ydHJhaXQiLCJyZXRpbmEiLCJxdWVyaWVzIiwiZXh0cmFjdGVkU3R5bGVzIiwibmFtZWRRdWVyaWVzIiwicGFyc2VTdHlsZVRvT2JqZWN0IiwiX2dldEN1cnJlbnRTaXplIiwiX3dhdGNoZXIiLCJhdExlYXN0IiwicXVlcnkiLCJtYXRjaE1lZGlhIiwibmV3U2l6ZSIsImN1cnJlbnRTaXplIiwic3R5bGVNZWRpYSIsIm1lZGlhIiwiaW5mbyIsImN1cnJlbnRTdHlsZSIsIm1hdGNoTWVkaXVtIiwic3R5bGVTaGVldCIsInN0eWxlT2JqZWN0IiwicmVkdWNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaW5pdENsYXNzZXMiLCJhY3RpdmVDbGFzc2VzIiwiTW90aW9uIiwiYW5pbWF0ZUluIiwiY2IiLCJhbmltYXRlT3V0IiwiTW92ZSIsInByb2ciLCJtb3ZlIiwidHMiLCJpc0luIiwiaW5pdENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJOZXN0IiwiRmVhdGhlciIsIm1lbnUiLCJpdGVtcyIsInN1Yk1lbnVDbGFzcyIsInN1Ykl0ZW1DbGFzcyIsImhhc1N1YkNsYXNzIiwiJGl0ZW0iLCIkc3ViIiwiQnVybiIsIlRpbWVyIiwibmFtZVNwYWNlIiwicmVtYWluIiwiaXNQYXVzZWQiLCJyZXN0YXJ0IiwiaW5maW5pdGUiLCJwYXVzZSIsIm9uSW1hZ2VzTG9hZGVkIiwiaW1hZ2VzIiwidW5sb2FkZWQiLCJzaW5nbGVJbWFnZUxvYWRlZCIsInNwb3RTd2lwZSIsImVuYWJsZWQiLCJtb3ZlVGhyZXNob2xkIiwidGltZVRocmVzaG9sZCIsInN0YXJ0UG9zWCIsInN0YXJ0UG9zWSIsImVsYXBzZWRUaW1lIiwiaXNNb3ZpbmciLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJ4IiwidG91Y2hlcyIsInkiLCJkeCIsImR5IiwiYWJzIiwib25Ub3VjaFN0YXJ0Iiwic3dpcGUiLCJhZGRUb3VjaCIsImhhbmRsZVRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJldmVudFR5cGVzIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwic2ltdWxhdGVkRXZlbnQiLCJNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJwcmVmaXhlcyIsInRyaWdnZXJzIiwiY2hlY2tMaXN0ZW5lcnMiLCJldmVudHNMaXN0ZW5lciIsInJlc2l6ZUxpc3RlbmVyIiwic2Nyb2xsTGlzdGVuZXIiLCJtdXRhdGVMaXN0ZW5lciIsImNsb3NlbWVMaXN0ZW5lciIsInlldGlCb3hlcyIsInBsdWdOYW1lcyIsImxpc3RlbmVycyIsInBsdWdpbklkIiwiZGVib3VuY2UiLCIkbm9kZXMiLCJsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uIiwibXV0YXRpb25SZWNvcmRzTGlzdCIsIiR0YXJnZXQiLCJhdHRyaWJ1dGVOYW1lIiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJzdWJ0cmVlIiwiYXR0cmlidXRlRmlsdGVyIiwiSUhlYXJZb3UiLCJNYWdlbGxhbiIsImRlZmF1bHRzIiwiY2FsY1BvaW50cyIsIiR0YXJnZXRzIiwiJGxpbmtzIiwiJGFjdGl2ZSIsInNjcm9sbFBvcyIsInBhcnNlSW50IiwiX2V2ZW50cyIsInBvaW50cyIsIndpbkhlaWdodCIsImlubmVySGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiZG9jSGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiJHRhciIsInB0IiwidGhyZXNob2xkIiwidGFyZ2V0UG9pbnQiLCIkYm9keSIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uRWFzaW5nIiwiZGVlcExpbmtpbmciLCJzY3JvbGxUb0xvYyIsIl91cGRhdGVBY3RpdmUiLCJhcnJpdmFsIiwibG9jIiwiX2luVHJhbnNpdGlvbiIsImJhck9mZnNldCIsIndpblBvcyIsImN1cklkeCIsImlzRG93biIsImN1clZpc2libGUiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiUmVzcG9uc2l2ZVRvZ2dsZSIsInRhcmdldElEIiwiJHRhcmdldE1lbnUiLCIkdG9nZ2xlciIsImFuaW1hdGlvbkluIiwiYW5pbWF0aW9uT3V0IiwiX3VwZGF0ZSIsIl91cGRhdGVNcUhhbmRsZXIiLCJ0b2dnbGVNZW51IiwiaGlkZUZvciIsIlN0aWNreSIsIiRwYXJlbnQiLCJ3YXNXcmFwcGVkIiwiJGNvbnRhaW5lciIsImNvbnRhaW5lckNsYXNzIiwic3RpY2t5Q2xhc3MiLCJzY3JvbGxDb3VudCIsImNoZWNrRXZlcnkiLCJpc1N0dWNrIiwiY29udGFpbmVySGVpZ2h0IiwiZWxlbUhlaWdodCIsIiRhbmNob3IiLCJfcGFyc2VQb2ludHMiLCJfc2V0U2l6ZXMiLCJzY3JvbGwiLCJfY2FsYyIsIl9yZW1vdmVTdGlja3kiLCJ0b3BQb2ludCIsInRvcEFuY2hvciIsImJ0bSIsImJ0bUFuY2hvciIsInB0cyIsImJyZWFrcyIsInBsYWNlIiwiaXNPbiIsImNhblN0aWNrIiwiX3BhdXNlTGlzdGVuZXJzIiwiY2hlY2tTaXplcyIsImJvdHRvbVBvaW50IiwiX3NldFN0aWNreSIsInN0aWNrVG8iLCJtcmduIiwibm90U3R1Y2tUbyIsImlzVG9wIiwic3RpY2tUb1RvcCIsImFuY2hvclB0IiwiYW5jaG9ySGVpZ2h0IiwidG9wT3JCb3R0b20iLCJzdGlja3lPbiIsIm5ld0VsZW1XaWR0aCIsImNvbXAiLCJwZG5nbCIsInBkbmdyIiwibmV3Q29udGFpbmVySGVpZ2h0IiwiX3NldEJyZWFrUG9pbnRzIiwibVRvcCIsImVtQ2FsYyIsIm1hcmdpblRvcCIsIm1CdG0iLCJtYXJnaW5Cb3R0b20iLCJlbSIsImZvbnRTaXplIiwiVG9nZ2xlciIsIl91cGRhdGVBUklBIiwiQ2FudmFzSW1hZ2UiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwiY2xlYXIiLCJjbGVhclJlY3QiLCJ1cGRhdGUiLCJwdXRJbWFnZURhdGEiLCJnZXRQaXhlbENvdW50IiwiZ2V0SW1hZ2VEYXRhIiwicmVtb3ZlQ2FudmFzIiwiQ29sb3JUaGllZiIsImdldENvbG9yIiwiYyIsImdldFBhbGV0dGUiLCJkIiwiZiIsImciLCJoIiwibyIsIk1NQ1EiLCJxdWFudGl6ZSIsInBhbGV0dGUiLCJwdiIsIm5hdHVyYWxPcmRlciIsInN1bSIsInBlZWsiLCJkZWJ1ZyIsInIxIiwicjIiLCJnMSIsImcyIiwiYjEiLCJiMiIsImhpc3RvIiwidmJveGVzIiwidmJveCIsInZvbHVtZSIsIm1pbiIsIl92b2x1bWUiLCJfY291bnRfc2V0IiwiX2NvdW50IiwiYXZnIiwiX2F2ZyIsImd2YWwiLCJidmFsIiwiY29sb3IiLCJuZWFyZXN0Iiwic3FydCIsImZvcmNlYnciLCJEZWZhdWx0cyIsIl9oYW5kbGVycyIsIl9zdXByZXNzIiwiX2N1cnJlbnQiLCJfc3BlZWQiLCJfY29vcmRpbmF0ZXMiLCJfYnJlYWtwb2ludCIsIl93aWR0aCIsIl9pdGVtcyIsIl9jbG9uZXMiLCJfbWVyZ2VycyIsIl93aWR0aHMiLCJfaW52YWxpZGF0ZWQiLCJfcGlwZSIsIl9kcmFnIiwicG9pbnRlciIsInN0YWdlIiwiZGlyZWN0aW9uIiwiX3N0YXRlcyIsInRhZ3MiLCJpbml0aWFsaXppbmciLCJhbmltYXRpbmciLCJkcmFnZ2luZyIsIlBsdWdpbnMiLCJjaGFyQXQiLCJXb3JrZXJzIiwiaW5pdGlhbGl6ZSIsImxvb3AiLCJjZW50ZXIiLCJyZXdpbmQiLCJtb3VzZURyYWciLCJ0b3VjaERyYWciLCJwdWxsRHJhZyIsImZyZWVEcmFnIiwic3RhZ2VQYWRkaW5nIiwibWVyZ2VGaXQiLCJhdXRvV2lkdGgiLCJzdGFydFBvc2l0aW9uIiwic21hcnRTcGVlZCIsImZsdWlkU3BlZWQiLCJkcmFnRW5kU3BlZWQiLCJyZXNwb25zaXZlIiwicmVzcG9uc2l2ZVJlZnJlc2hSYXRlIiwicmVzcG9uc2l2ZUJhc2VFbGVtZW50IiwiZmFsbGJhY2tFYXNpbmciLCJuZXN0ZWRJdGVtU2VsZWN0b3IiLCJpdGVtRWxlbWVudCIsInN0YWdlRWxlbWVudCIsInJlZnJlc2hDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwicnRsQ2xhc3MiLCJyZXNwb25zaXZlQ2xhc3MiLCJkcmFnQ2xhc3MiLCJpdGVtQ2xhc3MiLCJzdGFnZUNsYXNzIiwic3RhZ2VPdXRlckNsYXNzIiwiZ3JhYkNsYXNzIiwiRGVmYXVsdCIsIklubmVyIiwiT3V0ZXIiLCJUeXBlIiwiU3RhdGUiLCIkc3RhZ2UiLCJ0b0ZpeGVkIiwiY2VpbCIsIm5vcm1hbGl6ZSIsIm91dGVySFRNTCIsIm1pbmltdW0iLCJtYXhpbXVtIiwiY29vcmRpbmF0ZXMiLCJvcCIsImVudGVyIiwicHJlbG9hZEF1dG9XaWR0aEltYWdlcyIsInJlZnJlc2giLCJpbnZhbGlkYXRlIiwicmVnaXN0ZXJFdmVudEhhbmRsZXJzIiwibGVhdmUiLCJ2aWV3cG9ydCIsIk51bWJlciIsInByb3BlcnR5Iiwib3B0aW9uc0xvZ2ljIiwicHJlcGFyZSIsIm9uVGhyb3R0bGVkUmVzaXplIiwicmVzaXplVGltZXIiLCJvblJlc2l6ZSIsInRyYW5zaXRpb24iLCJvblRyYW5zaXRpb25FbmQiLCJvbkRyYWdTdGFydCIsIm9uRHJhZ0VuZCIsInRyYW5zZm9ybSIsImRpZmZlcmVuY2UiLCJvbkRyYWdNb3ZlIiwidHJhbnNmb3JtM2QiLCJzdXBwcmVzcyIsInJlbGVhc2UiLCJtZXJnZXJzIiwiY2xvbmVzIiwic3JjRWxlbWVudCIsIm9yaWdpbmFsVGFyZ2V0IiwiaW5uZXJXaWR0aCIsImNsaWVudFdpZHRoIiwiSW1hZ2UiLCJkZXN0cm95IiwiZGV0YWNoRXZlbnQiLCJpdGVtIiwib25UcmlnZ2VyIiwib3dsIiwib3dsQ2Fyb3VzZWwiLCJDb25zdHJ1Y3RvciIsIlplcHRvIiwiX2NvcmUiLCJfaW50ZXJ2YWwiLCJfdmlzaWJsZSIsImF1dG9SZWZyZXNoIiwid2F0Y2giLCJhdXRvUmVmcmVzaEludGVydmFsIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkF1dG9SZWZyZXNoIiwiX2xvYWRlZCIsImxhenlMb2FkIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIkxhenkiLCJhdXRvSGVpZ2h0IiwiYXV0b0hlaWdodENsYXNzIiwiQXV0b0hlaWdodCIsIl92aWRlb3MiLCJfcGxheWluZyIsInZpZGVvIiwiaXNJbkZ1bGxTY3JlZW4iLCJmZXRjaCIsInBsYXkiLCJ2aWRlb0hlaWdodCIsInZpZGVvV2lkdGgiLCJ0aHVtYm5haWwiLCJ0aHVtYm5haWxfbGFyZ2UiLCJmcmFtZWdyYWJfdXJsIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJtb3pGdWxsU2NyZWVuRWxlbWVudCIsIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IiwiVmlkZW8iLCJjb3JlIiwic3dhcHBpbmciLCJwcmV2aW91cyIsIkFuaW1hdGUiLCJfdGltZW91dCIsIl9wYXVzZWQiLCJhdXRvcGxheSIsIl9zZXRBdXRvUGxheUludGVydmFsIiwiYXV0b3BsYXlIb3ZlclBhdXNlIiwiYXV0b3BsYXlUaW1lb3V0IiwiYXV0b3BsYXlTcGVlZCIsIl9nZXROZXh0VGltZW91dCIsIl9pbml0aWFsaXplZCIsIl9wYWdlcyIsIl9jb250cm9scyIsIl90ZW1wbGF0ZXMiLCJfb3ZlcnJpZGVzIiwiZG90c0RhdGEiLCJkb3RDbGFzcyIsImRyYXciLCJuYXYiLCJuYXZUZXh0IiwibmF2U3BlZWQiLCJuYXZFbGVtZW50IiwibmF2Q29udGFpbmVyIiwibmF2Q29udGFpbmVyQ2xhc3MiLCJuYXZDbGFzcyIsInNsaWRlQnkiLCJkb3RzQ2xhc3MiLCJkb3RzIiwiZG90c0VhY2giLCJkb3RzU3BlZWQiLCJkb3RzQ29udGFpbmVyIiwiJHJlbGF0aXZlIiwiJHByZXZpb3VzIiwiJG5leHQiLCIkYWJzb2x1dGUiLCJvdmVyaWRlcyIsInBhZ2UiLCJnZXRQb3NpdGlvbiIsIk5hdmlnYXRpb24iLCJfaGFzaGVzIiwic3Vic3RyaW5nIiwiVVJMaGFzaExpc3RlbmVyIiwiSGFzaCIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJXZWJraXRBbmltYXRpb24iLCJNb3pBbmltYXRpb24iLCJPQW5pbWF0aW9uIiwiY3NzdHJhbnNmb3JtcyIsImNzc3RyYW5zZm9ybXMzZCIsImNzc3RyYW5zaXRpb25zIiwiY3NzYW5pbWF0aW9ucyIsInIiLCJ1IiwicmVxdWlyZSIsImFycmF5Iiwic2lnYml0cyIsInJzaGlmdCIsImZyYWN0QnlQb3B1bGF0aW9ucyIsImdldENvbG9ySW5kZXgiLCJQUXVldWUiLCJjb21wYXJhdG9yIiwic29ydGVkIiwiVkJveCIsImZvcmNlIiwibnBpeCIsIm50b3QiLCJtdWx0IiwicnN1bSIsImdzdW0iLCJic3VtIiwiaHZhbCIsImhpc3RvaW5kZXgiLCJwaXhlbCIsInJ2YWwiLCJDTWFwIiwidmIiLCJkMSIsImQyIiwicENvbG9yIiwibG93ZXN0IiwiaGlnaGVzdCIsImdldEhpc3RvIiwicGl4ZWxzIiwiaGlzdG9zaXplIiwidmJveEZyb21QaXhlbHMiLCJybWluIiwicm1heCIsImdtaW4iLCJnbWF4IiwiYm1pbiIsImJtYXgiLCJtZWRpYW5DdXRBcHBseSIsInJ3IiwiZ3ciLCJidyIsIm1heHciLCJ0b3RhbCIsInBhcnRpYWxzdW0iLCJsb29rYWhlYWRzdW0iLCJkb0N1dCIsImRpbTEiLCJkaW0yIiwidmJveDEiLCJ2Ym94MiIsImNvdW50MiIsIm1heGNvbG9ycyIsIm5Db2xvcnMiLCJwcSIsIml0ZXIiLCJsaCIsIm5jb2xvcnMiLCJuaXRlcnMiLCJwcTIiLCJjbWFwIiwiU3dhdGNoIiwiVmlicmFudCIsIm1lIiwiaHNsIiwicmdiIiwicG9wdWxhdGlvbiIsInlpcSIsImdldEhzbCIsInJnYlRvSHNsIiwiZ2V0UG9wdWxhdGlvbiIsImdldFJnYiIsImdldEhleCIsImdldFRpdGxlVGV4dENvbG9yIiwiX2Vuc3VyZVRleHRDb2xvcnMiLCJnZXRCb2R5VGV4dENvbG9yIiwiX3N3YXRjaGVzIiwiVEFSR0VUX0RBUktfTFVNQSIsIk1BWF9EQVJLX0xVTUEiLCJNSU5fTElHSFRfTFVNQSIsIlRBUkdFVF9MSUdIVF9MVU1BIiwiTUlOX05PUk1BTF9MVU1BIiwiVEFSR0VUX05PUk1BTF9MVU1BIiwiTUFYX05PUk1BTF9MVU1BIiwiVEFSR0VUX01VVEVEX1NBVFVSQVRJT04iLCJNQVhfTVVURURfU0FUVVJBVElPTiIsIlRBUkdFVF9WSUJSQU5UX1NBVFVSQVRJT04iLCJNSU5fVklCUkFOVF9TQVRVUkFUSU9OIiwiV0VJR0hUX1NBVFVSQVRJT04iLCJXRUlHSFRfTFVNQSIsIldFSUdIVF9QT1BVTEFUSU9OIiwiVmlicmFudFN3YXRjaCIsIk11dGVkU3dhdGNoIiwiRGFya1ZpYnJhbnRTd2F0Y2giLCJEYXJrTXV0ZWRTd2F0Y2giLCJMaWdodFZpYnJhbnRTd2F0Y2giLCJMaWdodE11dGVkU3dhdGNoIiwiSGlnaGVzdFBvcHVsYXRpb24iLCJzb3VyY2VJbWFnZSIsImNvbG9yQ291bnQiLCJxdWFsaXR5Iiwic3dhdGNoZXMiLCJhbGxQaXhlbHMiLCJpbWFnZURhdGEiLCJwaXhlbENvdW50IiwibWF4UG9wdWxhdGlvbiIsImZpbmRNYXhQb3B1bGF0aW9uIiwiZ2VuZXJhdGVWYXJhdGlvbkNvbG9ycyIsImdlbmVyYXRlRW1wdHlTd2F0Y2hlcyIsImZpbmRDb2xvclZhcmlhdGlvbiIsImhzbFRvUmdiIiwicmVmIiwic3dhdGNoIiwidGFyZ2V0THVtYSIsIm1pbkx1bWEiLCJtYXhMdW1hIiwidGFyZ2V0U2F0dXJhdGlvbiIsIm1pblNhdHVyYXRpb24iLCJtYXhTYXR1cmF0aW9uIiwibHVtYSIsIm1heFZhbHVlIiwic2F0IiwiaXNBbHJlYWR5U2VsZWN0ZWQiLCJjcmVhdGVDb21wYXJpc29uVmFsdWUiLCJzYXR1cmF0aW9uIiwid2VpZ2h0ZWRNZWFuIiwiaW52ZXJ0RGlmZiIsInRhcmdldFZhbHVlIiwic3VtV2VpZ2h0Iiwid2VpZ2h0IiwiTXV0ZWQiLCJEYXJrVmlicmFudCIsIkRhcmtNdXRlZCIsIkxpZ2h0VmlicmFudCIsIkxpZ2h0TXV0ZWQiLCJodWUycmdiIiwicSIsIlV0aWwiLCJXZWFrTWFwIiwiZ2V0Q29tcHV0ZWRTdHlsZVJYIiwiY3VzdG9tIiwiaXNNb2JpbGUiLCJhZ2VudCIsImNhbmNlbCIsImRldGFpbCIsImN1c3RvbUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnRPYmplY3QiLCJldmVudFR5cGUiLCJldmVudE5hbWUiLCJlbWl0RXZlbnQiLCJhZGRFdmVudCIsIk1veldlYWtNYXAiLCJXZWJraXRNdXRhdGlvbk9ic2VydmVyIiwiTW96TXV0YXRpb25PYnNlcnZlciIsIm5vdFN1cHBvcnRlZCIsIl9jaGFyIiwiV09XIiwiYm94Q2xhc3MiLCJhbmltYXRlQ2xhc3MiLCJtb2JpbGUiLCJsaXZlIiwic2Nyb2xsQ29udGFpbmVyIiwic2Nyb2xsQ2FsbGJhY2siLCJzY3JvbGxIYW5kbGVyIiwicmVzZXRBbmltYXRpb24iLCJzY3JvbGxlZCIsImNvbmZpZyIsInF1ZXJ5U2VsZWN0b3IiLCJhbmltYXRpb25OYW1lQ2FjaGUiLCJ3b3dFdmVudCIsImZpbmlzaGVkIiwiYm94ZXMiLCJyZXNldFN0eWxlIiwiYXBwbHlTdHlsZSIsInJlY29yZHMiLCJsZW4xIiwicmVjb3JkIiwibGVuMiIsInJlZjEiLCJyZXN1bHRzMSIsImFkZGVkTm9kZXMiLCJkb1N5bmMiLCJzeW5jIiwiaXRlcmF0aW9uIiwiY3VzdG9tU3R5bGUiLCJjYWNoZUFuaW1hdGlvbk5hbWUiLCJ2ZW5kb3JTZXQiLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYW5pbWF0aW9uTmFtZSIsImNhY2hlZEFuaW1hdGlvbk5hbWUiLCJ2ZW5kb3IiLCJzdWJzdHIiLCJ2ZW5kb3JDU1MiLCJnZXRQcm9wZXJ0eUNTU1ZhbHVlIiwiaXNWaXNpYmxlIiwib2Zmc2V0VG9wIiwidmlld0JvdHRvbSIsInZpZXdUb3AiLCJfdXRpbCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Ozs7OztBQWNDLFdBQVVBLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTRCOztBQUU1QixLQUFLLFFBQU9DLE1BQVAseUNBQU9BLE1BQVAsT0FBa0IsUUFBbEIsSUFBOEIsUUFBT0EsT0FBT0MsT0FBZCxNQUEwQixRQUE3RCxFQUF3RTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRCxTQUFPQyxPQUFQLEdBQWlCSCxPQUFPSSxRQUFQLEdBQ2hCSCxRQUFTRCxNQUFULEVBQWlCLElBQWpCLENBRGdCLEdBRWhCLFVBQVVLLENBQVYsRUFBYztBQUNiLE9BQUssQ0FBQ0EsRUFBRUQsUUFBUixFQUFtQjtBQUNsQixV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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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InNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2Mi4xLjRcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwNSwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE1LTA0LTI4VDE2OjAxWlxuICovXG5cbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXG4vLyBDYW4ndCBiZSBpbiBzdHJpY3QgbW9kZSwgc2V2ZXJhbCBsaWJzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlXG4vLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWZcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcbi8vXG5cbnZhciBhcnIgPSBbXTtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG52YXJcblx0Ly8gVXNlIHRoZSBjb3JyZWN0IGRvY3VtZW50IGFjY29yZGluZ2x5IHdpdGggd2luZG93IGFyZ3VtZW50IChzYW5kYm94KVxuXHRkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCxcblxuXHR2ZXJzaW9uID0gXCIyLjEuNFwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW1xcZGEtel0pL2dpLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxuXHRzZWxlY3RvcjogXCJcIixcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cblxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxuXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdC8vIChZb3UgY2FuIHNlZWQgdGhlIGFyZ3VtZW50cyB3aXRoIGFuIGFycmF5IG9mIGFyZ3MsIGJ1dCB0aGlzIGlzXG5cdC8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5Lilcblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhcmdzICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAodGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0pKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzW2pdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKG51bGwpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoIChvcHRpb25zID0gYXJndW1lbnRzWyBpIF0pICE9IG51bGwgKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheShjb3B5KSkgKSApIHtcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUob2JqKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAob2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKyAxKSA+PSAwO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0Ly8gTm90IHBsYWluIG9iamVjdHM6XG5cdFx0Ly8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxuXHRcdC8vIC0gRE9NIG5vZGVzXG5cdFx0Ly8gLSB3aW5kb3dcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlIGZ1bmN0aW9uIGhhc24ndCByZXR1cm5lZCBhbHJlYWR5LCB3ZSdyZSBjb25maWRlbnQgdGhhdFxuXHRcdC8vIHxvYmp8IGlzIGEgcGxhaW4gb2JqZWN0LCBjcmVhdGVkIGJ5IHt9IG9yIGNvbnN0cnVjdGVkIHdpdGggbmV3IE9iamVjdFxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMCwgaU9TPDYgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdHZhciBzY3JpcHQsXG5cdFx0XHRpbmRpcmVjdCA9IGV2YWw7XG5cblx0XHRjb2RlID0galF1ZXJ5LnRyaW0oIGNvZGUgKTtcblxuXHRcdGlmICggY29kZSApIHtcblx0XHRcdC8vIElmIHRoZSBjb2RlIGluY2x1ZGVzIGEgdmFsaWQsIHByb2xvZ3VlIHBvc2l0aW9uXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxuXHRcdFx0Ly8gc2NyaXB0IHRhZyBpbnRvIHRoZSBkb2N1bWVudC5cblx0XHRcdGlmICggY29kZS5pbmRleE9mKFwidXNlIHN0cmljdFwiKSA9PT0gMSApIHtcblx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcblx0XHRcdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBPdGhlcndpc2UsIGF2b2lkIHRoZSBET00gbm9kZSBjcmVhdGlvbiwgaW5zZXJ0aW9uXG5cdFx0XHQvLyBhbmQgcmVtb3ZhbCBieSB1c2luZyBhbiBpbmRpcmVjdCBnbG9iYWwgZXZhbFxuXHRcdFx0XHRpbmRpcmVjdCggY29kZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdC8vIGFyZ3MgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBvYmogKTtcblxuXHRcdGlmICggYXJncyApIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRpc0FycmF5ID0gaXNBcnJheWxpa2UoIGVsZW1zICksXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5ICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSk7XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlsaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogaU9TIDguMiAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9IFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggb2JqLm5vZGVUeXBlID09PSAxICYmIGxlbmd0aCApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjAtcHJlXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCAyMDA4LCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTQtMTItMTZcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcblx0TUFYX05FR0FUSVZFID0gMSA8PCAzMSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cDovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gV2hpdGVzcGFjZSBjaGFyYWN0ZXJzIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc3ludGF4LyNjaGFyYWN0ZXJzXG5cdGNoYXJhY3RlckVuY29kaW5nID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcblxuXHQvLyBMb29zZWx5IG1vZGVsZWQgb24gQ1NTIGlkZW50aWZpZXIgY2hhcmFjdGVyc1xuXHQvLyBBbiB1bnF1b3RlZCB2YWx1ZSBzaG91bGQgYmUgYSBDU1MgaWRlbnRpZmllciBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHQvLyBQcm9wZXIgc3ludGF4OiBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoIFwid1wiLCBcIncjXCIgKSxcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3KlwiICkgKyBcIilcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblx0cmVzY2FwZSA9IC8nfFxcXFwvZyxcblxuXHQvLyBDU1MgZXNjYXBlcyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH07XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG1hdGNoLCBlbGVtLCBtLCBub2RlVHlwZSxcblx0XHQvLyBRU0EgdmFyc1xuXHRcdGksIGdyb3Vwcywgb2xkLCBuaWQsIG5ld0NvbnRleHQsIG5ld1NlbGVjdG9yO1xuXG5cdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblx0bm9kZVR5cGUgPSBjb250ZXh0Lm5vZGVUeXBlO1xuXG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0aWYgKCAhc2VlZCAmJiBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgd2hlbiBwb3NzaWJsZSAoZS5nLiwgbm90IHVuZGVyIERvY3VtZW50RnJhZ21lbnQpXG5cdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIjSURcIilcblx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKTtcblx0XHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuXHRcdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKGpRdWVyeSAjNjk2Mylcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFLCBPcGVyYSwgYW5kIFdlYmtpdCByZXR1cm4gaXRlbXNcblx0XHRcdFx0XHRcdC8vIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBDb250ZXh0IGlzIG5vdCBhIGRvY3VtZW50XG5cdFx0XHRcdFx0aWYgKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgJiYgKGVsZW0gPSBjb250ZXh0Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiYgZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCJUQUdcIilcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiLkNMQVNTXCIpXG5cdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFFTQSBwYXRoXG5cdFx0aWYgKCBzdXBwb3J0LnFzYSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0bmlkID0gb2xkID0gZXhwYW5kbztcblx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0bmV3U2VsZWN0b3IgPSBub2RlVHlwZSAhPT0gMSAmJiBzZWxlY3RvcjtcblxuXHRcdFx0Ly8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzXG5cdFx0XHQvLyBXZSBjYW4gd29yayBhcm91bmQgdGhpcyBieSBzcGVjaWZ5aW5nIGFuIGV4dHJhIElEIG9uIHRoZSByb290XG5cdFx0XHQvLyBhbmQgd29ya2luZyB1cCBmcm9tIHRoZXJlIChUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhlIHRlY2huaXF1ZSlcblx0XHRcdC8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJiBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXG5cdFx0XHRcdGlmICggKG9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKFwiaWRcIikpICkge1xuXHRcdFx0XHRcdG5pZCA9IG9sZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgbmlkICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmlkID0gXCJbaWQ9J1wiICsgbmlkICsgXCInXSBcIjtcblxuXHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0Z3JvdXBzW2ldID0gbmlkICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHQ7XG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oXCIsXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoKHFzYUVycm9yKSB7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCAhb2xkICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge0Z1bmN0aW9uKHN0cmluZywgT2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBkaXYgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGRpdi5wYXJlbnROb2RlICkge1xuXHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGRpdiA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdCggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBJZiBubyBkb2N1bWVudCBhbmQgZG9jdW1lbnRFbGVtZW50IGlzIGF2YWlsYWJsZSwgcmV0dXJuXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gU2V0IG91ciBkb2N1bWVudFxuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdHBhcmVudCA9IGRvYy5kZWZhdWx0VmlldztcblxuXHQvLyBTdXBwb3J0OiBJRT44XG5cdC8vIElmIGlmcmFtZSBkb2N1bWVudCBpcyBhc3NpZ25lZCB0byBcImRvY3VtZW50XCIgdmFyaWFibGUgYW5kIGlmIGlmcmFtZSBoYXMgYmVlbiByZWxvYWRlZCxcblx0Ly8gSUUgd2lsbCB0aHJvdyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBhY2Nlc3NpbmcgXCJkb2N1bWVudFwiIHZhcmlhYmxlLCBzZWUgalF1ZXJ5ICMxMzkzNlxuXHQvLyBJRTYtOCBkbyBub3Qgc3VwcG9ydCB0aGUgZGVmYXVsdFZpZXcgcHJvcGVydHkgc28gcGFyZW50IHdpbGwgYmUgdW5kZWZpbmVkXG5cdGlmICggcGFyZW50ICYmIHBhcmVudCAhPT0gcGFyZW50LnRvcCApIHtcblx0XHQvLyBJRTExIGRvZXMgbm90IGhhdmUgYXR0YWNoRXZlbnQsIHNvIGFsbCBtdXN0IHN1ZmZlclxuXHRcdGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIFN1cHBvcnQgdGVzdHNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvYy5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jLmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjNcblx0XHRcdFx0cmV0dXJuIG0gJiYgbS5wYXJlbnROb2RlID8gWyBtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jLnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxmXScgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuMissIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS43K1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2liaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgZG9lcyBub3QgaW1wbGVtZW50IGluY2x1c2l2ZSBkZXNjZW5kZW50XG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvYyB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2MgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2M7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIGRpZmYsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKHBhcmVudFsgZXhwYW5kbyBdID0ge30pO1xuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMV07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsyXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB1c2VDYWNoZSAmJiAoY2FjaGUgPSAoZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0pICYmIGNhY2hlWzBdID09PSBkaXJydW5zICkge1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMV07XG5cblx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLikgb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgJiYgKytkaWZmICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0KG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gZGlyIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSBvdXRlckNhY2hlWyBkaXIgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ICE9PSBkb2N1bWVudCAmJiBjb250ZXh0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gS2VlcCBgaWAgYSBzdHJpbmcgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzIHNvIGBtYXRjaGVkQ291bnRgIHdpbGwgYmUgXCIwMFwiIGJlbG93XG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBubyBzZWVkIGFuZCBvbmx5IG9uZSBncm91cFxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFRha2UgYSBzaG9ydGN1dCBhbmQgc2V0IHRoZSBjb250ZXh0IGlmIHRoZSByb290IHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0c3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHRcdFx0RXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0cnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5qUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICgvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8pO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0pO1xuXG5cdH1cblxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID49IDAgKSAhPT0gbm90O1xuXHR9KTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSkpO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSkgKTtcblx0XHR9XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQgKTtcblx0XHRyZXQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3RvciArIFwiIFwiICsgc2VsZWN0b3IgOiBzZWxlY3Rvcjtcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UpICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0pO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclswXSA9PT0gXCI8XCIgJiYgc2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWzFdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFswXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWzFdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWzFdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWzJdICk7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBCbGFja2JlcnJ5IDQuNlxuXHRcdFx0XHRcdC8vIGdFQklEIHJldHVybnMgbm9kZXMgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoIzY5NjMpXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0XHR0aGlzWzBdID0gZWxlbTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLmNvbnRleHQgPSBkb2N1bWVudDtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3RqUXVlcnkgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSB0aGlzWzBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiB0eXBlb2Ygcm9vdGpRdWVyeS5yZWFkeSAhPT0gXCJ1bmRlZmluZWRcIiA/XG5cdFx0XHRcdHJvb3RqUXVlcnkucmVhZHkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSBzZWxlY3Rvci5jb250ZXh0O1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRkaXI6IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHRcdHZhciBtYXRjaGVkID0gW10sXG5cdFx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBtYXRjaGVkO1xuXHR9LFxuXG5cdHNpYmxpbmc6IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHRcdHZhciBtYXRjaGVkID0gW107XG5cblx0XHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVkO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzW2ldICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3JzLCBjb250ZXh0IHx8IHRoaXMuY29udGV4dCApIDpcblx0XHRcdFx0MDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGZvciAoIGN1ciA9IHRoaXNbaV07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAocG9zID9cblx0XHRcdFx0XHRwb3MuaW5kZXgoY3VyKSA+IC0xIDpcblxuXHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGN1ciwgc2VsZWN0b3JzKSkgKSB7XG5cblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlKCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWUoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihzZWxlY3Rvcilcblx0XHQpO1xuXHR9XG59KTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKGN1ciA9IGN1cltkaXJdKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCh7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnNpYmxpbmcoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5zaWJsaW5nKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0pO1xudmFyIHJub3R3aGl0ZSA9ICgvXFxTKy9nKTtcblxuXG5cbi8vIFN0cmluZyB0byBPYmplY3Qgb3B0aW9ucyBmb3JtYXQgY2FjaGVcbnZhciBvcHRpb25zQ2FjaGUgPSB7fTtcblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXMgYW5kIHN0b3JlIGluIGNhY2hlXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0gb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0pO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdCggb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gfHwgY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIExhc3QgZmlyZSB2YWx1ZSAoZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0cylcblx0XHRtZW1vcnksXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXHRcdC8vIEZpcnN0IGNhbGxiYWNrIHRvIGZpcmUgKHVzZWQgaW50ZXJuYWxseSBieSBhZGQgYW5kIGZpcmVXaXRoKVxuXHRcdGZpcmluZ1N0YXJ0LFxuXHRcdC8vIEVuZCBvZiB0aGUgbG9vcCB3aGVuIGZpcmluZ1xuXHRcdGZpcmluZ0xlbmd0aCxcblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSByZW1vdmUgaWYgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4LFxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXHRcdC8vIFN0YWNrIG9mIGZpcmUgY2FsbHMgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRzdGFjayA9ICFvcHRpb25zLm9uY2UgJiYgW10sXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0XHRtZW1vcnkgPSBvcHRpb25zLm1lbW9yeSAmJiBkYXRhO1xuXHRcdFx0ZmlyZWQgPSB0cnVlO1xuXHRcdFx0ZmlyaW5nSW5kZXggPSBmaXJpbmdTdGFydCB8fCAwO1xuXHRcdFx0ZmlyaW5nU3RhcnQgPSAwO1xuXHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBsaXN0ICYmIGZpcmluZ0luZGV4IDwgZmlyaW5nTGVuZ3RoOyBmaXJpbmdJbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIGRhdGFbIDAgXSwgZGF0YVsgMSBdICkgPT09IGZhbHNlICYmIG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7IC8vIFRvIHByZXZlbnQgZnVydGhlciBjYWxscyB1c2luZyBhZGRcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdGlmICggc3RhY2sgKSB7XG5cdFx0XHRcdFx0aWYgKCBzdGFjay5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCBzdGFjay5zaGlmdCgpICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNlbGYuZGlzYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0Ly8gRmlyc3QsIHdlIHNhdmUgdGhlIGN1cnJlbnQgbGVuZ3RoXG5cdFx0XHRcdFx0dmFyIHN0YXJ0ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0KGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KSggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0Ly8gRG8gd2UgbmVlZCB0byBhZGQgdGhlIGNhbGxiYWNrcyB0byB0aGVcblx0XHRcdFx0XHQvLyBjdXJyZW50IGZpcmluZyBiYXRjaD9cblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdC8vIFdpdGggbWVtb3J5LCBpZiB3ZSdyZSBub3QgZmlyaW5nIHRoZW5cblx0XHRcdFx0XHQvLyB3ZSBzaG91bGQgY2FsbCByaWdodCBhd2F5XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nU3RhcnQgPSBzdGFydDtcblx0XHRcdFx0XHRcdGZpcmUoIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nTGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlyaW5nTGVuZ3RoLS07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gPyBqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDogISEoIGxpc3QgJiYgbGlzdC5sZW5ndGggKTtcblx0XHRcdH0sXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0ZmlyaW5nTGVuZ3RoID0gMDtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSGF2ZSB0aGUgbGlzdCBkbyBub3RoaW5nIGFueW1vcmVcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsaXN0ID0gc3RhY2sgPSBtZW1vcnkgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIElzIGl0IGRpc2FibGVkP1xuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gTG9jayB0aGUgbGlzdCBpbiBpdHMgY3VycmVudCBzdGF0ZVxuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHN0YWNrID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgKSB7XG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSXMgaXQgbG9ja2VkP1xuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFzdGFjaztcblx0XHRcdH0sXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggbGlzdCAmJiAoICFmaXJlZCB8fCBzdGFjayApICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRzdGFjay5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZpcmUoIGFyZ3MgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmpRdWVyeS5leHRlbmQoe1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgbGlzdGVuZXIgbGlzdCwgZmluYWwgc3RhdGVcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgXCJyZWplY3RlZFwiIF0sXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKFwibWVtb3J5XCIpIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZChmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIGkgXSApICYmIGZuc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZFsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdIGZvciBmb3J3YXJkaW5nIGFjdGlvbnMgdG8gbmV3RGVmZXJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzFdIF0oZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLCBmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdHByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWzFdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQvLyBzdGF0ZSA9IFsgcmVzb2x2ZWQgfCByZWplY3RlZCBdXG5cdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblxuXHRcdFx0XHQvLyBbIHJlamVjdF9saXN0IHwgcmVzb2x2ZV9saXN0IF0uZGlzYWJsZTsgcHJvZ3Jlc3NfbGlzdC5sb2NrXG5cdFx0XHRcdH0sIHR1cGxlc1sgaSBeIDEgXVsgMiBdLmRpc2FibGUsIHR1cGxlc1sgMiBdWyAyIF0ubG9jayApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBkZWZlcnJlZFsgcmVzb2x2ZSB8IHJlamVjdCB8IG5vdGlmeSBdXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHByb21pc2UgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzdWJvcmRpbmF0ZSAvKiAsIC4uLiwgc3Vib3JkaW5hdGVOICovICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGxlbmd0aCA9IHJlc29sdmVWYWx1ZXMubGVuZ3RoLFxuXG5cdFx0XHQvLyB0aGUgY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBsZW5ndGggIT09IDEgfHwgKCBzdWJvcmRpbmF0ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggc3Vib3JkaW5hdGUucHJvbWlzZSApICkgPyBsZW5ndGggOiAwLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkLiBJZiByZXNvbHZlVmFsdWVzIGNvbnNpc3Qgb2Ygb25seSBhIHNpbmdsZSBEZWZlcnJlZCwganVzdCB1c2UgdGhhdC5cblx0XHRcdGRlZmVycmVkID0gcmVtYWluaW5nID09PSAxID8gc3Vib3JkaW5hdGUgOiBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gVXBkYXRlIGZ1bmN0aW9uIGZvciBib3RoIHJlc29sdmUgYW5kIHByb2dyZXNzIHZhbHVlc1xuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpLCBjb250ZXh0cywgdmFsdWVzICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdGNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9LFxuXG5cdFx0XHRwcm9ncmVzc1ZhbHVlcywgcHJvZ3Jlc3NDb250ZXh0cywgcmVzb2x2ZUNvbnRleHRzO1xuXG5cdFx0Ly8gQWRkIGxpc3RlbmVycyB0byBEZWZlcnJlZCBzdWJvcmRpbmF0ZXM7IHRyZWF0IG90aGVycyBhcyByZXNvbHZlZFxuXHRcdGlmICggbGVuZ3RoID4gMSApIHtcblx0XHRcdHByb2dyZXNzVmFsdWVzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdHByb2dyZXNzQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHQuZG9uZSggdXBkYXRlRnVuYyggaSwgcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICkgKVxuXHRcdFx0XHRcdFx0LmZhaWwoIGRlZmVycmVkLnJlamVjdCApXG5cdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIHVwZGF0ZUZ1bmMoIGksIHByb2dyZXNzQ29udGV4dHMsIHByb2dyZXNzVmFsdWVzICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQtLXJlbWFpbmluZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIG9uIGFueXRoaW5nLCByZXNvbHZlIHRoZSBtYXN0ZXJcblx0XHRpZiAoICFyZW1haW5pbmcgKSB7XG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcblx0fVxufSk7XG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0O1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cdC8vIEFkZCB0aGUgY2FsbGJhY2tcblx0alF1ZXJ5LnJlYWR5LnByb21pc2UoKS5kb25lKCBmbiApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxuXHRob2xkUmVhZHk6IGZ1bmN0aW9uKCBob2xkICkge1xuXHRcdGlmICggaG9sZCApIHtcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblxuXHRcdC8vIFRyaWdnZXIgYW55IGJvdW5kIHJlYWR5IGV2ZW50c1xuXHRcdGlmICggalF1ZXJ5LmZuLnRyaWdnZXJIYW5kbGVyICkge1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLnRyaWdnZXJIYW5kbGVyKCBcInJlYWR5XCIgKTtcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS5vZmYoIFwicmVhZHlcIiApO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qKlxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbiAqL1xuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcblx0aWYgKCAhcmVhZHlMaXN0ICkge1xuXG5cdFx0cmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZCBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cblx0XHQvLyBXZSBvbmNlIHRyaWVkIHRvIHVzZSByZWFkeVN0YXRlIFwiaW50ZXJhY3RpdmVcIiBoZXJlLCBidXQgaXQgY2F1c2VkIGlzc3VlcyBsaWtlIHRoZSBvbmVcblx0XHQvLyBkaXNjb3ZlcmVkIGJ5IENocmlzUyBoZXJlOiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjI4MiNjb21tZW50OjE1XG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgKSB7XG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHRcdHNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblxuXHRcdFx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xufTtcblxuLy8gS2ljayBvZmYgdGhlIERPTSByZWFkeSBjaGVjayBldmVuIGlmIHRoZSB1c2VyIGRvZXMgbm90XG5qUXVlcnkucmVhZHkucHJvbWlzZSgpO1xuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGpRdWVyeS5hY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGpRdWVyeS5hY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5W2ldLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbiggZWxlbXNbaV0sIGtleSwgcmF3ID8gdmFsdWUgOiB2YWx1ZS5jYWxsKCBlbGVtc1tpXSwgaSwgZm4oIGVsZW1zW2ldLCBrZXkgKSApICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNoYWluYWJsZSA/XG5cdFx0ZWxlbXMgOlxuXG5cdFx0Ly8gR2V0c1xuXHRcdGJ1bGsgP1xuXHRcdFx0Zm4uY2FsbCggZWxlbXMgKSA6XG5cdFx0XHRsZW4gPyBmbiggZWxlbXNbMF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIG9iamVjdCBjYW4gaGF2ZSBkYXRhXG4gKi9cbmpRdWVyeS5hY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0LyoganNoaW50IC1XMDE4ICovXG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LFxuXHQvLyBPbGQgV2ViS2l0IGRvZXMgbm90IGhhdmUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zL2ZyZWV6ZSBtZXRob2QsXG5cdC8vIHJldHVybiBuZXcgZW1wdHkgb2JqZWN0IGluc3RlYWQgd2l0aCBubyBbW3NldF1dIGFjY2Vzc29yXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcy5jYWNoZSA9IHt9LCAwLCB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cdH0pO1xuXG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuRGF0YS5hY2NlcHRzID0galF1ZXJ5LmFjY2VwdERhdGE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXHRrZXk6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdC8vIEFsd2F5cyByZXR1cm4gdGhlIGtleSBmb3IgYSBmcm96ZW4gb2JqZWN0LlxuXHRcdGlmICggIURhdGEuYWNjZXB0cyggb3duZXIgKSApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBkZXNjcmlwdG9yID0ge30sXG5cdFx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGUga2V5XG5cdFx0XHR1bmxvY2sgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF1bmxvY2sgKSB7XG5cdFx0XHR1bmxvY2sgPSBEYXRhLnVpZCsrO1xuXG5cdFx0XHQvLyBTZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlIHByb3BlcnR5XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHsgdmFsdWU6IHVubG9jayB9O1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggb3duZXIsIGRlc2NyaXB0b3IgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0XG5cdFx0XHQvLyBGYWxsYmFjayB0byBhIGxlc3Mgc2VjdXJlIGRlZmluaXRpb25cblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHVubG9jaztcblx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggb3duZXIsIGRlc2NyaXB0b3IgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhlIGNhY2hlIG9iamVjdFxuXHRcdGlmICggIXRoaXMuY2FjaGVbIHVubG9jayBdICkge1xuXHRcdFx0dGhpcy5jYWNoZVsgdW5sb2NrIF0gPSB7fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdW5sb2NrO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHQvLyBUaGVyZSBtYXkgYmUgYW4gdW5sb2NrIGFzc2lnbmVkIHRvIHRoaXMgbm9kZSxcblx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGVudHJ5IGZvciB0aGlzIFwib3duZXJcIiwgY3JlYXRlIG9uZSBpbmxpbmVcblx0XHRcdC8vIGFuZCBzZXQgdGhlIHVubG9jayBhcyB0aG91Z2ggYW4gb3duZXIgZW50cnkgaGFkIGFsd2F5cyBleGlzdGVkXG5cdFx0XHR1bmxvY2sgPSB0aGlzLmtleSggb3duZXIgKSxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZVsgdW5sb2NrIF07XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEZyZXNoIGFzc2lnbm1lbnRzIGJ5IG9iamVjdCBhcmUgc2hhbGxvdyBjb3BpZWRcblx0XHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5leHRlbmQoIHRoaXMuY2FjaGVbIHVubG9jayBdLCBkYXRhICk7XG5cdFx0XHQvLyBPdGhlcndpc2UsIGNvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0Y2FjaGVbIHByb3AgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0Ly8gRWl0aGVyIGEgdmFsaWQgY2FjaGUgaXMgZm91bmQsIG9yIHdpbGwgYmUgY3JlYXRlZC5cblx0XHQvLyBOZXcgY2FjaGVzIHdpbGwgYmUgY3JlYXRlZCBhbmQgdGhlIHVubG9jayByZXR1cm5lZCxcblx0XHQvLyBhbGxvd2luZyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBuZXdseSBjcmVhdGVkXG5cdFx0Ly8gZW1wdHkgZGF0YSBvYmplY3QuIEEgdmFsaWQgb3duZXIgb2JqZWN0IG11c3QgYmUgcHJvdmlkZWQuXG5cdFx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZVsgdGhpcy5rZXkoIG93bmVyICkgXTtcblxuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRjYWNoZSA6IGNhY2hlWyBrZXkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIHN0b3JlZDtcblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoKGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSApIHtcblxuXHRcdFx0c3RvcmVkID0gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblxuXHRcdFx0cmV0dXJuIHN0b3JlZCAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0c3RvcmVkIDogdGhpcy5nZXQoIG93bmVyLCBqUXVlcnkuY2FtZWxDYXNlKGtleSkgKTtcblx0XHR9XG5cblx0XHQvLyBbKl1XaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGNhbWVsLFxuXHRcdFx0dW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xuXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuY2FjaGVbIHVubG9jayBdID0ge307XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuXHRcdFx0XHRuYW1lID0ga2V5LmNvbmNhdCgga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjYW1lbCA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXHRcdFx0XHQvLyBUcnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvblxuXHRcdFx0XHRpZiAoIGtleSBpbiBjYWNoZSApIHtcblx0XHRcdFx0XHRuYW1lID0gWyBrZXksIGNhbWVsIF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0bmFtZSA9IGNhbWVsO1xuXHRcdFx0XHRcdG5hbWUgPSBuYW1lIGluIGNhY2hlID9cblx0XHRcdFx0XHRcdFsgbmFtZSBdIDogKCBuYW1lLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBuYW1lLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIG5hbWVbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHJldHVybiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoXG5cdFx0XHR0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXSB8fCB7fVxuXHRcdCk7XG5cdH0sXG5cdGRpc2NhcmQ6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHRpZiAoIG93bmVyWyB0aGlzLmV4cGFuZG8gXSApIHtcblx0XHRcdGRlbGV0ZSB0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXTtcblx0XHR9XG5cdH1cbn07XG52YXIgZGF0YV9wcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFfdXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJDFcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGRhdGEgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJmYWxzZVwiID8gZmFsc2UgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwibnVsbFwiID8gbnVsbCA6XG5cdFx0XHRcdFx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0XHRcdFx0XHQrZGF0YSArIFwiXCIgPT09IGRhdGEgPyArZGF0YSA6XG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XG5cdFx0XHRcdFx0ZGF0YTtcblx0XHRcdH0gY2F0Y2goIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFfdXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhX3VzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFfdXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhX3VzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YV9wcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFfcHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSg1KSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhX3ByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhLFxuXHRcdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGFzLWlzXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBjYW1lbGl6ZWRcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0sIGNhbWVsS2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGNhbWVsS2V5LCB1bmRlZmluZWQgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIEZpcnN0LCBhdHRlbXB0IHRvIHN0b3JlIGEgY29weSBvciByZWZlcmVuY2Ugb2YgYW55XG5cdFx0XHRcdC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cblx0XHRcdFx0dmFyIGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCB0aGlzLCBjYW1lbEtleSApO1xuXG5cdFx0XHRcdC8vIEZvciBIVE1MNSBkYXRhLSogYXR0cmlidXRlIGludGVyb3AsIHdlIGhhdmUgdG9cblx0XHRcdFx0Ly8gc3RvcmUgcHJvcGVydHkgbmFtZXMgd2l0aCBkYXNoZXMgaW4gYSBjYW1lbENhc2UgZm9ybS5cblx0XHRcdFx0Ly8gVGhpcyBtaWdodCBub3QgYXBwbHkgdG8gYWxsIHByb3BlcnRpZXMuLi4qXG5cdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGNhbWVsS2V5LCB2YWx1ZSApO1xuXG5cdFx0XHRcdC8vICouLi4gSW4gdGhlIGNhc2Ugb2YgcHJvcGVydGllcyB0aGF0IG1pZ2h0IF9hY3R1YWxseV9cblx0XHRcdFx0Ly8gaGF2ZSBkYXNoZXMsIHdlIG5lZWQgdG8gYWxzbyBzdG9yZSBhIGNvcHkgb2YgdGhhdFxuXHRcdFx0XHQvLyB1bmNoYW5nZWQgcHJvcGVydHkuXG5cdFx0XHRcdGlmICgga2V5LmluZGV4T2YoXCItXCIpICE9PSAtMSAmJiBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhX3VzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9KTtcblx0fVxufSk7XG5cblxualF1ZXJ5LmV4dGVuZCh7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoZGF0YSkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YV9wcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YV9wcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSlcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1swXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWzBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59KTtcbnZhciBwbnVtID0gKC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvKS5zb3VyY2U7XG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8ICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHR9O1xuXG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoL14oPzpjaGVja2JveHxyYWRpbykkL2kpO1xuXG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogU2FmYXJpPD01LjFcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xLCBBbmRyb2lkPDQuMlxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0pKCk7XG52YXIgc3RydW5kZWZpbmVkID0gdHlwZW9mIHVuZGVmaW5lZDtcblxuXG5cbnN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudSl8Y2xpY2svLFxuXHRyZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkkLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YV9wcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUpICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gc3RydW5kZWZpbmVkICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoe1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbihcIi5cIilcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHwgc3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YV9wcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhX3ByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsyXSAmJiBuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8IHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRlbGV0ZSBlbGVtRGF0YS5oYW5kbGU7XG5cdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBcImV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdChcIi5cIikgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoXCIuXCIpID49IDAgKSB7XG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdChcIi5cIik7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbihcIi5cIik7XG5cdFx0ZXZlbnQubmFtZXNwYWNlX3JlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKGN1ciA9IGV2ZW50UGF0aFtpKytdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YV9wcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmIGRhdGFfcHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBqUXVlcnkuYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCFzcGVjaWFsLl9kZWZhdWx0IHx8IHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSkgJiZcblx0XHRcdFx0alF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YV9wcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWzBdID0gZXZlbnQ7XG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAobWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoIChoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSkgJiYgIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQubmFtZXNwYWNlX3JlIHx8IGV2ZW50Lm5hbWVzcGFjZV9yZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9KS5oYW5kbGUgfHwgaGFuZGxlT2JqLmhhbmRsZXIgKVxuXHRcdFx0XHRcdFx0XHQuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKGV2ZW50LnJlc3VsdCA9IHJldCkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgbWF0Y2hlcywgc2VsLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApXG5cdFx0Ly8gQXZvaWQgbm9uLWxlZnQtY2xpY2sgYnViYmxpbmcgaW4gRmlyZWZveCAoIzM4NjEpXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJiAoIWV2ZW50LmJ1dHRvbiB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIpICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIuZGlzYWJsZWQgIT09IHRydWUgfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICkge1xuXHRcdFx0XHRcdG1hdGNoZXMgPSBbXTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID49IDAgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVzIH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0Ly8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcblx0cHJvcHM6IFwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIuc3BsaXQoXCIgXCIpLFxuXG5cdGZpeEhvb2tzOiB7fSxcblxuXHRrZXlIb29rczoge1xuXHRcdHByb3BzOiBcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdChcIiBcIiksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSBvcmlnaW5hbC5jaGFyQ29kZSAhPSBudWxsID8gb3JpZ2luYWwuY2hhckNvZGUgOiBvcmlnaW5hbC5rZXlDb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdG1vdXNlSG9va3M6IHtcblx0XHRwcm9wczogXCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIi5zcGxpdChcIiBcIiksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXHRcdFx0dmFyIGV2ZW50RG9jLCBkb2MsIGJvZHksXG5cdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbjtcblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxuXHRcdFx0aWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcblx0XHRcdFx0ZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0XHRib2R5ID0gZXZlbnREb2MuYm9keTtcblxuXHRcdFx0XHRldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggKyAoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XG5cdFx0XHRcdGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArICggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRUb3AgIHx8IGJvZHkgJiYgYm9keS5jbGllbnRUb3AgIHx8IDAgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdFx0Ly8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXRcblx0XHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9ICggYnV0dG9uICYgMSA/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgYSB3cml0YWJsZSBjb3B5IG9mIHRoZSBldmVudCBvYmplY3QgYW5kIG5vcm1hbGl6ZSBzb21lIHByb3BlcnRpZXNcblx0XHR2YXIgaSwgcHJvcCwgY29weSxcblx0XHRcdHR5cGUgPSBldmVudC50eXBlLFxuXHRcdFx0b3JpZ2luYWxFdmVudCA9IGV2ZW50LFxuXHRcdFx0Zml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTtcblxuXHRcdGlmICggIWZpeEhvb2sgKSB7XG5cdFx0XHR0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID1cblx0XHRcdFx0cm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDpcblx0XHRcdFx0cmtleUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMua2V5SG9va3MgOlxuXHRcdFx0XHR7fTtcblx0XHR9XG5cdFx0Y29weSA9IGZpeEhvb2sucHJvcHMgPyB0aGlzLnByb3BzLmNvbmNhdCggZml4SG9vay5wcm9wcyApIDogdGhpcy5wcm9wcztcblxuXHRcdGV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXG5cdFx0aSA9IGNvcHkubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0cHJvcCA9IGNvcHlbIGkgXTtcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQ29yZG92YSAyLjUgKFdlYktpdCkgKCMxMzI1NSlcblx0XHQvLyBBbGwgZXZlbnRzIHNob3VsZCBoYXZlIGEgdGFyZ2V0OyBDb3Jkb3ZhIGRldmljZXJlYWR5IGRvZXNuJ3Rcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBkb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wKywgQ2hyb21lPDI4XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHRpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmUuXG5cdFx0Ly8gRmFrZSBvcmlnaW5hbEV2ZW50IHRvIGF2b2lkIGRvbm9yJ3Mgc3RvcFByb3BhZ2F0aW9uLCBidXQgaWYgdGhlXG5cdFx0Ly8gc2ltdWxhdGVkIGV2ZW50IHByZXZlbnRzIGRlZmF1bHQgdGhlbiB3ZSBkbyB0aGUgc2FtZSBvbiB0aGUgZG9ub3IuXG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlLFxuXHRcdFx0XHRvcmlnaW5hbEV2ZW50OiB7fVxuXHRcdFx0fVxuXHRcdCk7XG5cdFx0aWYgKCBidWJibGUgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guY2FsbCggZWxlbSwgZSApO1xuXHRcdH1cblx0XHRpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUsIGZhbHNlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQpICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiBlLnByZXZlbnREZWZhdWx0ICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmIGUuc3RvcFByb3BhZ2F0aW9uICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTUrXG5qUXVlcnkuZWFjaCh7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSk7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3gsIENocm9tZSwgU2FmYXJpXG4vLyBDcmVhdGUgXCJidWJibGluZ1wiIGZvY3VzIGFuZCBibHVyIGV2ZW50c1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luQnViYmxlcyApIHtcblx0alF1ZXJ5LmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSwgdHJ1ZSApO1xuXHRcdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgLypJTlRFUk5BTCovIG9uZSApIHtcblx0XHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdFx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vbiggdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblx0XHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRcdGZuID0gZGF0YTtcblx0XHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggb25lID09PSAxICkge1xuXHRcdFx0b3JpZ0ZuID0gZm47XG5cdFx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHR9O1xuXHRcdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0XHR9KTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID8gaGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDogaGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbMF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59KTtcblxuXG52YXJcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLFxuXHRydGFnTmFtZSA9IC88KFtcXHc6XSspLyxcblx0cmh0bWwgPSAvPHwmIz9cXHcrOy8sXG5cdHJub0lubmVyaHRtbCA9IC88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJzY3JpcHRUeXBlID0gL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nLFxuXG5cdC8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG5cdHdyYXBNYXAgPSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHRcdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0XHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHRcdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0XHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0XHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cblx0fTtcblxuLy8gU3VwcG9ydDogSUU5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogMS54IGNvbXBhdGliaWxpdHlcbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XG5cblx0XHRlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIilbMF0gfHxcblx0XHRcdGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikgKSA6XG5cdFx0ZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT0gbnVsbCkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YV9wcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sIFwiZ2xvYmFsRXZhbFwiLCAhcmVmRWxlbWVudHMgfHwgZGF0YV9wcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YV9wcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YV9wcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhX3ByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhX3VzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhX3VzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YV91c2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblx0dmFyIHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHRjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgPyBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApIDpcblx0XHRcdFtdO1xuXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XG5cdFx0alF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICkgOlxuXHRcdHJldDtcbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cDovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRidWlsZEZyYWdtZW50OiBmdW5jdGlvbiggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiApIHtcblx0XHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRcdG5vZGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdCwgUGhhbnRvbUpTXG5cdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApO1xuXG5cdFx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBlbGVtLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXQsIFBoYW50b21KU1xuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdFx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IG5vZGVzWyBpKysgXSkgKSB7XG5cblx0XHRcdC8vICM0MDg3IC0gSWYgb3JpZ2luIGFuZCBkZXN0aW5hdGlvbiBlbGVtZW50cyBhcmUgdGhlIHNhbWUsIGFuZCB0aGlzIGlzXG5cdFx0XHQvLyB0aGF0IGVsZW1lbnQsIGRvIG5vdCBkbyBhbnl0aGluZ1xuXHRcdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApICE9PSAtMSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSB0bXBbIGorKyBdKSApIHtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZnJhZ21lbnQ7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsIGtleSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zWyBpIF0pICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0a2V5ID0gZWxlbVsgZGF0YV9wcml2LmV4cGFuZG8gXTtcblxuXHRcdFx0XHRpZiAoIGtleSAmJiAoZGF0YSA9IGRhdGFfcHJpdi5jYWNoZVsga2V5IF0pICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIGRhdGFfcHJpdi5jYWNoZVsga2V5IF0gKSB7XG5cdFx0XHRcdFx0XHQvLyBEaXNjYXJkIGFueSByZW1haW5pbmcgYHByaXZhdGVgIGRhdGFcblx0XHRcdFx0XHRcdGRlbGV0ZSBkYXRhX3ByaXYuY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGB1c2VyYCBkYXRhXG5cdFx0XHRkZWxldGUgZGF0YV91c2VyLmNhY2hlWyBlbGVtWyBkYXRhX3VzZXIuZXhwYW5kbyBdIF07XG5cdFx0fVxuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCBrZWVwRGF0YSAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGVsZW1zID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgdGhpcyApIDogdGhpcyxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoICFrZWVwRGF0YSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0gKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IChlbGVtID0gdGhpc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcmcgPSBhcmd1bWVudHNbIDAgXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRhcmcgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cblx0XHRcdGlmICggYXJnICkge1xuXHRcdFx0XHRhcmcucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBGb3JjZSByZW1vdmFsIGlmIHRoZXJlIHdhcyBubyBuZXcgY29udGVudCAoZS5nLiwgZnJvbSBlbXB0eSBhcmd1bWVudHMpXG5cdFx0cmV0dXJuIGFyZyAmJiAoYXJnLmxlbmd0aCB8fCBhcmcubm9kZVR5cGUpID8gdGhpcyA6IHRoaXMucmVtb3ZlKCk7XG5cdH0sXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdGRvbU1hbmlwOiBmdW5jdGlvbiggYXJncywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHRcdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2V0ID0gdGhpcyxcblx0XHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRcdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHRcdHZhciBzZWxmID0gc2V0LmVxKCBpbmRleCApO1xuXHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5kb21NYW5pcCggYXJncywgY2FsbGJhY2sgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICggbCApIHtcblx0XHRcdGZyYWdtZW50ID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIGFyZ3MsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgdGhpcyApO1xuXHRcdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGZpcnN0ICkge1xuXHRcdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdFxuXHRcdFx0XHRcdFx0XHQvLyBqUXVlcnkubWVyZ2UgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjYWxsYmFjay5jYWxsKCB0aGlzWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdFx0IWRhdGFfcHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiYgalF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Ncblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSk7XG5cblxudmFyIGlmcmFtZSxcblx0ZWxlbWRpc3BsYXkgPSB7fTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBub2RlTmFtZSBvZiB0aGUgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcbiAqL1xuLy8gQ2FsbGVkIG9ubHkgZnJvbSB3aXRoaW4gZGVmYXVsdERpc3BsYXlcbmZ1bmN0aW9uIGFjdHVhbERpc3BsYXkoIG5hbWUsIGRvYyApIHtcblx0dmFyIHN0eWxlLFxuXHRcdGVsZW0gPSBqUXVlcnkoIGRvYy5jcmVhdGVFbGVtZW50KCBuYW1lICkgKS5hcHBlbmRUbyggZG9jLmJvZHkgKSxcblxuXHRcdC8vIGdldERlZmF1bHRDb21wdXRlZFN0eWxlIG1pZ2h0IGJlIHJlbGlhYmx5IHVzZWQgb25seSBvbiBhdHRhY2hlZCBlbGVtZW50XG5cdFx0ZGlzcGxheSA9IHdpbmRvdy5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSAmJiAoIHN0eWxlID0gd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlKCBlbGVtWyAwIF0gKSApID9cblxuXHRcdFx0Ly8gVXNlIG9mIHRoaXMgbWV0aG9kIGlzIGEgdGVtcG9yYXJ5IGZpeCAobW9yZSBsaWtlIG9wdGltaXphdGlvbikgdW50aWwgc29tZXRoaW5nIGJldHRlciBjb21lcyBhbG9uZyxcblx0XHRcdC8vIHNpbmNlIGl0IHdhcyByZW1vdmVkIGZyb20gc3BlY2lmaWNhdGlvbiBhbmQgc3VwcG9ydGVkIG9ubHkgaW4gRkZcblx0XHRcdHN0eWxlLmRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtWyAwIF0sIFwiZGlzcGxheVwiICk7XG5cblx0Ly8gV2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YSBzdG9yZWQgb24gdGhlIGVsZW1lbnQsXG5cdC8vIHNvIHVzZSBcImRldGFjaFwiIG1ldGhvZCBhcyBmYXN0IHdheSB0byBnZXQgcmlkIG9mIHRoZSBlbGVtZW50XG5cdGVsZW0uZGV0YWNoKCk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbi8qKlxuICogVHJ5IHRvIGRldGVybWluZSB0aGUgZGVmYXVsdCBkaXNwbGF5IHZhbHVlIG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBub2RlTmFtZVxuICovXG5mdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7XG5cdHZhciBkb2MgPSBkb2N1bWVudCxcblx0XHRkaXNwbGF5ID0gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07XG5cblx0aWYgKCAhZGlzcGxheSApIHtcblx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xuXG5cdFx0Ly8gSWYgdGhlIHNpbXBsZSB3YXkgZmFpbHMsIHJlYWQgZnJvbSBpbnNpZGUgYW4gaWZyYW1lXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiB8fCAhZGlzcGxheSApIHtcblxuXHRcdFx0Ly8gVXNlIHRoZSBhbHJlYWR5LWNyZWF0ZWQgaWZyYW1lIGlmIHBvc3NpYmxlXG5cdFx0XHRpZnJhbWUgPSAoaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSkuYXBwZW5kVG8oIGRvYy5kb2N1bWVudEVsZW1lbnQgKTtcblxuXHRcdFx0Ly8gQWx3YXlzIHdyaXRlIGEgbmV3IEhUTUwgc2tlbGV0b24gc28gV2Via2l0IGFuZCBGaXJlZm94IGRvbid0IGNob2tlIG9uIHJldXNlXG5cdFx0XHRkb2MgPSBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQ7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0XHRkb2Mud3JpdGUoKTtcblx0XHRcdGRvYy5jbG9zZSgpO1xuXG5cdFx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xuXHRcdFx0aWZyYW1lLmRldGFjaCgpO1xuXHRcdH1cblxuXHRcdC8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheVxuXHRcdGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTtcblx0fVxuXG5cdHJldHVybiBkaXNwbGF5O1xufVxudmFyIHJtYXJnaW4gPSAoL15tYXJnaW4vKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHRpZiAoIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5vcGVuZXIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpICgjMTI1MzcpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cdH1cblxuXHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgPCA2XG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIGlPUyA8IDYgKGF0IGxlYXN0KSByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIGEgbGFyZ2VyIHNldCBvZiB2YWx1ZXMsIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHNcblx0XHQvLyB0aGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6IGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICh0aGlzLmdldCA9IGhvb2tGbikuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCxcblx0XHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O21hcmdpbi10b3A6MXB4O1wiICtcblx0XHRcInBvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKSB7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbi10b3A6MSU7dG9wOjElO1wiICtcblx0XHRcdFwiYm9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo0cHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYsIG51bGwgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY0VsZW0ucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogbm9kZS5qcyBqc2RvbVxuXHQvLyBEb24ndCBhc3N1bWUgdGhhdCBnZXRDb21wdXRlZFN0eWxlIGlzIGEgcHJvcGVydHkgb2YgdGhlIGdsb2JhbCBvYmplY3Rcblx0aWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBUaGlzIHRlc3QgaXMgZXhlY3V0ZWQgb25seSBvbmNlIGJ1dCB3ZSBzdGlsbCBkbyBtZW1vaXppbmdcblx0XHRcdFx0Ly8gc2luY2Ugd2UgY2FuIHVzZSB0aGUgYm94U2l6aW5nUmVsaWFibGUgcHJlLWNvbXB1dGluZy5cblx0XHRcdFx0Ly8gTm8gbmVlZCB0byBjaGVjayBpZiB0aGUgdGVzdCB3YXMgYWxyZWFkeSBwZXJmb3JtZWQsIHRob3VnaC5cblx0XHRcdFx0Y29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpO1xuXHRcdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHRcdH0sXG5cdFx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdFx0fSxcblx0XHRcdHJlbGlhYmxlTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcblx0XHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXG5cdFx0XHRcdC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodFxuXHRcdFx0XHQvLyBUaGlzIHN1cHBvcnQgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBvbmNlIHNvIG5vIG1lbW9pemluZyBpcyBuZWVkZWQuXG5cdFx0XHRcdHZhciByZXQsXG5cdFx0XHRcdFx0bWFyZ2luRGl2ID0gZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyOyBwYWRkaW5nXG5cdFx0XHRcdG1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcblx0XHRcdFx0XHRcImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjBcIjtcblx0XHRcdFx0bWFyZ2luRGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gbWFyZ2luRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XG5cdFx0XHRcdGRpdi5zdHlsZS53aWR0aCA9IFwiMXB4XCI7XG5cdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0XHRcdHJldCA9ICFwYXJzZUZsb2F0KCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggbWFyZ2luRGl2LCBudWxsICkubWFyZ2luUmlnaHQgKTtcblxuXHRcdFx0XHRkb2NFbGVtLnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0XHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBtYXJnaW5EaXYgKTtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KSgpO1xuXG5cbi8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMuXG5qUXVlcnkuc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhclxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRybnVtc3BsaXQgPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKC4qKSRcIiwgXCJpXCIgKSxcblx0cnJlbE51bSA9IG5ldyBSZWdFeHAoIFwiXihbKy1dKT0oXCIgKyBwbnVtICsgXCIpXCIsIFwiaVwiICksXG5cblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBzdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLFxuXHRcdG9yaWdOYW1lID0gbmFtZSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3JpZ05hbWU7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cdHZhciBtYXRjaGVzID0gcm51bXNwbGl0LmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAxIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAyIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdFx0NCA6XG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXG5cdFx0dmFsID0gMDtcblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2Njhcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3Nhcnlcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QodmFsKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblx0XHRcdC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcblx0XHRcdC8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3Rcblx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZVxuXHRcdFx0Ly8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXNcblx0XHRcdC8vIGZvciBzdWNoIGFuIGVsZW1lbnRcblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBkZWZhdWx0RGlzcGxheShlbGVtLm5vZGVOYW1lKSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xuXG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XG5cdFx0XHRcdGRhdGFfcHJpdi5zZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBoaWRkZW4gPyBkaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXG5cdC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCBcIlwiIDogXCJub25lXCI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG9yaWdOYW1lICkgKTtcblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKHJldCA9IHJyZWxOdW0uZXhlYyggdmFsdWUgKSkgKSB7XG5cdFx0XHRcdHZhbHVlID0gKCByZXRbMV0gKyAxICkgKiByZXRbMl0gKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTtcblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciwgYWRkICdweCcgdG8gdGhlIChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gKSB7XG5cdFx0XHRcdHZhbHVlICs9IFwicHhcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCAodmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIGVsZW0uc3R5bGUsIG9yaWdOYW1lICkgKTtcblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgalF1ZXJ5LmlzTnVtZXJpYyggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJiBlbGVtLm9mZnNldFdpZHRoID09PSAwID9cblx0XHRcdFx0XHRqUXVlcnkuc3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgZXh0cmEgP1xuXHRcdFx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KSA6IDBcblx0XHRcdCk7XG5cdFx0fVxuXHR9O1xufSk7XG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCh7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdChcIiBcIikgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW4oIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgXCJzd2luZ1wiO1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJlxuXHRcdFx0XHQoIXR3ZWVuLmVsZW0uc3R5bGUgfHwgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwpICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLnN0eWxlICYmICggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8IGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUU5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9XG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBDb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgdGltZXJJZCxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJmeG51bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICksXG5cdHJydW4gPSAvcXVldWVIb29rcyQvLFxuXHRhbmltYXRpb25QcmVmaWx0ZXJzID0gWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cdHR3ZWVuZXJzID0ge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICksXG5cdFx0XHRcdHRhcmdldCA9IHR3ZWVuLmN1cigpLFxuXHRcdFx0XHRwYXJ0cyA9IHJmeG51bS5leGVjKCB2YWx1ZSApLFxuXHRcdFx0XHR1bml0ID0gcGFydHMgJiYgcGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdFx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdFx0XHRzdGFydCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiArdGFyZ2V0ICkgJiZcblx0XHRcdFx0XHRyZnhudW0uZXhlYyggalF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgcHJvcCApICksXG5cdFx0XHRcdHNjYWxlID0gMSxcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDIwO1xuXG5cdFx0XHRpZiAoIHN0YXJ0ICYmIHN0YXJ0WyAzIF0gIT09IHVuaXQgKSB7XG5cdFx0XHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHRcdFx0dW5pdCA9IHVuaXQgfHwgc3RhcnRbIDMgXTtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0XHRcdHBhcnRzID0gcGFydHMgfHwgW107XG5cblx0XHRcdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRcdFx0c3RhcnQgPSArdGFyZ2V0IHx8IDE7XG5cblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRcdFx0c3RhcnQgPSBzdGFydCAvIHNjYWxlO1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7XG5cblx0XHRcdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKCksXG5cdFx0XHRcdC8vIGJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2hcblx0XHRcdFx0fSB3aGlsZSAoIHNjYWxlICE9PSAoc2NhbGUgPSB0d2Vlbi5jdXIoKSAvIHRhcmdldCkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVwZGF0ZSB0d2VlbiBwcm9wZXJ0aWVzXG5cdFx0XHRpZiAoIHBhcnRzICkge1xuXHRcdFx0XHRzdGFydCA9IHR3ZWVuLnN0YXJ0ID0gK3N0YXJ0IHx8ICt0YXJnZXQgfHwgMDtcblx0XHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHRcdC8vIElmIGEgKz0vLT0gdG9rZW4gd2FzIHByb3ZpZGVkLCB3ZSdyZSBkb2luZyBhIHJlbGF0aXZlIGFuaW1hdGlvblxuXHRcdFx0XHR0d2Vlbi5lbmQgPSBwYXJ0c1sgMSBdID9cblx0XHRcdFx0XHRzdGFydCArICggcGFydHNbIDEgXSArIDEgKSAqIHBhcnRzWyAyIF0gOlxuXHRcdFx0XHRcdCtwYXJ0c1sgMiBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH07XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9KTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCB0d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICh0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIHR3ZWVuLCBob29rcywgb2xkZmlyZSwgZGlzcGxheSwgY2hlY2tEaXNwbGF5LFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIEhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gSGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3Ncblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBub3RoaW5nIHNuZWFrcyBvdXRcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFOS0xMCBkbyBub3Rcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcblx0XHQvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gU2V0IGRpc3BsYXkgcHJvcGVydHkgdG8gaW5saW5lLWJsb2NrIGZvciBoZWlnaHQvd2lkdGhcblx0XHQvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cblx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cblx0XHRcdGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICkgfHwgZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXk7XG5cblx0XHRpZiAoIGNoZWNrRGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBzaG93L2hpZGUgcGFzc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGRhdGFTaG93IGxlZnQgb3ZlciBmcm9tIGEgc3RvcHBlZCBoaWRlIG9yIHNob3cgYW5kIHdlIGFyZSBnb2luZyB0byBwcm9jZWVkIHdpdGggc2hvdywgd2Ugc2hvdWxkIHByZXRlbmQgdG8gYmUgaGlkZGVuXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXG5cdFx0Ly8gQW55IG5vbi1meCB2YWx1ZSBzdG9wcyB1cyBmcm9tIHJlc3RvcmluZyB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhU2hvdyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHt9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgc3RhdGUgaWYgaXRzIHRvZ2dsZSAtIGVuYWJsZXMgLnN0b3AoKS50b2dnbGUoKSB0byBcInJldmVyc2VcIlxuXHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHR9XG5cdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRqUXVlcnkoIGVsZW0gKS5zaG93KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuaGlkZSgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwcm9wO1xuXG5cdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0dHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblxuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdFx0dHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdFx0dHdlZW4uc3RhcnQgPSBwcm9wID09PSBcIndpZHRoXCIgfHwgcHJvcCA9PT0gXCJoZWlnaHRcIiA/IDEgOiAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCAoZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSkgPT09IFwiaW5saW5lXCIgKSB7XG5cdFx0c3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGFuaW1hdGlvblByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9KSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSk7XG5cblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7IHNwZWNpYWxFYXNpbmc6IHt9IH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9KSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IGFuaW1hdGlvblByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9KVxuXHQpO1xuXG5cdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5zcGxpdChcIiBcIik7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdHR3ZWVuZXJzWyBwcm9wIF0gPSB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0dHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRhbmltYXRpb25QcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuaW1hdGlvblByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0pO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/IG9wdC5kdXJhdGlvbiA6XG5cdFx0b3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgPyBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbiApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFfcHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmICh0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlKSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKHtcblx0c2xpZGVEb3duOiBnZW5GeChcInNob3dcIiksXG5cdHNsaWRlVXA6IGdlbkZ4KFwiaGlkZVwiKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0pO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5cbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoICF0aW1lcklkICkge1xuXHRcdHRpbWVySWQgPSBzZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRjbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cdHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSk7XG59O1xuXG5cbihmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBpT1M8PTUuMSwgQW5kcm9pZDw9NC4yK1xuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8PTIuM1xuXHQvLyBPcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZSBpbmNvcnJlY3RseSBtYXJrZWQgYXMgZGlzYWJsZWRcblx0c2VsZWN0LmRpc2FibGVkID0gdHJ1ZTtcblx0c3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59KSgpO1xuXG5cbnZhciBub2RlSG9vaywgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBkb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGF0dHJpYnV0ZXMgYXJlIGxvd2VyY2FzZVxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiBub2RlSG9vayApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID9cblx0XHRcdFx0dW5kZWZpbmVkIDpcblx0XHRcdFx0cmV0O1xuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsIHByb3BOYW1lLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAobmFtZSA9IGF0dHJOYW1lc1tpKytdKSApIHtcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRcdC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXG5cdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGU7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59KTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fSxcblxuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsIG5vdHhtbCxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG5vdHhtbCA9IG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKTtcblxuXHRcdGlmICggbm90eG1sICkge1xuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyZXQgOlxuXHRcdFx0XHQoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCA/XG5cdFx0XHRcdHJldCA6XG5cdFx0XHRcdGVsZW1bIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmhhc0F0dHJpYnV0ZSggXCJ0YWJpbmRleFwiICkgfHwgcmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHwgZWxlbS5ocmVmID9cblx0XHRcdFx0XHRlbGVtLnRhYkluZGV4IDpcblx0XHRcdFx0XHQtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59KTtcblxuXG5cblxudmFyIHJjbGFzcyA9IC9bXFx0XFxyXFxuXFxmXS9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdHByb2NlZWQgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIHByb2NlZWQgKSB7XG5cdFx0XHQvLyBUaGUgZGlzanVuY3Rpb24gaGVyZSBpcyBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIHJlbW92ZUNsYXNzKVxuXHRcdFx0Y2xhc3NlcyA9ICggdmFsdWUgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF07XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBlbGVtLmNsYXNzTmFtZSA/XG5cdFx0XHRcdFx0KCBcIiBcIiArIGVsZW0uY2xhc3NOYW1lICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICkgOlxuXHRcdFx0XHRcdFwiIFwiXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBvbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0cHJvY2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGlmICggcHJvY2VlZCApIHtcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcblx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPj0gMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSB2YWx1ZSA/IGpRdWVyeS50cmltKCBjdXIgKSA6IFwiXCI7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKCB2YWx1ZS5jYWxsKHRoaXMsIGksIHRoaXMuY2xhc3NOYW1lLCBzdGF0ZVZhbCksIHN0YXRlVmFsICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHR2YXIgY2xhc3NOYW1lLFxuXHRcdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdKSApIHtcblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gc3RydW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuY2xhc3NOYW1lICkge1xuXHRcdFx0XHRcdC8vIHN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhX3ByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgdGhpcy5jbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0dGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgPyBcIlwiIDogZGF0YV9wcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGlmICggdGhpc1tpXS5ub2RlVHlwZSA9PT0gMSAmJiAoXCIgXCIgKyB0aGlzW2ldLmNsYXNzTmFtZSArIFwiIFwiKS5yZXBsYWNlKHJjbGFzcywgXCIgXCIpLmluZGV4T2YoIGNsYXNzTmFtZSApID49IDAgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1swXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdHJldC5yZXBsYWNlKHJyZXR1cm4sIFwiXCIpIDpcblx0XHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0XHRyZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdGpRdWVyeS50cmltKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xuXHRcdFx0XHRcdFx0bWF4IDpcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIElFNi05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/ICFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PT0gbnVsbCApICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8ICFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cdFx0XHRcdFx0aWYgKCAob3B0aW9uLnNlbGVjdGVkID0galF1ZXJ5LmluQXJyYXkoIG9wdGlvbi52YWx1ZSwgdmFsdWVzICkgPj0gMCkgKSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaChbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlICkgPj0gMCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxualF1ZXJ5LmVhY2goIChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiKS5zcGxpdChcIiBcIiksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH0sXG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyB0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDogdGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0pO1xuXG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICgvXFw/Lyk7XG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuLy8gV29ya2Fyb3VuZCBmYWlsdXJlIHRvIHN0cmluZy1jYXN0IG51bGwgaW5wdXRcbmpRdWVyeS5wYXJzZUpTT04gPSBmdW5jdGlvbiggZGF0YSApIHtcblx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKyBcIlwiICk7XG59O1xuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCB0bXA7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0dHJ5IHtcblx0XHR0bXAgPSBuZXcgRE9NUGFyc2VyKCk7XG5cdFx0eG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyaGFzaCA9IC8jLiokLyxcblx0cnRzID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXHRydXJsID0gL14oW1xcdy4rLV0rOikoPzpcXC9cXC8oPzpbXlxcLz8jXSpAfCkoW15cXC8/IzpdKikoPzo6KFxcZCspfCl8KS8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBEb2N1bWVudCBsb2NhdGlvblxuXHRhamF4TG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24uaHJlZixcblxuXHQvLyBTZWdtZW50IGxvY2F0aW9uIGludG8gcGFydHNcblx0YWpheExvY1BhcnRzID0gcnVybC5leGVjKCBhamF4TG9jYXRpb24udG9Mb3dlckNhc2UoKSApIHx8IFtdO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoZGF0YVR5cGUgPSBkYXRhVHlwZXNbaSsrXSkgKSB7XG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbMF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiYgIXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoZGVlcCA9IHt9KSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWzBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgc1sgXCJ0aHJvd3NcIiBdICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHsgc3RhdGU6IFwicGFyc2VyZXJyb3JcIiwgZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50IH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBhamF4TG9jYXRpb24sXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBhamF4TG9jUGFydHNbIDEgXSApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL3htbC8sXG5cdFx0XHRodG1sOiAvaHRtbC8sXG5cdFx0XHRqc29uOiAvanNvbi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXHRcdFx0Ly8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzXG5cdFx0XHRwYXJ0cyxcblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiYgKCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXHRcdFx0Ly8gVGhlIGpxWEhSIHN0YXRlXG5cdFx0XHRzdGF0ZSA9IDAsXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApLmNvbXBsZXRlID0gY29tcGxldGVEZWZlcnJlZC5hZGQ7XG5cdFx0anFYSFIuc3VjY2VzcyA9IGpxWEhSLmRvbmU7XG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xuXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgYWpheExvY2F0aW9uICkgKyBcIlwiICkucmVwbGFjZSggcmhhc2gsIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgYWpheExvY1BhcnRzWyAxIF0gKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHdlIGhhdmUgYSBwcm90b2NvbDpob3N0OnBvcnQgbWlzbWF0Y2hcblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7XG5cdFx0XHRzLmNyb3NzRG9tYWluID0gISEoIHBhcnRzICYmXG5cdFx0XHRcdCggcGFydHNbIDEgXSAhPT0gYWpheExvY1BhcnRzWyAxIF0gfHwgcGFydHNbIDIgXSAhPT0gYWpheExvY1BhcnRzWyAyIF0gfHxcblx0XHRcdFx0XHQoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSAhPT1cblx0XHRcdFx0XHRcdCggYWpheExvY1BhcnRzWyAzIF0gfHwgKCBhamF4TG9jUGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgKVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHRjYWNoZVVSTCA9IHMudXJsO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcblx0XHRcdFx0XHRjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgbm9uY2UrKyApIDpcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcblx0XHRcdFx0XHRjYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyBub25jZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gKyAoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJiAoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Zm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KFwidGltZW91dFwiKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHN0YXRlID0gMTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0Ly8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0XHQvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2Vcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gQ2FsbGVkIG9uY2Vcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XG5cdFx0XHRzdGF0ZSA9IDI7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkuYWpheCh7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSk7XG5cdH07XG59KTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdHVybDogdXJsLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9KTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbC5jYWxsKHRoaXMsIGkpICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9KS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKHRoaXMsIGkpICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwodGhpcywgaSkgOiBodG1sICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0XHR9XG5cdFx0fSkuZW5kKCk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcblx0cmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtLm9mZnNldEhlaWdodCA8PSAwO1xufTtcbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuKCBlbGVtICk7XG59O1xuXG5cblxuXG52YXIgcjIwID0gLyUyMC9nLFxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgPyBpIDogXCJcIiApICsgXCJdXCIsIHYsIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcblx0XHRcdHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogKCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci5cblx0aWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0pO1xuXG5cdH0gZWxzZSB7XG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSlcblx0XHQuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9KVxuXHRcdC5tYXAoZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdHJldHVybiB2YWwgPT0gbnVsbCA/XG5cdFx0XHRcdG51bGwgOlxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9KS5nZXQoKTtcblx0fVxufSk7XG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2goIGUgKSB7fVxufTtcblxudmFyIHhocklkID0gMCxcblx0eGhyQ2FsbGJhY2tzID0ge30sXG5cdHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cdFx0Ly8gZmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gT3BlbiByZXF1ZXN0cyBtdXN0IGJlIG1hbnVhbGx5IGFib3J0ZWQgb24gdW5sb2FkICgjNTI4MClcbi8vIFNlZSBodHRwczovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9rYi8yODU2NzQ2IGZvciBtb3JlIGluZm9cbmlmICggd2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHR3aW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICggdmFyIGtleSBpbiB4aHJDYWxsYmFja3MgKSB7XG5cdFx0XHR4aHJDYWxsYmFja3NbIGtleSBdKCk7XG5cdFx0fVxuXHR9KTtcbn1cblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKSxcblx0XHRcdFx0XHRpZCA9ICsreGhySWQ7XG5cblx0XHRcdFx0eGhyLm9wZW4oIG9wdGlvbnMudHlwZSwgb3B0aW9ucy51cmwsIG9wdGlvbnMuYXN5bmMsIG9wdGlvbnMudXNlcm5hbWUsIG9wdGlvbnMucGFzc3dvcmQgKTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIHhockNhbGxiYWNrc1sgaWQgXTtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBmaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEFjY2Vzc2luZyBiaW5hcnktZGF0YSByZXNwb25zZVRleHQgdGhyb3dzIGFuIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gKCMxMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ID09PSBcInN0cmluZ1wiID8ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0ZXh0OiB4aHIucmVzcG9uc2VUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHR9IDogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0eGhyLm9uZXJyb3IgPSBjYWxsYmFjayhcImVycm9yXCIpO1xuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSB4aHJDYWxsYmFja3NbIGlkIF0gPSBjYWxsYmFjayhcImFib3J0XCIpO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSk7XG5cblxuXG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvKD86amF2YXxlY21hKXNjcmlwdC9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0pO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KFwiPHNjcmlwdD5cIikucHJvcCh7XG5cdFx0XHRcdFx0YXN5bmM6IHRydWUsXG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoe1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0pO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmICEoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgcmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIGZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBSZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXHRcdFx0XHQvLyBtYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIHNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSk7XG5cblxuXG5cbi8vIGRhdGE6IHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0dmFyIHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApLFxuXHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsxXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZFxudmFyIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQ7XG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdGlmICggdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIiAmJiBfbG9hZCApIHtcblx0XHRyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9XG5cblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZihcIiBcIik7XG5cblx0aWYgKCBvZmYgPj0gMCApIHtcblx0XHRzZWxlY3RvciA9IGpRdWVyeS50cmltKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIGlmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWRcblx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9KS5kb25lKGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KFwiPGRpdj5cIikuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0fSkuY29tcGxldGUoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBjYWxsYmFjaywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFsgXCJhamF4U3RhcnRcIiwgXCJhamF4U3RvcFwiLCBcImFqYXhDb21wbGV0ZVwiLCBcImFqYXhFcnJvclwiLCBcImFqYXhTdWNjZXNzXCIsIFwiYWpheFNlbmRcIiBdLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59KTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9KS5sZW5ndGg7XG59O1xuXG5cblxuXG52YXIgZG9jRWxlbSA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbi8qKlxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoXCJhdXRvXCIpID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgY3VyT2Zmc2V0ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcblxuXHRcdGlmICggIWRvYyApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xuXHRcdFx0cmV0dXJuIGJveDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBCbGFja0JlcnJ5IDUsIGlPUyAzIChvcmlnaW5hbCBpUGhvbmUpXG5cdFx0Ly8gSWYgd2UgZG9uJ3QgaGF2ZSBnQkNSLCBqdXN0IHVzZSAwLDAgcmF0aGVyIHRoYW4gZXJyb3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gc3RydW5kZWZpbmVkICkge1xuXHRcdFx0Ym94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR9XG5cdFx0d2luID0gZ2V0V2luZG93KCBkb2MgKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBib3gudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRsZWZ0OiBib3gubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdH07XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50LCBcImh0bWxcIiApICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xuXHRcdH0pO1xuXHR9XG59KTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbmRvdy5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCwgbnVsbCApO1xuXHR9O1xufSk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaTw3KywgQ2hyb21lPDM3K1xuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MjgwXG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHRcdC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlXG5cdFx0XHRcdFx0Ly8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOlxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApO1xuXHRcdH07XG5cdH0pO1xufSk7XG5cblxuLy8gVGhlIG51bWJlciBvZiBlbGVtZW50cyBjb250YWluZWQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXRcbmpRdWVyeS5mbi5zaXplID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLmxlbmd0aDtcbn07XG5cbmpRdWVyeS5mbi5hbmRTZWxmID0galF1ZXJ5LmZuLmFkZEJhY2s7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSk7XG59XG5cblxuXG5cbnZhclxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gc3RydW5kZWZpbmVkICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG5cbn0pKTtcbiIsIi8qKlxuICogd2hhdC1pbnB1dCAtIEEgZ2xvYmFsIHV0aWxpdHkgZm9yIHRyYWNraW5nIHRoZSBjdXJyZW50IGlucHV0IG1ldGhvZCAobW91c2UsIGtleWJvYXJkIG9yIHRvdWNoKS5cbiAqIEB2ZXJzaW9uIHY0LjEuMVxuICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3RlbjFzZXZlbi93aGF0LWlucHV0XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJ3aGF0SW5wdXRcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wid2hhdElucHV0XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIndoYXRJbnB1dFwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG5cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG5cblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgLypcblx0ICAgKiB2YXJpYWJsZXNcblx0ICAgKi9cblxuXHQgIC8vIGNhY2hlIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuXHQgIHZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdCAgLy8gbGFzdCB1c2VkIGlucHV0IHR5cGVcblx0ICB2YXIgY3VycmVudElucHV0ID0gJ2luaXRpYWwnO1xuXG5cdCAgLy8gbGFzdCB1c2VkIGlucHV0IGludGVudFxuXHQgIHZhciBjdXJyZW50SW50ZW50ID0gbnVsbDtcblxuXHQgIC8vIGZvcm0gaW5wdXQgdHlwZXNcblx0ICB2YXIgZm9ybUlucHV0cyA9IFsnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJ107XG5cblx0ICAvLyBsaXN0IG9mIG1vZGlmaWVyIGtleXMgY29tbW9ubHkgdXNlZCB3aXRoIHRoZSBtb3VzZSBhbmRcblx0ICAvLyBjYW4gYmUgc2FmZWx5IGlnbm9yZWQgdG8gcHJldmVudCBmYWxzZSBrZXlib2FyZCBkZXRlY3Rpb25cblx0ICB2YXIgaWdub3JlTWFwID0gWzE2LCAvLyBzaGlmdFxuXHQgIDE3LCAvLyBjb250cm9sXG5cdCAgMTgsIC8vIGFsdFxuXHQgIDkxLCAvLyBXaW5kb3dzIGtleSAvIGxlZnQgQXBwbGUgY21kXG5cdCAgOTMgLy8gV2luZG93cyBtZW51IC8gcmlnaHQgQXBwbGUgY21kXG5cdCAgXTtcblxuXHQgIC8vIG1hcHBpbmcgb2YgZXZlbnRzIHRvIGlucHV0IHR5cGVzXG5cdCAgdmFyIGlucHV0TWFwID0ge1xuXHQgICAgJ2tleXVwJzogJ2tleWJvYXJkJyxcblx0ICAgICdtb3VzZWRvd24nOiAnbW91c2UnLFxuXHQgICAgJ21vdXNlbW92ZSc6ICdtb3VzZScsXG5cdCAgICAnTVNQb2ludGVyRG93bic6ICdwb2ludGVyJyxcblx0ICAgICdNU1BvaW50ZXJNb3ZlJzogJ3BvaW50ZXInLFxuXHQgICAgJ3BvaW50ZXJkb3duJzogJ3BvaW50ZXInLFxuXHQgICAgJ3BvaW50ZXJtb3ZlJzogJ3BvaW50ZXInLFxuXHQgICAgJ3RvdWNoc3RhcnQnOiAndG91Y2gnXG5cdCAgfTtcblxuXHQgIC8vIGFycmF5IG9mIGFsbCB1c2VkIGlucHV0IHR5cGVzXG5cdCAgdmFyIGlucHV0VHlwZXMgPSBbXTtcblxuXHQgIC8vIGJvb2xlYW46IHRydWUgaWYgdG91Y2ggYnVmZmVyIGlzIGFjdGl2ZVxuXHQgIHZhciBpc0J1ZmZlcmluZyA9IGZhbHNlO1xuXG5cdCAgLy8gYm9vbGVhbjogdHJ1ZSBpZiB0aGUgcGFnZSBpcyBiZWluZyBzY3JvbGxlZFxuXHQgIHZhciBpc1Njcm9sbGluZyA9IGZhbHNlO1xuXG5cdCAgLy8gc3RvcmUgY3VycmVudCBtb3VzZSBwb3NpdGlvblxuXHQgIHZhciBtb3VzZVBvcyA9IHtcblx0ICAgICd4JzogbnVsbCxcblx0ICAgICd5JzogbnVsbFxuXHQgIH07XG5cblx0ICAvLyBtYXAgb2YgSUUgMTAgcG9pbnRlciBldmVudHNcblx0ICB2YXIgcG9pbnRlck1hcCA9IHtcblx0ICAgIDI6ICd0b3VjaCcsXG5cdCAgICAzOiAndG91Y2gnLCAvLyB0cmVhdCBwZW4gbGlrZSB0b3VjaFxuXHQgICAgNDogJ21vdXNlJ1xuXHQgIH07XG5cblx0ICAvKlxuXHQgICAqIHNldCB1cFxuXHQgICAqL1xuXG5cdCAgdmFyIHNldFVwID0gZnVuY3Rpb24gc2V0VXAoKSB7XG5cdCAgICAvLyBhZGQgY29ycmVjdCBtb3VzZSB3aGVlbCBldmVudCBtYXBwaW5nIHRvIGBpbnB1dE1hcGBcblx0ICAgIGlucHV0TWFwW2RldGVjdFdoZWVsKCldID0gJ21vdXNlJztcblxuXHQgICAgYWRkTGlzdGVuZXJzKCk7XG5cdCAgICBzZXRJbnB1dCgpO1xuXHQgIH07XG5cblx0ICAvKlxuXHQgICAqIGV2ZW50c1xuXHQgICAqL1xuXG5cdCAgdmFyIGFkZExpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZExpc3RlbmVycygpIHtcblx0ICAgIC8vIGBwb2ludGVybW92ZWAsIGBNU1BvaW50ZXJNb3ZlYCwgYG1vdXNlbW92ZWAgYW5kIG1vdXNlIHdoZWVsIGV2ZW50IGJpbmRpbmdcblx0ICAgIC8vIGNhbiBvbmx5IGRlbW9uc3RyYXRlIHBvdGVudGlhbCwgYnV0IG5vdCBhY3R1YWwsIGludGVyYWN0aW9uXG5cdCAgICAvLyBhbmQgYXJlIHRyZWF0ZWQgc2VwYXJhdGVseVxuXG5cdCAgICAvLyBwb2ludGVyIGV2ZW50cyAobW91c2UsIHBlbiwgdG91Y2gpXG5cdCAgICBpZiAod2luZG93LlBvaW50ZXJFdmVudCkge1xuXHQgICAgICBkb2NFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdXBkYXRlSW5wdXQpO1xuXHQgICAgICBkb2NFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgc2V0SW50ZW50KTtcblx0ICAgIH0gZWxzZSBpZiAod2luZG93Lk1TUG9pbnRlckV2ZW50KSB7XG5cdCAgICAgIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyRG93bicsIHVwZGF0ZUlucHV0KTtcblx0ICAgICAgZG9jRWxlbS5hZGRFdmVudExpc3RlbmVyKCdNU1BvaW50ZXJNb3ZlJywgc2V0SW50ZW50KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIG1vdXNlIGV2ZW50c1xuXHQgICAgICBkb2NFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHVwZGF0ZUlucHV0KTtcblx0ICAgICAgZG9jRWxlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzZXRJbnRlbnQpO1xuXG5cdCAgICAgIC8vIHRvdWNoIGV2ZW50c1xuXHQgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB7XG5cdCAgICAgICAgZG9jRWxlbS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG91Y2hCdWZmZXIpO1xuXHQgICAgICAgIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0b3VjaEJ1ZmZlcik7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgLy8gbW91c2Ugd2hlZWxcblx0ICAgIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcihkZXRlY3RXaGVlbCgpLCBzZXRJbnRlbnQpO1xuXG5cdCAgICAvLyBrZXlib2FyZCBldmVudHNcblx0ICAgIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHVwZGF0ZUlucHV0KTtcblx0ICAgIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB1cGRhdGVJbnB1dCk7XG5cdCAgfTtcblxuXHQgIC8vIGNoZWNrcyBjb25kaXRpb25zIGJlZm9yZSB1cGRhdGluZyBuZXcgaW5wdXRcblx0ICB2YXIgdXBkYXRlSW5wdXQgPSBmdW5jdGlvbiB1cGRhdGVJbnB1dChldmVudCkge1xuXHQgICAgLy8gb25seSBleGVjdXRlIGlmIHRoZSB0b3VjaCBidWZmZXIgdGltZXIgaXNuJ3QgcnVubmluZ1xuXHQgICAgaWYgKCFpc0J1ZmZlcmluZykge1xuXHQgICAgICB2YXIgZXZlbnRLZXkgPSBldmVudC53aGljaDtcblx0ICAgICAgdmFyIHZhbHVlID0gaW5wdXRNYXBbZXZlbnQudHlwZV07XG5cdCAgICAgIGlmICh2YWx1ZSA9PT0gJ3BvaW50ZXInKSB2YWx1ZSA9IHBvaW50ZXJUeXBlKGV2ZW50KTtcblxuXHQgICAgICBpZiAoY3VycmVudElucHV0ICE9PSB2YWx1ZSB8fCBjdXJyZW50SW50ZW50ICE9PSB2YWx1ZSkge1xuXHQgICAgICAgIHZhciBhY3RpdmVFbGVtID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0ICAgICAgICB2YXIgYWN0aXZlSW5wdXQgPSBmYWxzZTtcblxuXHQgICAgICAgIGlmIChhY3RpdmVFbGVtICYmIGFjdGl2ZUVsZW0ubm9kZU5hbWUgJiYgZm9ybUlucHV0cy5pbmRleE9mKGFjdGl2ZUVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgPT09IC0xKSB7XG5cdCAgICAgICAgICBhY3RpdmVJbnB1dCA9IHRydWU7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHZhbHVlID09PSAndG91Y2gnIHx8XG5cblx0ICAgICAgICAvLyBpZ25vcmUgbW91c2UgbW9kaWZpZXIga2V5c1xuXHQgICAgICAgIHZhbHVlID09PSAnbW91c2UnICYmIGlnbm9yZU1hcC5pbmRleE9mKGV2ZW50S2V5KSA9PT0gLTEgfHxcblxuXHQgICAgICAgIC8vIGRvbid0IHN3aXRjaCBpZiB0aGUgY3VycmVudCBlbGVtZW50IGlzIGEgZm9ybSBpbnB1dFxuXHQgICAgICAgIHZhbHVlID09PSAna2V5Ym9hcmQnICYmIGFjdGl2ZUlucHV0KSB7XG5cdCAgICAgICAgICAvLyBzZXQgdGhlIGN1cnJlbnQgYW5kIGNhdGNoLWFsbCB2YXJpYWJsZVxuXHQgICAgICAgICAgY3VycmVudElucHV0ID0gY3VycmVudEludGVudCA9IHZhbHVlO1xuXG5cdCAgICAgICAgICBzZXRJbnB1dCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cblx0ICAvLyB1cGRhdGVzIHRoZSBkb2MgYW5kIGBpbnB1dFR5cGVzYCBhcnJheSB3aXRoIG5ldyBpbnB1dFxuXHQgIHZhciBzZXRJbnB1dCA9IGZ1bmN0aW9uIHNldElucHV0KCkge1xuXHQgICAgZG9jRWxlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtd2hhdGlucHV0JywgY3VycmVudElucHV0KTtcblx0ICAgIGRvY0VsZW0uc2V0QXR0cmlidXRlKCdkYXRhLXdoYXRpbnRlbnQnLCBjdXJyZW50SW5wdXQpO1xuXG5cdCAgICBpZiAoaW5wdXRUeXBlcy5pbmRleE9mKGN1cnJlbnRJbnB1dCkgPT09IC0xKSB7XG5cdCAgICAgIGlucHV0VHlwZXMucHVzaChjdXJyZW50SW5wdXQpO1xuXHQgICAgICBkb2NFbGVtLmNsYXNzTmFtZSArPSAnIHdoYXRpbnB1dC10eXBlcy0nICsgY3VycmVudElucHV0O1xuXHQgICAgfVxuXHQgIH07XG5cblx0ICAvLyB1cGRhdGVzIGlucHV0IGludGVudCBmb3IgYG1vdXNlbW92ZWAgYW5kIGBwb2ludGVybW92ZWBcblx0ICB2YXIgc2V0SW50ZW50ID0gZnVuY3Rpb24gc2V0SW50ZW50KGV2ZW50KSB7XG5cdCAgICAvLyB0ZXN0IHRvIHNlZSBpZiBgbW91c2Vtb3ZlYCBoYXBwZW5lZCByZWxhdGl2ZSB0byB0aGUgc2NyZWVuXG5cdCAgICAvLyB0byBkZXRlY3Qgc2Nyb2xsaW5nIHZlcnN1cyBtb3VzZW1vdmVcblx0ICAgIGlmIChtb3VzZVBvc1sneCddICE9PSBldmVudC5zY3JlZW5YIHx8IG1vdXNlUG9zWyd5J10gIT09IGV2ZW50LnNjcmVlblkpIHtcblx0ICAgICAgaXNTY3JvbGxpbmcgPSBmYWxzZTtcblxuXHQgICAgICBtb3VzZVBvc1sneCddID0gZXZlbnQuc2NyZWVuWDtcblx0ICAgICAgbW91c2VQb3NbJ3knXSA9IGV2ZW50LnNjcmVlblk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpc1Njcm9sbGluZyA9IHRydWU7XG5cdCAgICB9XG5cblx0ICAgIC8vIG9ubHkgZXhlY3V0ZSBpZiB0aGUgdG91Y2ggYnVmZmVyIHRpbWVyIGlzbid0IHJ1bm5pbmdcblx0ICAgIC8vIG9yIHNjcm9sbGluZyBpc24ndCBoYXBwZW5pbmdcblx0ICAgIGlmICghaXNCdWZmZXJpbmcgJiYgIWlzU2Nyb2xsaW5nKSB7XG5cdCAgICAgIHZhciB2YWx1ZSA9IGlucHV0TWFwW2V2ZW50LnR5cGVdO1xuXHQgICAgICBpZiAodmFsdWUgPT09ICdwb2ludGVyJykgdmFsdWUgPSBwb2ludGVyVHlwZShldmVudCk7XG5cblx0ICAgICAgaWYgKGN1cnJlbnRJbnRlbnQgIT09IHZhbHVlKSB7XG5cdCAgICAgICAgY3VycmVudEludGVudCA9IHZhbHVlO1xuXG5cdCAgICAgICAgZG9jRWxlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtd2hhdGludGVudCcsIGN1cnJlbnRJbnRlbnQpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIC8vIGJ1ZmZlcnMgdG91Y2ggZXZlbnRzIGJlY2F1c2UgdGhleSBmcmVxdWVudGx5IGFsc28gZmlyZSBtb3VzZSBldmVudHNcblx0ICB2YXIgdG91Y2hCdWZmZXIgPSBmdW5jdGlvbiB0b3VjaEJ1ZmZlcihldmVudCkge1xuXHQgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuXHQgICAgICBpc0J1ZmZlcmluZyA9IGZhbHNlO1xuXG5cdCAgICAgIC8vIHNldCB0aGUgY3VycmVudCBpbnB1dFxuXHQgICAgICB1cGRhdGVJbnB1dChldmVudCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpc0J1ZmZlcmluZyA9IHRydWU7XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIC8qXG5cdCAgICogdXRpbGl0aWVzXG5cdCAgICovXG5cblx0ICB2YXIgcG9pbnRlclR5cGUgPSBmdW5jdGlvbiBwb2ludGVyVHlwZShldmVudCkge1xuXHQgICAgaWYgKHR5cGVvZiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ251bWJlcicpIHtcblx0ICAgICAgcmV0dXJuIHBvaW50ZXJNYXBbZXZlbnQucG9pbnRlclR5cGVdO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gdHJlYXQgcGVuIGxpa2UgdG91Y2hcblx0ICAgICAgcmV0dXJuIGV2ZW50LnBvaW50ZXJUeXBlID09PSAncGVuJyA/ICd0b3VjaCcgOiBldmVudC5wb2ludGVyVHlwZTtcblx0ICAgIH1cblx0ICB9O1xuXG5cdCAgLy8gZGV0ZWN0IHZlcnNpb24gb2YgbW91c2Ugd2hlZWwgZXZlbnQgdG8gdXNlXG5cdCAgLy8gdmlhIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy93aGVlbFxuXHQgIHZhciBkZXRlY3RXaGVlbCA9IGZ1bmN0aW9uIGRldGVjdFdoZWVsKCkge1xuXHQgICAgdmFyIHdoZWVsVHlwZSA9IHZvaWQgMDtcblxuXHQgICAgLy8gTW9kZXJuIGJyb3dzZXJzIHN1cHBvcnQgXCJ3aGVlbFwiXG5cdCAgICBpZiAoJ29ud2hlZWwnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSB7XG5cdCAgICAgIHdoZWVsVHlwZSA9ICd3aGVlbCc7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvLyBXZWJraXQgYW5kIElFIHN1cHBvcnQgYXQgbGVhc3QgXCJtb3VzZXdoZWVsXCJcblx0ICAgICAgLy8gb3IgYXNzdW1lIHRoYXQgcmVtYWluaW5nIGJyb3dzZXJzIGFyZSBvbGRlciBGaXJlZm94XG5cdCAgICAgIHdoZWVsVHlwZSA9IGRvY3VtZW50Lm9ubW91c2V3aGVlbCAhPT0gdW5kZWZpbmVkID8gJ21vdXNld2hlZWwnIDogJ0RPTU1vdXNlU2Nyb2xsJztcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHdoZWVsVHlwZTtcblx0ICB9O1xuXG5cdCAgLypcblx0ICAgKiBpbml0XG5cdCAgICovXG5cblx0ICAvLyBkb24ndCBzdGFydCBzY3JpcHQgdW5sZXNzIGJyb3dzZXIgY3V0cyB0aGUgbXVzdGFyZFxuXHQgIC8vIChhbHNvIHBhc3NlcyBpZiBwb2x5ZmlsbHMgYXJlIHVzZWQpXG5cdCAgaWYgKCdhZGRFdmVudExpc3RlbmVyJyBpbiB3aW5kb3cgJiYgQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcblx0ICAgIHNldFVwKCk7XG5cdCAgfVxuXG5cdCAgLypcblx0ICAgKiBhcGlcblx0ICAgKi9cblxuXHQgIHJldHVybiB7XG5cdCAgICAvLyByZXR1cm5zIHN0cmluZzogdGhlIGN1cnJlbnQgaW5wdXQgdHlwZVxuXHQgICAgLy8gb3B0OiAnbG9vc2UnfCdzdHJpY3QnXG5cdCAgICAvLyAnc3RyaWN0JyAoZGVmYXVsdCk6IHJldHVybnMgdGhlIHNhbWUgdmFsdWUgYXMgdGhlIGBkYXRhLXdoYXRpbnB1dGAgYXR0cmlidXRlXG5cdCAgICAvLyAnbG9vc2UnOiBpbmNsdWRlcyBgZGF0YS13aGF0aW50ZW50YCB2YWx1ZSBpZiBpdCdzIG1vcmUgY3VycmVudCB0aGFuIGBkYXRhLXdoYXRpbnB1dGBcblx0ICAgIGFzazogZnVuY3Rpb24gYXNrKG9wdCkge1xuXHQgICAgICByZXR1cm4gb3B0ID09PSAnbG9vc2UnID8gY3VycmVudEludGVudCA6IGN1cnJlbnRJbnB1dDtcblx0ICAgIH0sXG5cblx0ICAgIC8vIHJldHVybnMgYXJyYXk6IGFsbCB0aGUgZGV0ZWN0ZWQgaW5wdXQgdHlwZXNcblx0ICAgIHR5cGVzOiBmdW5jdGlvbiB0eXBlcygpIHtcblx0ICAgICAgcmV0dXJuIGlucHV0VHlwZXM7XG5cdCAgICB9XG5cdCAgfTtcblx0fSgpO1xuXG4vKioqLyB9XG4vKioqKioqLyBdKVxufSk7XG47IiwiIWZ1bmN0aW9uKCQpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBGT1VOREFUSU9OX1ZFUlNJT04gPSAnNi4zLjEnO1xuXG4vLyBHbG9iYWwgRm91bmRhdGlvbiBvYmplY3Rcbi8vIFRoaXMgaXMgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdywgb3IgdXNlZCBhcyBhIG1vZHVsZSBmb3IgQU1EL0Jyb3dzZXJpZnlcbnZhciBGb3VuZGF0aW9uID0ge1xuICB2ZXJzaW9uOiBGT1VOREFUSU9OX1ZFUlNJT04sXG5cbiAgLyoqXG4gICAqIFN0b3JlcyBpbml0aWFsaXplZCBwbHVnaW5zLlxuICAgKi9cbiAgX3BsdWdpbnM6IHt9LFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgZ2VuZXJhdGVkIHVuaXF1ZSBpZHMgZm9yIHBsdWdpbiBpbnN0YW5jZXNcbiAgICovXG4gIF91dWlkczogW10sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBib29sZWFuIGZvciBSVEwgc3VwcG9ydFxuICAgKi9cbiAgcnRsOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiAkKCdodG1sJykuYXR0cignZGlyJykgPT09ICdydGwnO1xuICB9LFxuICAvKipcbiAgICogRGVmaW5lcyBhIEZvdW5kYXRpb24gcGx1Z2luLCBhZGRpbmcgaXQgdG8gdGhlIGBGb3VuZGF0aW9uYCBuYW1lc3BhY2UgYW5kIHRoZSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZSB3aGVuIHJlZmxvd2luZy5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIFRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgcGx1Z2luLlxuICAgKi9cbiAgcGx1Z2luOiBmdW5jdGlvbihwbHVnaW4sIG5hbWUpIHtcbiAgICAvLyBPYmplY3Qga2V5IHRvIHVzZSB3aGVuIGFkZGluZyB0byBnbG9iYWwgRm91bmRhdGlvbiBvYmplY3RcbiAgICAvLyBFeGFtcGxlczogRm91bmRhdGlvbi5SZXZlYWwsIEZvdW5kYXRpb24uT2ZmQ2FudmFzXG4gICAgdmFyIGNsYXNzTmFtZSA9IChuYW1lIHx8IGZ1bmN0aW9uTmFtZShwbHVnaW4pKTtcbiAgICAvLyBPYmplY3Qga2V5IHRvIHVzZSB3aGVuIHN0b3JpbmcgdGhlIHBsdWdpbiwgYWxzbyB1c2VkIHRvIGNyZWF0ZSB0aGUgaWRlbnRpZnlpbmcgZGF0YSBhdHRyaWJ1dGUgZm9yIHRoZSBwbHVnaW5cbiAgICAvLyBFeGFtcGxlczogZGF0YS1yZXZlYWwsIGRhdGEtb2ZmLWNhbnZhc1xuICAgIHZhciBhdHRyTmFtZSAgPSBoeXBoZW5hdGUoY2xhc3NOYW1lKTtcblxuICAgIC8vIEFkZCB0byB0aGUgRm91bmRhdGlvbiBvYmplY3QgYW5kIHRoZSBwbHVnaW5zIGxpc3QgKGZvciByZWZsb3dpbmcpXG4gICAgdGhpcy5fcGx1Z2luc1thdHRyTmFtZV0gPSB0aGlzW2NsYXNzTmFtZV0gPSBwbHVnaW47XG4gIH0sXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogUG9wdWxhdGVzIHRoZSBfdXVpZHMgYXJyYXkgd2l0aCBwb2ludGVycyB0byBlYWNoIGluZGl2aWR1YWwgcGx1Z2luIGluc3RhbmNlLlxuICAgKiBBZGRzIHRoZSBgemZQbHVnaW5gIGRhdGEtYXR0cmlidXRlIHRvIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlZCBwbHVnaW5zIHRvIGFsbG93IHVzZSBvZiAkKHNlbGVjdG9yKS5mb3VuZGF0aW9uKG1ldGhvZCkgY2FsbHMuXG4gICAqIEFsc28gZmlyZXMgdGhlIGluaXRpYWxpemF0aW9uIGV2ZW50IGZvciBlYWNoIHBsdWdpbiwgY29uc29saWRhdGluZyByZXBldGl0aXZlIGNvZGUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBhbiBpbnN0YW5jZSBvZiBhIHBsdWdpbiwgdXN1YWxseSBgdGhpc2AgaW4gY29udGV4dC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSB0aGUgbmFtZSBvZiB0aGUgcGx1Z2luLCBwYXNzZWQgYXMgYSBjYW1lbENhc2VkIHN0cmluZy5cbiAgICogQGZpcmVzIFBsdWdpbiNpbml0XG4gICAqL1xuICByZWdpc3RlclBsdWdpbjogZnVuY3Rpb24ocGx1Z2luLCBuYW1lKXtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IG5hbWUgPyBoeXBoZW5hdGUobmFtZSkgOiBmdW5jdGlvbk5hbWUocGx1Z2luLmNvbnN0cnVjdG9yKS50b0xvd2VyQ2FzZSgpO1xuICAgIHBsdWdpbi51dWlkID0gdGhpcy5HZXRZb0RpZ2l0cyg2LCBwbHVnaW5OYW1lKTtcblxuICAgIGlmKCFwbHVnaW4uJGVsZW1lbnQuYXR0cihgZGF0YS0ke3BsdWdpbk5hbWV9YCkpeyBwbHVnaW4uJGVsZW1lbnQuYXR0cihgZGF0YS0ke3BsdWdpbk5hbWV9YCwgcGx1Z2luLnV1aWQpOyB9XG4gICAgaWYoIXBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpKXsgcGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJywgcGx1Z2luKTsgfVxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgaW5pdGlhbGl6ZWQuXG4gICAgICAgICAgICogQGV2ZW50IFBsdWdpbiNpbml0XG4gICAgICAgICAgICovXG4gICAgcGx1Z2luLiRlbGVtZW50LnRyaWdnZXIoYGluaXQuemYuJHtwbHVnaW5OYW1lfWApO1xuXG4gICAgdGhpcy5fdXVpZHMucHVzaChwbHVnaW4udXVpZCk7XG5cbiAgICByZXR1cm47XG4gIH0sXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogUmVtb3ZlcyB0aGUgcGx1Z2lucyB1dWlkIGZyb20gdGhlIF91dWlkcyBhcnJheS5cbiAgICogUmVtb3ZlcyB0aGUgemZQbHVnaW4gZGF0YSBhdHRyaWJ1dGUsIGFzIHdlbGwgYXMgdGhlIGRhdGEtcGx1Z2luLW5hbWUgYXR0cmlidXRlLlxuICAgKiBBbHNvIGZpcmVzIHRoZSBkZXN0cm95ZWQgZXZlbnQgZm9yIHRoZSBwbHVnaW4sIGNvbnNvbGlkYXRpbmcgcmVwZXRpdGl2ZSBjb2RlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gYW4gaW5zdGFuY2Ugb2YgYSBwbHVnaW4sIHVzdWFsbHkgYHRoaXNgIGluIGNvbnRleHQuXG4gICAqIEBmaXJlcyBQbHVnaW4jZGVzdHJveWVkXG4gICAqL1xuICB1bnJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbihwbHVnaW4pe1xuICAgIHZhciBwbHVnaW5OYW1lID0gaHlwaGVuYXRlKGZ1bmN0aW9uTmFtZShwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKS5jb25zdHJ1Y3RvcikpO1xuXG4gICAgdGhpcy5fdXVpZHMuc3BsaWNlKHRoaXMuX3V1aWRzLmluZGV4T2YocGx1Z2luLnV1aWQpLCAxKTtcbiAgICBwbHVnaW4uJGVsZW1lbnQucmVtb3ZlQXR0cihgZGF0YS0ke3BsdWdpbk5hbWV9YCkucmVtb3ZlRGF0YSgnemZQbHVnaW4nKVxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgYmVlbiBkZXN0cm95ZWQuXG4gICAgICAgICAgICogQGV2ZW50IFBsdWdpbiNkZXN0cm95ZWRcbiAgICAgICAgICAgKi9cbiAgICAgICAgICAudHJpZ2dlcihgZGVzdHJveWVkLnpmLiR7cGx1Z2luTmFtZX1gKTtcbiAgICBmb3IodmFyIHByb3AgaW4gcGx1Z2luKXtcbiAgICAgIHBsdWdpbltwcm9wXSA9IG51bGw7Ly9jbGVhbiB1cCBzY3JpcHQgdG8gcHJlcCBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgIH1cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBDYXVzZXMgb25lIG9yIG1vcmUgYWN0aXZlIHBsdWdpbnMgdG8gcmUtaW5pdGlhbGl6ZSwgcmVzZXR0aW5nIGV2ZW50IGxpc3RlbmVycywgcmVjYWxjdWxhdGluZyBwb3NpdGlvbnMsIGV0Yy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbnMgLSBvcHRpb25hbCBzdHJpbmcgb2YgYW4gaW5kaXZpZHVhbCBwbHVnaW4ga2V5LCBhdHRhaW5lZCBieSBjYWxsaW5nIGAkKGVsZW1lbnQpLmRhdGEoJ3BsdWdpbk5hbWUnKWAsIG9yIHN0cmluZyBvZiBhIHBsdWdpbiBjbGFzcyBpLmUuIGAnZHJvcGRvd24nYFxuICAgKiBAZGVmYXVsdCBJZiBubyBhcmd1bWVudCBpcyBwYXNzZWQsIHJlZmxvdyBhbGwgY3VycmVudGx5IGFjdGl2ZSBwbHVnaW5zLlxuICAgKi9cbiAgIHJlSW5pdDogZnVuY3Rpb24ocGx1Z2lucyl7XG4gICAgIHZhciBpc0pRID0gcGx1Z2lucyBpbnN0YW5jZW9mICQ7XG4gICAgIHRyeXtcbiAgICAgICBpZihpc0pRKXtcbiAgICAgICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ3pmUGx1Z2luJykuX2luaXQoKTtcbiAgICAgICAgIH0pO1xuICAgICAgIH1lbHNle1xuICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgcGx1Z2lucyxcbiAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgIGZucyA9IHtcbiAgICAgICAgICAgJ29iamVjdCc6IGZ1bmN0aW9uKHBsZ3Mpe1xuICAgICAgICAgICAgIHBsZ3MuZm9yRWFjaChmdW5jdGlvbihwKXtcbiAgICAgICAgICAgICAgIHAgPSBoeXBoZW5hdGUocCk7XG4gICAgICAgICAgICAgICAkKCdbZGF0YS0nKyBwICsnXScpLmZvdW5kYXRpb24oJ19pbml0Jyk7XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIH0sXG4gICAgICAgICAgICdzdHJpbmcnOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgIHBsdWdpbnMgPSBoeXBoZW5hdGUocGx1Z2lucyk7XG4gICAgICAgICAgICAgJCgnW2RhdGEtJysgcGx1Z2lucyArJ10nKS5mb3VuZGF0aW9uKCdfaW5pdCcpO1xuICAgICAgICAgICB9LFxuICAgICAgICAgICAndW5kZWZpbmVkJzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICB0aGlzWydvYmplY3QnXShPYmplY3Qua2V5cyhfdGhpcy5fcGx1Z2lucykpO1xuICAgICAgICAgICB9XG4gICAgICAgICB9O1xuICAgICAgICAgZm5zW3R5cGVdKHBsdWdpbnMpO1xuICAgICAgIH1cbiAgICAgfWNhdGNoKGVycil7XG4gICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICB9ZmluYWxseXtcbiAgICAgICByZXR1cm4gcGx1Z2lucztcbiAgICAgfVxuICAgfSxcblxuICAvKipcbiAgICogcmV0dXJucyBhIHJhbmRvbSBiYXNlLTM2IHVpZCB3aXRoIG5hbWVzcGFjaW5nXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIC0gbnVtYmVyIG9mIHJhbmRvbSBiYXNlLTM2IGRpZ2l0cyBkZXNpcmVkLiBJbmNyZWFzZSBmb3IgbW9yZSByYW5kb20gc3RyaW5ncy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSAtIG5hbWUgb2YgcGx1Z2luIHRvIGJlIGluY29ycG9yYXRlZCBpbiB1aWQsIG9wdGlvbmFsLlxuICAgKiBAZGVmYXVsdCB7U3RyaW5nfSAnJyAtIGlmIG5vIHBsdWdpbiBuYW1lIGlzIHByb3ZpZGVkLCBub3RoaW5nIGlzIGFwcGVuZGVkIHRvIHRoZSB1aWQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gdW5pcXVlIGlkXG4gICAqL1xuICBHZXRZb0RpZ2l0czogZnVuY3Rpb24obGVuZ3RoLCBuYW1lc3BhY2Upe1xuICAgIGxlbmd0aCA9IGxlbmd0aCB8fCA2O1xuICAgIHJldHVybiBNYXRoLnJvdW5kKChNYXRoLnBvdygzNiwgbGVuZ3RoICsgMSkgLSBNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMzYsIGxlbmd0aCkpKS50b1N0cmluZygzNikuc2xpY2UoMSkgKyAobmFtZXNwYWNlID8gYC0ke25hbWVzcGFjZX1gIDogJycpO1xuICB9LFxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBwbHVnaW5zIG9uIGFueSBlbGVtZW50cyB3aXRoaW4gYGVsZW1gIChhbmQgYGVsZW1gIGl0c2VsZikgdGhhdCBhcmVuJ3QgYWxyZWFkeSBpbml0aWFsaXplZC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW0gLSBqUXVlcnkgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVsZW1lbnQgdG8gY2hlY2sgaW5zaWRlLiBBbHNvIGNoZWNrcyB0aGUgZWxlbWVudCBpdHNlbGYsIHVubGVzcyBpdCdzIHRoZSBgZG9jdW1lbnRgIG9iamVjdC5cbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHBsdWdpbnMgLSBBIGxpc3Qgb2YgcGx1Z2lucyB0byBpbml0aWFsaXplLiBMZWF2ZSB0aGlzIG91dCB0byBpbml0aWFsaXplIGV2ZXJ5dGhpbmcuXG4gICAqL1xuICByZWZsb3c6IGZ1bmN0aW9uKGVsZW0sIHBsdWdpbnMpIHtcblxuICAgIC8vIElmIHBsdWdpbnMgaXMgdW5kZWZpbmVkLCBqdXN0IGdyYWIgZXZlcnl0aGluZ1xuICAgIGlmICh0eXBlb2YgcGx1Z2lucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHBsdWdpbnMgPSBPYmplY3Qua2V5cyh0aGlzLl9wbHVnaW5zKTtcbiAgICB9XG4gICAgLy8gSWYgcGx1Z2lucyBpcyBhIHN0cmluZywgY29udmVydCBpdCB0byBhbiBhcnJheSB3aXRoIG9uZSBpdGVtXG4gICAgZWxzZSBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwbHVnaW5zID0gW3BsdWdpbnNdO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBwbHVnaW5cbiAgICAkLmVhY2gocGx1Z2lucywgZnVuY3Rpb24oaSwgbmFtZSkge1xuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHBsdWdpblxuICAgICAgdmFyIHBsdWdpbiA9IF90aGlzLl9wbHVnaW5zW25hbWVdO1xuXG4gICAgICAvLyBMb2NhbGl6ZSB0aGUgc2VhcmNoIHRvIGFsbCBlbGVtZW50cyBpbnNpZGUgZWxlbSwgYXMgd2VsbCBhcyBlbGVtIGl0c2VsZiwgdW5sZXNzIGVsZW0gPT09IGRvY3VtZW50XG4gICAgICB2YXIgJGVsZW0gPSAkKGVsZW0pLmZpbmQoJ1tkYXRhLScrbmFtZSsnXScpLmFkZEJhY2soJ1tkYXRhLScrbmFtZSsnXScpO1xuXG4gICAgICAvLyBGb3IgZWFjaCBwbHVnaW4gZm91bmQsIGluaXRpYWxpemUgaXRcbiAgICAgICRlbGVtLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciAkZWwgPSAkKHRoaXMpLFxuICAgICAgICAgICAgb3B0cyA9IHt9O1xuICAgICAgICAvLyBEb24ndCBkb3VibGUtZGlwIG9uIHBsdWdpbnNcbiAgICAgICAgaWYgKCRlbC5kYXRhKCd6ZlBsdWdpbicpKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiVHJpZWQgdG8gaW5pdGlhbGl6ZSBcIituYW1lK1wiIG9uIGFuIGVsZW1lbnQgdGhhdCBhbHJlYWR5IGhhcyBhIEZvdW5kYXRpb24gcGx1Z2luLlwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZigkZWwuYXR0cignZGF0YS1vcHRpb25zJykpe1xuICAgICAgICAgIHZhciB0aGluZyA9ICRlbC5hdHRyKCdkYXRhLW9wdGlvbnMnKS5zcGxpdCgnOycpLmZvckVhY2goZnVuY3Rpb24oZSwgaSl7XG4gICAgICAgICAgICB2YXIgb3B0ID0gZS5zcGxpdCgnOicpLm1hcChmdW5jdGlvbihlbCl7IHJldHVybiBlbC50cmltKCk7IH0pO1xuICAgICAgICAgICAgaWYob3B0WzBdKSBvcHRzW29wdFswXV0gPSBwYXJzZVZhbHVlKG9wdFsxXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICRlbC5kYXRhKCd6ZlBsdWdpbicsIG5ldyBwbHVnaW4oJCh0aGlzKSwgb3B0cykpO1xuICAgICAgICB9Y2F0Y2goZXIpe1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXIpO1xuICAgICAgICB9ZmluYWxseXtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICBnZXRGbk5hbWU6IGZ1bmN0aW9uTmFtZSxcbiAgdHJhbnNpdGlvbmVuZDogZnVuY3Rpb24oJGVsZW0pe1xuICAgIHZhciB0cmFuc2l0aW9ucyA9IHtcbiAgICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgJ1dlYmtpdFRyYW5zaXRpb24nOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICAnTW96VHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICdPVHJhbnNpdGlvbic6ICdvdHJhbnNpdGlvbmVuZCdcbiAgICB9O1xuICAgIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgIGVuZDtcblxuICAgIGZvciAodmFyIHQgaW4gdHJhbnNpdGlvbnMpe1xuICAgICAgaWYgKHR5cGVvZiBlbGVtLnN0eWxlW3RdICE9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgIGVuZCA9IHRyYW5zaXRpb25zW3RdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZihlbmQpe1xuICAgICAgcmV0dXJuIGVuZDtcbiAgICB9ZWxzZXtcbiAgICAgIGVuZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgJGVsZW0udHJpZ2dlckhhbmRsZXIoJ3RyYW5zaXRpb25lbmQnLCBbJGVsZW1dKTtcbiAgICAgIH0sIDEpO1xuICAgICAgcmV0dXJuICd0cmFuc2l0aW9uZW5kJztcbiAgICB9XG4gIH1cbn07XG5cbkZvdW5kYXRpb24udXRpbCA9IHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGZvciBhcHBseWluZyBhIGRlYm91bmNlIGVmZmVjdCB0byBhIGZ1bmN0aW9uIGNhbGwuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIC0gRnVuY3Rpb24gdG8gYmUgY2FsbGVkIGF0IGVuZCBvZiB0aW1lb3V0LlxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsYXkgLSBUaW1lIGluIG1zIHRvIGRlbGF5IHRoZSBjYWxsIG9mIGBmdW5jYC5cbiAgICogQHJldHVybnMgZnVuY3Rpb25cbiAgICovXG4gIHRocm90dGxlOiBmdW5jdGlvbiAoZnVuYywgZGVsYXkpIHtcbiAgICB2YXIgdGltZXIgPSBudWxsO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgaWYgKHRpbWVyID09PSBudWxsKSB7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG4vLyBUT0RPOiBjb25zaWRlciBub3QgbWFraW5nIHRoaXMgYSBqUXVlcnkgZnVuY3Rpb25cbi8vIFRPRE86IG5lZWQgd2F5IHRvIHJlZmxvdyB2cy4gcmUtaW5pdGlhbGl6ZVxuLyoqXG4gKiBUaGUgRm91bmRhdGlvbiBqUXVlcnkgbWV0aG9kLlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IG1ldGhvZCAtIEFuIGFjdGlvbiB0byBwZXJmb3JtIG9uIHRoZSBjdXJyZW50IGpRdWVyeSBvYmplY3QuXG4gKi9cbnZhciBmb3VuZGF0aW9uID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIG1ldGhvZCxcbiAgICAgICRtZXRhID0gJCgnbWV0YS5mb3VuZGF0aW9uLW1xJyksXG4gICAgICAkbm9KUyA9ICQoJy5uby1qcycpO1xuXG4gIGlmKCEkbWV0YS5sZW5ndGgpe1xuICAgICQoJzxtZXRhIGNsYXNzPVwiZm91bmRhdGlvbi1tcVwiPicpLmFwcGVuZFRvKGRvY3VtZW50LmhlYWQpO1xuICB9XG4gIGlmKCRub0pTLmxlbmd0aCl7XG4gICAgJG5vSlMucmVtb3ZlQ2xhc3MoJ25vLWpzJyk7XG4gIH1cblxuICBpZih0eXBlID09PSAndW5kZWZpbmVkJyl7Ly9uZWVkcyB0byBpbml0aWFsaXplIHRoZSBGb3VuZGF0aW9uIG9iamVjdCwgb3IgYW4gaW5kaXZpZHVhbCBwbHVnaW4uXG4gICAgRm91bmRhdGlvbi5NZWRpYVF1ZXJ5Ll9pbml0KCk7XG4gICAgRm91bmRhdGlvbi5yZWZsb3codGhpcyk7XG4gIH1lbHNlIGlmKHR5cGUgPT09ICdzdHJpbmcnKXsvL2FuIGluZGl2aWR1YWwgbWV0aG9kIHRvIGludm9rZSBvbiBhIHBsdWdpbiBvciBncm91cCBvZiBwbHVnaW5zXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOy8vY29sbGVjdCBhbGwgdGhlIGFyZ3VtZW50cywgaWYgbmVjZXNzYXJ5XG4gICAgdmFyIHBsdWdDbGFzcyA9IHRoaXMuZGF0YSgnemZQbHVnaW4nKTsvL2RldGVybWluZSB0aGUgY2xhc3Mgb2YgcGx1Z2luXG5cbiAgICBpZihwbHVnQ2xhc3MgIT09IHVuZGVmaW5lZCAmJiBwbHVnQ2xhc3NbbWV0aG9kXSAhPT0gdW5kZWZpbmVkKXsvL21ha2Ugc3VyZSBib3RoIHRoZSBjbGFzcyBhbmQgbWV0aG9kIGV4aXN0XG4gICAgICBpZih0aGlzLmxlbmd0aCA9PT0gMSl7Ly9pZiB0aGVyZSdzIG9ubHkgb25lLCBjYWxsIGl0IGRpcmVjdGx5LlxuICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KHBsdWdDbGFzcywgYXJncyk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGksIGVsKXsvL290aGVyd2lzZSBsb29wIHRocm91Z2ggdGhlIGpRdWVyeSBjb2xsZWN0aW9uIGFuZCBpbnZva2UgdGhlIG1ldGhvZCBvbiBlYWNoXG4gICAgICAgICAgcGx1Z0NsYXNzW21ldGhvZF0uYXBwbHkoJChlbCkuZGF0YSgnemZQbHVnaW4nKSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1lbHNley8vZXJyb3IgZm9yIG5vIGNsYXNzIG9yIG5vIG1ldGhvZFxuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiV2UncmUgc29ycnksICdcIiArIG1ldGhvZCArIFwiJyBpcyBub3QgYW4gYXZhaWxhYmxlIG1ldGhvZCBmb3IgXCIgKyAocGx1Z0NsYXNzID8gZnVuY3Rpb25OYW1lKHBsdWdDbGFzcykgOiAndGhpcyBlbGVtZW50JykgKyAnLicpO1xuICAgIH1cbiAgfWVsc2V7Ly9lcnJvciBmb3IgaW52YWxpZCBhcmd1bWVudCB0eXBlXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgV2UncmUgc29ycnksICR7dHlwZX0gaXMgbm90IGEgdmFsaWQgcGFyYW1ldGVyLiBZb3UgbXVzdCB1c2UgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBtZXRob2QgeW91IHdpc2ggdG8gaW52b2tlLmApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxud2luZG93LkZvdW5kYXRpb24gPSBGb3VuZGF0aW9uO1xuJC5mbi5mb3VuZGF0aW9uID0gZm91bmRhdGlvbjtcblxuLy8gUG9seWZpbGwgZm9yIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuKGZ1bmN0aW9uKCkge1xuICBpZiAoIURhdGUubm93IHx8ICF3aW5kb3cuRGF0ZS5ub3cpXG4gICAgd2luZG93LkRhdGUubm93ID0gRGF0ZS5ub3cgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9O1xuXG4gIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQnLCAnbW96J107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsraSkge1xuICAgICAgdmFyIHZwID0gdmVuZG9yc1tpXTtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdnArJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gKHdpbmRvd1t2cCsnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgd2luZG93W3ZwKydDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXSk7XG4gIH1cbiAgaWYgKC9pUChhZHxob25lfG9kKS4qT1MgNi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICB8fCAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAhd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgdmFyIGxhc3RUaW1lID0gMDtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciBuZXh0VGltZSA9IE1hdGgubWF4KGxhc3RUaW1lICsgMTYsIG5vdyk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhsYXN0VGltZSA9IG5leHRUaW1lKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFRpbWUgLSBub3cpO1xuICAgIH07XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2xlYXJUaW1lb3V0O1xuICB9XG4gIC8qKlxuICAgKiBQb2x5ZmlsbCBmb3IgcGVyZm9ybWFuY2Uubm93LCByZXF1aXJlZCBieSByQUZcbiAgICovXG4gIGlmKCF3aW5kb3cucGVyZm9ybWFuY2UgfHwgIXdpbmRvdy5wZXJmb3JtYW5jZS5ub3cpe1xuICAgIHdpbmRvdy5wZXJmb3JtYW5jZSA9IHtcbiAgICAgIHN0YXJ0OiBEYXRlLm5vdygpLFxuICAgICAgbm93OiBmdW5jdGlvbigpeyByZXR1cm4gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnQ7IH1cbiAgICB9O1xuICB9XG59KSgpO1xuaWYgKCFGdW5jdGlvbi5wcm90b3R5cGUuYmluZCkge1xuICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uKG9UaGlzKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBjbG9zZXN0IHRoaW5nIHBvc3NpYmxlIHRvIHRoZSBFQ01BU2NyaXB0IDVcbiAgICAgIC8vIGludGVybmFsIElzQ2FsbGFibGUgZnVuY3Rpb25cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIC0gd2hhdCBpcyB0cnlpbmcgdG8gYmUgYm91bmQgaXMgbm90IGNhbGxhYmxlJyk7XG4gICAgfVxuXG4gICAgdmFyIGFBcmdzICAgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICBmVG9CaW5kID0gdGhpcyxcbiAgICAgICAgZk5PUCAgICA9IGZ1bmN0aW9uKCkge30sXG4gICAgICAgIGZCb3VuZCAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZlRvQmluZC5hcHBseSh0aGlzIGluc3RhbmNlb2YgZk5PUFxuICAgICAgICAgICAgICAgICA/IHRoaXNcbiAgICAgICAgICAgICAgICAgOiBvVGhpcyxcbiAgICAgICAgICAgICAgICAgYUFyZ3MuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgfTtcblxuICAgIGlmICh0aGlzLnByb3RvdHlwZSkge1xuICAgICAgLy8gbmF0aXZlIGZ1bmN0aW9ucyBkb24ndCBoYXZlIGEgcHJvdG90eXBlXG4gICAgICBmTk9QLnByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuICAgIH1cbiAgICBmQm91bmQucHJvdG90eXBlID0gbmV3IGZOT1AoKTtcblxuICAgIHJldHVybiBmQm91bmQ7XG4gIH07XG59XG4vLyBQb2x5ZmlsbCB0byBnZXQgdGhlIG5hbWUgb2YgYSBmdW5jdGlvbiBpbiBJRTlcbmZ1bmN0aW9uIGZ1bmN0aW9uTmFtZShmbikge1xuICBpZiAoRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBmdW5jTmFtZVJlZ2V4ID0gL2Z1bmN0aW9uXFxzKFteKF17MSx9KVxcKC87XG4gICAgdmFyIHJlc3VsdHMgPSAoZnVuY05hbWVSZWdleCkuZXhlYygoZm4pLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiAocmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCA+IDEpID8gcmVzdWx0c1sxXS50cmltKCkgOiBcIlwiO1xuICB9XG4gIGVsc2UgaWYgKGZuLnByb3RvdHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZuLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIGZuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKHN0cil7XG4gIGlmICgndHJ1ZScgPT09IHN0cikgcmV0dXJuIHRydWU7XG4gIGVsc2UgaWYgKCdmYWxzZScgPT09IHN0cikgcmV0dXJuIGZhbHNlO1xuICBlbHNlIGlmICghaXNOYU4oc3RyICogMSkpIHJldHVybiBwYXJzZUZsb2F0KHN0cik7XG4gIHJldHVybiBzdHI7XG59XG4vLyBDb252ZXJ0IFBhc2NhbENhc2UgdG8ga2ViYWItY2FzZVxuLy8gVGhhbmsgeW91OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84OTU1NTgwXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbn1cblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5Gb3VuZGF0aW9uLkJveCA9IHtcbiAgSW1Ob3RUb3VjaGluZ1lvdTogSW1Ob3RUb3VjaGluZ1lvdSxcbiAgR2V0RGltZW5zaW9uczogR2V0RGltZW5zaW9ucyxcbiAgR2V0T2Zmc2V0czogR2V0T2Zmc2V0c1xufVxuXG4vKipcbiAqIENvbXBhcmVzIHRoZSBkaW1lbnNpb25zIG9mIGFuIGVsZW1lbnQgdG8gYSBjb250YWluZXIgYW5kIGRldGVybWluZXMgY29sbGlzaW9uIGV2ZW50cyB3aXRoIGNvbnRhaW5lci5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHRlc3QgZm9yIGNvbGxpc2lvbnMuXG4gKiBAcGFyYW0ge2pRdWVyeX0gcGFyZW50IC0galF1ZXJ5IG9iamVjdCB0byB1c2UgYXMgYm91bmRpbmcgY29udGFpbmVyLlxuICogQHBhcmFtIHtCb29sZWFufSBsck9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayBsZWZ0IGFuZCByaWdodCB2YWx1ZXMgb25seS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdGJPbmx5IC0gc2V0IHRvIHRydWUgdG8gY2hlY2sgdG9wIGFuZCBib3R0b20gdmFsdWVzIG9ubHkuXG4gKiBAZGVmYXVsdCBpZiBubyBwYXJlbnQgb2JqZWN0IHBhc3NlZCwgZGV0ZWN0cyBjb2xsaXNpb25zIHdpdGggYHdpbmRvd2AuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIGNvbGxpc2lvbiBmcmVlLCBmYWxzZSBpZiBhIGNvbGxpc2lvbiBpbiBhbnkgZGlyZWN0aW9uLlxuICovXG5mdW5jdGlvbiBJbU5vdFRvdWNoaW5nWW91KGVsZW1lbnQsIHBhcmVudCwgbHJPbmx5LCB0Yk9ubHkpIHtcbiAgdmFyIGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0O1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICB2YXIgcGFyRGltcyA9IEdldERpbWVuc2lvbnMocGFyZW50KTtcblxuICAgIGJvdHRvbSA9IChlbGVEaW1zLm9mZnNldC50b3AgKyBlbGVEaW1zLmhlaWdodCA8PSBwYXJEaW1zLmhlaWdodCArIHBhckRpbXMub2Zmc2V0LnRvcCk7XG4gICAgdG9wICAgID0gKGVsZURpbXMub2Zmc2V0LnRvcCA+PSBwYXJEaW1zLm9mZnNldC50b3ApO1xuICAgIGxlZnQgICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ID49IHBhckRpbXMub2Zmc2V0LmxlZnQpO1xuICAgIHJpZ2h0ICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ICsgZWxlRGltcy53aWR0aCA8PSBwYXJEaW1zLndpZHRoICsgcGFyRGltcy5vZmZzZXQubGVmdCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgYm90dG9tID0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0IDw9IGVsZURpbXMud2luZG93RGltcy5oZWlnaHQgKyBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCk7XG4gICAgdG9wICAgID0gKGVsZURpbXMub2Zmc2V0LnRvcCA+PSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCk7XG4gICAgbGVmdCAgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgPj0gZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0KTtcbiAgICByaWdodCAgPSAoZWxlRGltcy5vZmZzZXQubGVmdCArIGVsZURpbXMud2lkdGggPD0gZWxlRGltcy53aW5kb3dEaW1zLndpZHRoKTtcbiAgfVxuXG4gIHZhciBhbGxEaXJzID0gW2JvdHRvbSwgdG9wLCBsZWZ0LCByaWdodF07XG5cbiAgaWYgKGxyT25seSkge1xuICAgIHJldHVybiBsZWZ0ID09PSByaWdodCA9PT0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0Yk9ubHkpIHtcbiAgICByZXR1cm4gdG9wID09PSBib3R0b20gPT09IHRydWU7XG4gIH1cblxuICByZXR1cm4gYWxsRGlycy5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFVzZXMgbmF0aXZlIG1ldGhvZHMgdG8gcmV0dXJuIGFuIG9iamVjdCBvZiBkaW1lbnNpb24gdmFsdWVzLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeSB8fCBIVE1MfSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBvciBET00gZWxlbWVudCBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBkaW1lbnNpb25zLiBDYW4gYmUgYW55IGVsZW1lbnQgb3RoZXIgdGhhdCBkb2N1bWVudCBvciB3aW5kb3cuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAtIG5lc3RlZCBvYmplY3Qgb2YgaW50ZWdlciBwaXhlbCB2YWx1ZXNcbiAqIFRPRE8gLSBpZiBlbGVtZW50IGlzIHdpbmRvdywgcmV0dXJuIG9ubHkgdGhvc2UgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBHZXREaW1lbnNpb25zKGVsZW0sIHRlc3Qpe1xuICBlbGVtID0gZWxlbS5sZW5ndGggPyBlbGVtWzBdIDogZWxlbTtcblxuICBpZiAoZWxlbSA9PT0gd2luZG93IHx8IGVsZW0gPT09IGRvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSSdtIHNvcnJ5LCBEYXZlLiBJJ20gYWZyYWlkIEkgY2FuJ3QgZG8gdGhhdC5cIik7XG4gIH1cblxuICB2YXIgcmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBwYXJSZWN0ID0gZWxlbS5wYXJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgd2luUmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5ZID0gd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgd2luWCA9IHdpbmRvdy5wYWdlWE9mZnNldDtcblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgb2Zmc2V0OiB7XG4gICAgICB0b3A6IHJlY3QudG9wICsgd2luWSxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpblhcbiAgICB9LFxuICAgIHBhcmVudERpbXM6IHtcbiAgICAgIHdpZHRoOiBwYXJSZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0OiBwYXJSZWN0LmhlaWdodCxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICB0b3A6IHBhclJlY3QudG9wICsgd2luWSxcbiAgICAgICAgbGVmdDogcGFyUmVjdC5sZWZ0ICsgd2luWFxuICAgICAgfVxuICAgIH0sXG4gICAgd2luZG93RGltczoge1xuICAgICAgd2lkdGg6IHdpblJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHdpblJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogd2luWSxcbiAgICAgICAgbGVmdDogd2luWFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIHRvcCBhbmQgbGVmdCBpbnRlZ2VyIHBpeGVsIHZhbHVlcyBmb3IgZHluYW1pY2FsbHkgcmVuZGVyZWQgZWxlbWVudHMsXG4gKiBzdWNoIGFzOiBUb29sdGlwLCBSZXZlYWwsIGFuZCBEcm9wZG93blxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBlbGVtZW50IGJlaW5nIHBvc2l0aW9uZWQuXG4gKiBAcGFyYW0ge2pRdWVyeX0gYW5jaG9yIC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQncyBhbmNob3IgcG9pbnQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcG9zaXRpb24gLSBhIHN0cmluZyByZWxhdGluZyB0byB0aGUgZGVzaXJlZCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCwgcmVsYXRpdmUgdG8gaXQncyBhbmNob3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB2T2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIHZlcnRpY2FsIHNlcGFyYXRpb24gYmV0d2VlbiBhbmNob3IgYW5kIGVsZW1lbnQuXG4gKiBAcGFyYW0ge051bWJlcn0gaE9mZnNldCAtIGludGVnZXIgcGl4ZWwgdmFsdWUgb2YgZGVzaXJlZCBob3Jpem9udGFsIHNlcGFyYXRpb24gYmV0d2VlbiBhbmNob3IgYW5kIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzT3ZlcmZsb3cgLSBpZiBhIGNvbGxpc2lvbiBldmVudCBpcyBkZXRlY3RlZCwgc2V0cyB0byB0cnVlIHRvIGRlZmF1bHQgdGhlIGVsZW1lbnQgdG8gZnVsbCB3aWR0aCAtIGFueSBkZXNpcmVkIG9mZnNldC5cbiAqIFRPRE8gYWx0ZXIvcmV3cml0ZSB0byB3b3JrIHdpdGggYGVtYCB2YWx1ZXMgYXMgd2VsbC9pbnN0ZWFkIG9mIHBpeGVsc1xuICovXG5mdW5jdGlvbiBHZXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgcG9zaXRpb24sIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpIHtcbiAgdmFyICRlbGVEaW1zID0gR2V0RGltZW5zaW9ucyhlbGVtZW50KSxcbiAgICAgICRhbmNob3JEaW1zID0gYW5jaG9yID8gR2V0RGltZW5zaW9ucyhhbmNob3IpIDogbnVsbDtcblxuICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IChGb3VuZGF0aW9uLnJ0bCgpID8gJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgLSAkZWxlRGltcy53aWR0aCArICRhbmNob3JEaW1zLndpZHRoIDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgLSAoJGVsZURpbXMuaGVpZ2h0ICsgdk9mZnNldClcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgLSAoJGVsZURpbXMud2lkdGggKyBoT2Zmc2V0KSxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICRhbmNob3JEaW1zLndpZHRoICsgaE9mZnNldCxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgdG9wJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICgkYW5jaG9yRGltcy53aWR0aCAvIDIpKSAtICgkZWxlRGltcy53aWR0aCAvIDIpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgLSAoJGVsZURpbXMuaGVpZ2h0ICsgdk9mZnNldClcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciBib3R0b20nOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogaXNPdmVyZmxvdyA/IGhPZmZzZXQgOiAoKCRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgKCRhbmNob3JEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMikpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgbGVmdCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICgkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgKCRhbmNob3JEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyIHJpZ2h0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0ICsgMSxcbiAgICAgICAgdG9wOiAoJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICgkYW5jaG9yRGltcy5oZWlnaHQgLyAyKSkgLSAoJGVsZURpbXMuaGVpZ2h0IC8gMilcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAoJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQubGVmdCArICgkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMiksXG4gICAgICAgIHRvcDogKCRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCArICgkZWxlRGltcy53aW5kb3dEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmV2ZWFsJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC0gJGVsZURpbXMud2lkdGgpIC8gMixcbiAgICAgICAgdG9wOiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3AgKyB2T2Zmc2V0XG4gICAgICB9XG4gICAgY2FzZSAncmV2ZWFsIGZ1bGwnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQubGVmdCxcbiAgICAgICAgdG9wOiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xlZnQgYm90dG9tJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0LFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQgYm90dG9tJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0IC0gJGVsZURpbXMud2lkdGgsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9XG4gIH1cbn1cblxufShqUXVlcnkpO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBUaGlzIHV0aWwgd2FzIGNyZWF0ZWQgYnkgTWFyaXVzIE9sYmVydHogKlxuICogUGxlYXNlIHRoYW5rIE1hcml1cyBvbiBHaXRIdWIgL293bGJlcnR6ICpcbiAqIG9yIHRoZSB3ZWIgaHR0cDovL3d3dy5tYXJpdXNvbGJlcnR6LmRlLyAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBrZXlDb2RlcyA9IHtcbiAgOTogJ1RBQicsXG4gIDEzOiAnRU5URVInLFxuICAyNzogJ0VTQ0FQRScsXG4gIDMyOiAnU1BBQ0UnLFxuICAzNzogJ0FSUk9XX0xFRlQnLFxuICAzODogJ0FSUk9XX1VQJyxcbiAgMzk6ICdBUlJPV19SSUdIVCcsXG4gIDQwOiAnQVJST1dfRE9XTidcbn1cblxudmFyIGNvbW1hbmRzID0ge31cblxudmFyIEtleWJvYXJkID0ge1xuICBrZXlzOiBnZXRLZXlDb2RlcyhrZXlDb2RlcyksXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgKGtleWJvYXJkKSBldmVudCBhbmQgcmV0dXJucyBhIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgaXRzIGtleVxuICAgKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm4gU3RyaW5nIGtleSAtIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGtleSBwcmVzc2VkXG4gICAqL1xuICBwYXJzZUtleShldmVudCkge1xuICAgIHZhciBrZXkgPSBrZXlDb2Rlc1tldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlXSB8fCBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LndoaWNoKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgLy8gUmVtb3ZlIHVuLXByaW50YWJsZSBjaGFyYWN0ZXJzLCBlLmcuIGZvciBgZnJvbUNoYXJDb2RlYCBjYWxscyBmb3IgQ1RSTCBvbmx5IGV2ZW50c1xuICAgIGtleSA9IGtleS5yZXBsYWNlKC9cXFcrLywgJycpO1xuXG4gICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSBrZXkgPSBgU0hJRlRfJHtrZXl9YDtcbiAgICBpZiAoZXZlbnQuY3RybEtleSkga2V5ID0gYENUUkxfJHtrZXl9YDtcbiAgICBpZiAoZXZlbnQuYWx0S2V5KSBrZXkgPSBgQUxUXyR7a2V5fWA7XG5cbiAgICAvLyBSZW1vdmUgdHJhaWxpbmcgdW5kZXJzY29yZSwgaW4gY2FzZSBvbmx5IG1vZGlmaWVycyB3ZXJlIHVzZWQgKGUuZy4gb25seSBgQ1RSTF9BTFRgKVxuICAgIGtleSA9IGtleS5yZXBsYWNlKC9fJC8sICcnKTtcblxuICAgIHJldHVybiBrZXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIGdpdmVuIChrZXlib2FyZCkgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb21wb25lbnQgLSBGb3VuZGF0aW9uIGNvbXBvbmVudCdzIG5hbWUsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcGFyYW0ge09iamVjdHN9IGZ1bmN0aW9ucyAtIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHRvIGJlIGV4ZWN1dGVkXG4gICAqL1xuICBoYW5kbGVLZXkoZXZlbnQsIGNvbXBvbmVudCwgZnVuY3Rpb25zKSB7XG4gICAgdmFyIGNvbW1hbmRMaXN0ID0gY29tbWFuZHNbY29tcG9uZW50XSxcbiAgICAgIGtleUNvZGUgPSB0aGlzLnBhcnNlS2V5KGV2ZW50KSxcbiAgICAgIGNtZHMsXG4gICAgICBjb21tYW5kLFxuICAgICAgZm47XG5cbiAgICBpZiAoIWNvbW1hbmRMaXN0KSByZXR1cm4gY29uc29sZS53YXJuKCdDb21wb25lbnQgbm90IGRlZmluZWQhJyk7XG5cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRMaXN0Lmx0ciA9PT0gJ3VuZGVmaW5lZCcpIHsgLy8gdGhpcyBjb21wb25lbnQgZG9lcyBub3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGx0ciBhbmQgcnRsXG4gICAgICAgIGNtZHMgPSBjb21tYW5kTGlzdDsgLy8gdXNlIHBsYWluIGxpc3RcbiAgICB9IGVsc2UgeyAvLyBtZXJnZSBsdHIgYW5kIHJ0bDogaWYgZG9jdW1lbnQgaXMgcnRsLCBydGwgb3ZlcndyaXRlcyBsdHIgYW5kIHZpY2UgdmVyc2FcbiAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIGNtZHMgPSAkLmV4dGVuZCh7fSwgY29tbWFuZExpc3QubHRyLCBjb21tYW5kTGlzdC5ydGwpO1xuXG4gICAgICAgIGVsc2UgY21kcyA9ICQuZXh0ZW5kKHt9LCBjb21tYW5kTGlzdC5ydGwsIGNvbW1hbmRMaXN0Lmx0cik7XG4gICAgfVxuICAgIGNvbW1hbmQgPSBjbWRzW2tleUNvZGVdO1xuXG4gICAgZm4gPSBmdW5jdGlvbnNbY29tbWFuZF07XG4gICAgaWYgKGZuICYmIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGVjdXRlIGZ1bmN0aW9uICBpZiBleGlzdHNcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGZuLmFwcGx5KCk7XG4gICAgICBpZiAoZnVuY3Rpb25zLmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy5oYW5kbGVkID09PSAnZnVuY3Rpb24nKSB7IC8vIGV4ZWN1dGUgZnVuY3Rpb24gd2hlbiBldmVudCB3YXMgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy5oYW5kbGVkKHJldHVyblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZ1bmN0aW9ucy51bmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy51bmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHsgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBub3QgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy51bmhhbmRsZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBmb2N1c2FibGUgZWxlbWVudHMgd2l0aGluIHRoZSBnaXZlbiBgJGVsZW1lbnRgXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICAgKiBAcmV0dXJuIHtqUXVlcnl9ICRmb2N1c2FibGUgLSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiBgJGVsZW1lbnRgXG4gICAqL1xuICBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSB7XG4gICAgaWYoISRlbGVtZW50KSB7cmV0dXJuIGZhbHNlOyB9XG4gICAgcmV0dXJuICRlbGVtZW50LmZpbmQoJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdLCAqW2NvbnRlbnRlZGl0YWJsZV0nKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoISQodGhpcykuaXMoJzp2aXNpYmxlJykgfHwgJCh0aGlzKS5hdHRyKCd0YWJpbmRleCcpIDwgMCkgeyByZXR1cm4gZmFsc2U7IH0gLy9vbmx5IGhhdmUgdmlzaWJsZSBlbGVtZW50cyBhbmQgdGhvc2UgdGhhdCBoYXZlIGEgdGFiaW5kZXggZ3JlYXRlciBvciBlcXVhbCAwXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IG5hbWUgbmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcmV0dXJuIFN0cmluZyBjb21wb25lbnROYW1lXG4gICAqL1xuXG4gIHJlZ2lzdGVyKGNvbXBvbmVudE5hbWUsIGNtZHMpIHtcbiAgICBjb21tYW5kc1tjb21wb25lbnROYW1lXSA9IGNtZHM7XG4gIH0sICBcblxuICAvKipcbiAgICogVHJhcHMgdGhlIGZvY3VzIGluIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0gIHtqUXVlcnl9ICRlbGVtZW50ICBqUXVlcnkgb2JqZWN0IHRvIHRyYXAgdGhlIGZvdWNzIGludG8uXG4gICAqL1xuICB0cmFwRm9jdXMoJGVsZW1lbnQpIHtcbiAgICB2YXIgJGZvY3VzYWJsZSA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSgkZWxlbWVudCksXG4gICAgICAgICRmaXJzdEZvY3VzYWJsZSA9ICRmb2N1c2FibGUuZXEoMCksXG4gICAgICAgICRsYXN0Rm9jdXNhYmxlID0gJGZvY3VzYWJsZS5lcSgtMSk7XG5cbiAgICAkZWxlbWVudC5vbigna2V5ZG93bi56Zi50cmFwZm9jdXMnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gJGxhc3RGb2N1c2FibGVbMF0gJiYgRm91bmRhdGlvbi5LZXlib2FyZC5wYXJzZUtleShldmVudCkgPT09ICdUQUInKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICRmaXJzdEZvY3VzYWJsZS5mb2N1cygpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZXZlbnQudGFyZ2V0ID09PSAkZmlyc3RGb2N1c2FibGVbMF0gJiYgRm91bmRhdGlvbi5LZXlib2FyZC5wYXJzZUtleShldmVudCkgPT09ICdTSElGVF9UQUInKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICRsYXN0Rm9jdXNhYmxlLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIC8qKlxuICAgKiBSZWxlYXNlcyB0aGUgdHJhcHBlZCBmb2N1cyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0gIHtqUXVlcnl9ICRlbGVtZW50ICBqUXVlcnkgb2JqZWN0IHRvIHJlbGVhc2UgdGhlIGZvY3VzIGZvci5cbiAgICovXG4gIHJlbGVhc2VGb2N1cygkZWxlbWVudCkge1xuICAgICRlbGVtZW50Lm9mZigna2V5ZG93bi56Zi50cmFwZm9jdXMnKTtcbiAgfVxufVxuXG4vKlxuICogQ29uc3RhbnRzIGZvciBlYXNpZXIgY29tcGFyaW5nLlxuICogQ2FuIGJlIHVzZWQgbGlrZSBGb3VuZGF0aW9uLnBhcnNlS2V5KGV2ZW50KSA9PT0gRm91bmRhdGlvbi5rZXlzLlNQQUNFXG4gKi9cbmZ1bmN0aW9uIGdldEtleUNvZGVzKGtjcykge1xuICB2YXIgayA9IHt9O1xuICBmb3IgKHZhciBrYyBpbiBrY3MpIGtba2NzW2tjXV0gPSBrY3Nba2NdO1xuICByZXR1cm4gaztcbn1cblxuRm91bmRhdGlvbi5LZXlib2FyZCA9IEtleWJvYXJkO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8vIERlZmF1bHQgc2V0IG9mIG1lZGlhIHF1ZXJpZXNcbmNvbnN0IGRlZmF1bHRRdWVyaWVzID0ge1xuICAnZGVmYXVsdCcgOiAnb25seSBzY3JlZW4nLFxuICBsYW5kc2NhcGUgOiAnb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKScsXG4gIHBvcnRyYWl0IDogJ29ubHkgc2NyZWVuIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KScsXG4gIHJldGluYSA6ICdvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAobWluLS1tb3otZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyLzEpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAyZHBweCknXG59O1xuXG52YXIgTWVkaWFRdWVyeSA9IHtcbiAgcXVlcmllczogW10sXG5cbiAgY3VycmVudDogJycsXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBtZWRpYSBxdWVyeSBoZWxwZXIsIGJ5IGV4dHJhY3RpbmcgdGhlIGJyZWFrcG9pbnQgbGlzdCBmcm9tIHRoZSBDU1MgYW5kIGFjdGl2YXRpbmcgdGhlIGJyZWFrcG9pbnQgd2F0Y2hlci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGV4dHJhY3RlZFN0eWxlcyA9ICQoJy5mb3VuZGF0aW9uLW1xJykuY3NzKCdmb250LWZhbWlseScpO1xuICAgIHZhciBuYW1lZFF1ZXJpZXM7XG5cbiAgICBuYW1lZFF1ZXJpZXMgPSBwYXJzZVN0eWxlVG9PYmplY3QoZXh0cmFjdGVkU3R5bGVzKTtcblxuICAgIGZvciAodmFyIGtleSBpbiBuYW1lZFF1ZXJpZXMpIHtcbiAgICAgIGlmKG5hbWVkUXVlcmllcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHNlbGYucXVlcmllcy5wdXNoKHtcbiAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgdmFsdWU6IGBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJHtuYW1lZFF1ZXJpZXNba2V5XX0pYFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpO1xuXG4gICAgdGhpcy5fd2F0Y2hlcigpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHNjcmVlbiBpcyBhdCBsZWFzdCBhcyB3aWRlIGFzIGEgYnJlYWtwb2ludC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBjaGVjay5cbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgYnJlYWtwb2ludCBtYXRjaGVzLCBgZmFsc2VgIGlmIGl0J3Mgc21hbGxlci5cbiAgICovXG4gIGF0TGVhc3Qoc2l6ZSkge1xuICAgIHZhciBxdWVyeSA9IHRoaXMuZ2V0KHNpemUpO1xuXG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEocXVlcnkpLm1hdGNoZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHNjcmVlbiBtYXRjaGVzIHRvIGEgYnJlYWtwb2ludC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBjaGVjaywgZWl0aGVyICdzbWFsbCBvbmx5JyBvciAnc21hbGwnLiBPbWl0dGluZyAnb25seScgZmFsbHMgYmFjayB0byB1c2luZyBhdExlYXN0KCkgbWV0aG9kLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBicmVha3BvaW50IG1hdGNoZXMsIGBmYWxzZWAgaWYgaXQgZG9lcyBub3QuXG4gICAqL1xuICBpcyhzaXplKSB7XG4gICAgc2l6ZSA9IHNpemUudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgaWYoc2l6ZS5sZW5ndGggPiAxICYmIHNpemVbMV0gPT09ICdvbmx5Jykge1xuICAgICAgaWYoc2l6ZVswXSA9PT0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKSkgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmF0TGVhc3Qoc2l6ZVswXSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgbWVkaWEgcXVlcnkgb2YgYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGdldC5cbiAgICogQHJldHVybnMge1N0cmluZ3xudWxsfSAtIFRoZSBtZWRpYSBxdWVyeSBvZiB0aGUgYnJlYWtwb2ludCwgb3IgYG51bGxgIGlmIHRoZSBicmVha3BvaW50IGRvZXNuJ3QgZXhpc3QuXG4gICAqL1xuICBnZXQoc2l6ZSkge1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5xdWVyaWVzKSB7XG4gICAgICBpZih0aGlzLnF1ZXJpZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuICAgICAgICBpZiAoc2l6ZSA9PT0gcXVlcnkubmFtZSkgcmV0dXJuIHF1ZXJ5LnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgbmFtZSBieSB0ZXN0aW5nIGV2ZXJ5IGJyZWFrcG9pbnQgYW5kIHJldHVybmluZyB0aGUgbGFzdCBvbmUgdG8gbWF0Y2ggKHRoZSBiaWdnZXN0IG9uZSkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBOYW1lIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICBfZ2V0Q3VycmVudFNpemUoKSB7XG4gICAgdmFyIG1hdGNoZWQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuXG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocXVlcnkudmFsdWUpLm1hdGNoZXMpIHtcbiAgICAgICAgbWF0Y2hlZCA9IHF1ZXJ5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbWF0Y2hlZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBtYXRjaGVkLm5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWN0aXZhdGVzIHRoZSBicmVha3BvaW50IHdhdGNoZXIsIHdoaWNoIGZpcmVzIGFuIGV2ZW50IG9uIHRoZSB3aW5kb3cgd2hlbmV2ZXIgdGhlIGJyZWFrcG9pbnQgY2hhbmdlcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfd2F0Y2hlcigpIHtcbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5tZWRpYXF1ZXJ5JywgKCkgPT4ge1xuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpLCBjdXJyZW50U2l6ZSA9IHRoaXMuY3VycmVudDtcblxuICAgICAgaWYgKG5ld1NpemUgIT09IGN1cnJlbnRTaXplKSB7XG4gICAgICAgIC8vIENoYW5nZSB0aGUgY3VycmVudCBtZWRpYSBxdWVyeVxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBuZXdTaXplO1xuXG4gICAgICAgIC8vIEJyb2FkY2FzdCB0aGUgbWVkaWEgcXVlcnkgY2hhbmdlIG9uIHRoZSB3aW5kb3dcbiAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIFtuZXdTaXplLCBjdXJyZW50U2l6ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG4vLyBtYXRjaE1lZGlhKCkgcG9seWZpbGwgLSBUZXN0IGEgQ1NTIG1lZGlhIHR5cGUvcXVlcnkgaW4gSlMuXG4vLyBBdXRob3JzICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLCBQYXVsIElyaXNoLCBOaWNob2xhcyBaYWthcywgRGF2aWQgS25pZ2h0LiBEdWFsIE1JVC9CU0QgbGljZW5zZVxud2luZG93Lm1hdGNoTWVkaWEgfHwgKHdpbmRvdy5tYXRjaE1lZGlhID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IG1hdGNoTWVkaXVtIGFwaSBzdWNoIGFzIElFIDkgYW5kIHdlYmtpdFxuICB2YXIgc3R5bGVNZWRpYSA9ICh3aW5kb3cuc3R5bGVNZWRpYSB8fCB3aW5kb3cubWVkaWEpO1xuXG4gIC8vIEZvciB0aG9zZSB0aGF0IGRvbid0IHN1cHBvcnQgbWF0Y2hNZWRpdW1cbiAgaWYgKCFzdHlsZU1lZGlhKSB7XG4gICAgdmFyIHN0eWxlICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgIHNjcmlwdCAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdLFxuICAgIGluZm8gICAgICAgID0gbnVsbDtcblxuICAgIHN0eWxlLnR5cGUgID0gJ3RleHQvY3NzJztcbiAgICBzdHlsZS5pZCAgICA9ICdtYXRjaG1lZGlhanMtdGVzdCc7XG5cbiAgICBzY3JpcHQgJiYgc2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBzY3JpcHQpO1xuXG4gICAgLy8gJ3N0eWxlLmN1cnJlbnRTdHlsZScgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnd2luZG93LmdldENvbXB1dGVkU3R5bGUnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICBpbmZvID0gKCdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cpICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN0eWxlLCBudWxsKSB8fCBzdHlsZS5jdXJyZW50U3R5bGU7XG5cbiAgICBzdHlsZU1lZGlhID0ge1xuICAgICAgbWF0Y2hNZWRpdW0obWVkaWEpIHtcbiAgICAgICAgdmFyIHRleHQgPSBgQG1lZGlhICR7bWVkaWF9eyAjbWF0Y2htZWRpYWpzLXRlc3QgeyB3aWR0aDogMXB4OyB9IH1gO1xuXG4gICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBpZiBtZWRpYSBxdWVyeSBpcyB0cnVlIG9yIGZhbHNlXG4gICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24obWVkaWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hlczogc3R5bGVNZWRpYS5tYXRjaE1lZGl1bShtZWRpYSB8fCAnYWxsJyksXG4gICAgICBtZWRpYTogbWVkaWEgfHwgJ2FsbCdcbiAgICB9O1xuICB9XG59KCkpO1xuXG4vLyBUaGFuayB5b3U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nXG5mdW5jdGlvbiBwYXJzZVN0eWxlVG9PYmplY3Qoc3RyKSB7XG4gIHZhciBzdHlsZU9iamVjdCA9IHt9O1xuXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgfVxuXG4gIHN0ciA9IHN0ci50cmltKCkuc2xpY2UoMSwgLTEpOyAvLyBicm93c2VycyByZS1xdW90ZSBzdHJpbmcgc3R5bGUgdmFsdWVzXG5cbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHlsZU9iamVjdCA9IHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbihyZXQsIHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gcGFydHNbMF07XG4gICAgdmFyIHZhbCA9IHBhcnRzWzFdO1xuICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuXG4gICAgLy8gbWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcbiAgICAvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG4gICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cbiAgICBpZiAoIXJldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXRba2V5XSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0W2tleV0pKSB7XG4gICAgICByZXRba2V5XS5wdXNoKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldFtrZXldID0gW3JldFtrZXldLCB2YWxdO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHN0eWxlT2JqZWN0O1xufVxuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogTW90aW9uIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tb3Rpb25cbiAqL1xuXG5jb25zdCBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG5jb25zdCBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuY29uc3QgTW90aW9uID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb3ZlKGR1cmF0aW9uLCBlbGVtLCBmbil7XG4gIHZhciBhbmltLCBwcm9nLCBzdGFydCA9IG51bGw7XG4gIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcblxuICBpZiAoZHVyYXRpb24gPT09IDApIHtcbiAgICBmbi5hcHBseShlbGVtKTtcbiAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZlKHRzKXtcbiAgICBpZighc3RhcnQpIHN0YXJ0ID0gdHM7XG4gICAgLy8gY29uc29sZS5sb2coc3RhcnQsIHRzKTtcbiAgICBwcm9nID0gdHMgLSBzdGFydDtcbiAgICBmbi5hcHBseShlbGVtKTtcblxuICAgIGlmKHByb2cgPCBkdXJhdGlvbil7IGFuaW0gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1vdmUsIGVsZW0pOyB9XG4gICAgZWxzZXtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltKTtcbiAgICAgIGVsZW0udHJpZ2dlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSkudHJpZ2dlckhhbmRsZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pO1xuICAgIH1cbiAgfVxuICBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlKTtcbn1cblxuLyoqXG4gKiBBbmltYXRlcyBhbiBlbGVtZW50IGluIG9yIG91dCB1c2luZyBhIENTUyB0cmFuc2l0aW9uIGNsYXNzLlxuICogQGZ1bmN0aW9uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCb29sZWFufSBpc0luIC0gRGVmaW5lcyBpZiB0aGUgYW5pbWF0aW9uIGlzIGluIG9yIG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9yIEhUTUwgb2JqZWN0IHRvIGFuaW1hdGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gYW5pbWF0aW9uIC0gQ1NTIGNsYXNzIHRvIHVzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gQ2FsbGJhY2sgdG8gcnVuIHdoZW4gYW5pbWF0aW9uIGlzIGZpbmlzaGVkLlxuICovXG5mdW5jdGlvbiBhbmltYXRlKGlzSW4sIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgZWxlbWVudCA9ICQoZWxlbWVudCkuZXEoMCk7XG5cbiAgaWYgKCFlbGVtZW50Lmxlbmd0aCkgcmV0dXJuO1xuXG4gIHZhciBpbml0Q2xhc3MgPSBpc0luID8gaW5pdENsYXNzZXNbMF0gOiBpbml0Q2xhc3Nlc1sxXTtcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNJbiA/IGFjdGl2ZUNsYXNzZXNbMF0gOiBhY3RpdmVDbGFzc2VzWzFdO1xuXG4gIC8vIFNldCB1cCB0aGUgYW5pbWF0aW9uXG4gIHJlc2V0KCk7XG5cbiAgZWxlbWVudFxuICAgIC5hZGRDbGFzcyhhbmltYXRpb24pXG4gICAgLmNzcygndHJhbnNpdGlvbicsICdub25lJyk7XG5cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBlbGVtZW50LmFkZENsYXNzKGluaXRDbGFzcyk7XG4gICAgaWYgKGlzSW4pIGVsZW1lbnQuc2hvdygpO1xuICB9KTtcblxuICAvLyBTdGFydCB0aGUgYW5pbWF0aW9uXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aDtcbiAgICBlbGVtZW50XG4gICAgICAuY3NzKCd0cmFuc2l0aW9uJywgJycpXG4gICAgICAuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpO1xuICB9KTtcblxuICAvLyBDbGVhbiB1cCB0aGUgYW5pbWF0aW9uIHdoZW4gaXQgZmluaXNoZXNcbiAgZWxlbWVudC5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKGVsZW1lbnQpLCBmaW5pc2gpO1xuXG4gIC8vIEhpZGVzIHRoZSBlbGVtZW50IChmb3Igb3V0IGFuaW1hdGlvbnMpLCByZXNldHMgdGhlIGVsZW1lbnQsIGFuZCBydW5zIGEgY2FsbGJhY2tcbiAgZnVuY3Rpb24gZmluaXNoKCkge1xuICAgIGlmICghaXNJbikgZWxlbWVudC5oaWRlKCk7XG4gICAgcmVzZXQoKTtcbiAgICBpZiAoY2IpIGNiLmFwcGx5KGVsZW1lbnQpO1xuICB9XG5cbiAgLy8gUmVzZXRzIHRyYW5zaXRpb25zIGFuZCByZW1vdmVzIG1vdGlvbi1zcGVjaWZpYyBjbGFzc2VzXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGVsZW1lbnRbMF0uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gMDtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGAke2luaXRDbGFzc30gJHthY3RpdmVDbGFzc30gJHthbmltYXRpb259YCk7XG4gIH1cbn1cblxuRm91bmRhdGlvbi5Nb3ZlID0gTW92ZTtcbkZvdW5kYXRpb24uTW90aW9uID0gTW90aW9uO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmNvbnN0IE5lc3QgPSB7XG4gIEZlYXRoZXIobWVudSwgdHlwZSA9ICd6ZicpIHtcbiAgICBtZW51LmF0dHIoJ3JvbGUnLCAnbWVudWJhcicpO1xuXG4gICAgdmFyIGl0ZW1zID0gbWVudS5maW5kKCdsaScpLmF0dHIoeydyb2xlJzogJ21lbnVpdGVtJ30pLFxuICAgICAgICBzdWJNZW51Q2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51YCxcbiAgICAgICAgc3ViSXRlbUNsYXNzID0gYCR7c3ViTWVudUNsYXNzfS1pdGVtYCxcbiAgICAgICAgaGFzU3ViQ2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51LXBhcmVudGA7XG5cbiAgICBpdGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICRpdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAkc3ViID0gJGl0ZW0uY2hpbGRyZW4oJ3VsJyk7XG5cbiAgICAgIGlmICgkc3ViLmxlbmd0aCkge1xuICAgICAgICAkaXRlbVxuICAgICAgICAgIC5hZGRDbGFzcyhoYXNTdWJDbGFzcylcbiAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICRpdGVtLmNoaWxkcmVuKCdhOmZpcnN0JykudGV4dCgpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gTm90ZTogIERyaWxsZG93bnMgYmVoYXZlIGRpZmZlcmVudGx5IGluIGhvdyB0aGV5IGhpZGUsIGFuZCBzbyBuZWVkXG4gICAgICAgICAgLy8gYWRkaXRpb25hbCBhdHRyaWJ1dGVzLiAgV2Ugc2hvdWxkIGxvb2sgaWYgdGhpcyBwb3NzaWJseSBvdmVyLWdlbmVyYWxpemVkXG4gICAgICAgICAgLy8gdXRpbGl0eSAoTmVzdCkgaXMgYXBwcm9wcmlhdGUgd2hlbiB3ZSByZXdvcmsgbWVudXMgaW4gNi40XG4gICAgICAgICAgaWYodHlwZSA9PT0gJ2RyaWxsZG93bicpIHtcbiAgICAgICAgICAgICRpdGVtLmF0dHIoeydhcmlhLWV4cGFuZGVkJzogZmFsc2V9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgJHN1YlxuICAgICAgICAgIC5hZGRDbGFzcyhgc3VibWVudSAke3N1Yk1lbnVDbGFzc31gKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdkYXRhLXN1Ym1lbnUnOiAnJyxcbiAgICAgICAgICAgICdyb2xlJzogJ21lbnUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIGlmKHR5cGUgPT09ICdkcmlsbGRvd24nKSB7XG4gICAgICAgICAgJHN1Yi5hdHRyKHsnYXJpYS1oaWRkZW4nOiB0cnVlfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCRpdGVtLnBhcmVudCgnW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpIHtcbiAgICAgICAgJGl0ZW0uYWRkQ2xhc3MoYGlzLXN1Ym1lbnUtaXRlbSAke3N1Ykl0ZW1DbGFzc31gKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybjtcbiAgfSxcblxuICBCdXJuKG1lbnUsIHR5cGUpIHtcbiAgICB2YXIgLy9pdGVtcyA9IG1lbnUuZmluZCgnbGknKSxcbiAgICAgICAgc3ViTWVudUNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudWAsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IGAke3N1Yk1lbnVDbGFzc30taXRlbWAsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudS1wYXJlbnRgO1xuXG4gICAgbWVudVxuICAgICAgLmZpbmQoJz5saSwgLm1lbnUsIC5tZW51ID4gbGknKVxuICAgICAgLnJlbW92ZUNsYXNzKGAke3N1Yk1lbnVDbGFzc30gJHtzdWJJdGVtQ2xhc3N9ICR7aGFzU3ViQ2xhc3N9IGlzLXN1Ym1lbnUtaXRlbSBzdWJtZW51IGlzLWFjdGl2ZWApXG4gICAgICAucmVtb3ZlQXR0cignZGF0YS1zdWJtZW51JykuY3NzKCdkaXNwbGF5JywgJycpO1xuXG4gICAgLy8gY29uc29sZS5sb2coICAgICAgbWVudS5maW5kKCcuJyArIHN1Yk1lbnVDbGFzcyArICcsIC4nICsgc3ViSXRlbUNsYXNzICsgJywgLmhhcy1zdWJtZW51LCAuaXMtc3VibWVudS1pdGVtLCAuc3VibWVudSwgW2RhdGEtc3VibWVudV0nKVxuICAgIC8vICAgICAgICAgICAucmVtb3ZlQ2xhc3Moc3ViTWVudUNsYXNzICsgJyAnICsgc3ViSXRlbUNsYXNzICsgJyBoYXMtc3VibWVudSBpcy1zdWJtZW51LWl0ZW0gc3VibWVudScpXG4gICAgLy8gICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKSk7XG4gICAgLy8gaXRlbXMuZWFjaChmdW5jdGlvbigpe1xuICAgIC8vICAgdmFyICRpdGVtID0gJCh0aGlzKSxcbiAgICAvLyAgICAgICAkc3ViID0gJGl0ZW0uY2hpbGRyZW4oJ3VsJyk7XG4gICAgLy8gICBpZigkaXRlbS5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKXtcbiAgICAvLyAgICAgJGl0ZW0ucmVtb3ZlQ2xhc3MoJ2lzLXN1Ym1lbnUtaXRlbSAnICsgc3ViSXRlbUNsYXNzKTtcbiAgICAvLyAgIH1cbiAgICAvLyAgIGlmKCRzdWIubGVuZ3RoKXtcbiAgICAvLyAgICAgJGl0ZW0ucmVtb3ZlQ2xhc3MoJ2hhcy1zdWJtZW51Jyk7XG4gICAgLy8gICAgICRzdWIucmVtb3ZlQ2xhc3MoJ3N1Ym1lbnUgJyArIHN1Yk1lbnVDbGFzcykucmVtb3ZlQXR0cignZGF0YS1zdWJtZW51Jyk7XG4gICAgLy8gICB9XG4gICAgLy8gfSk7XG4gIH1cbn1cblxuRm91bmRhdGlvbi5OZXN0ID0gTmVzdDtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5mdW5jdGlvbiBUaW1lcihlbGVtLCBvcHRpb25zLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLC8vb3B0aW9ucyBpcyBhbiBvYmplY3QgZm9yIGVhc2lseSBhZGRpbmcgZmVhdHVyZXMgbGF0ZXIuXG4gICAgICBuYW1lU3BhY2UgPSBPYmplY3Qua2V5cyhlbGVtLmRhdGEoKSlbMF0gfHwgJ3RpbWVyJyxcbiAgICAgIHJlbWFpbiA9IC0xLFxuICAgICAgc3RhcnQsXG4gICAgICB0aW1lcjtcblxuICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG5cbiAgdGhpcy5yZXN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmVtYWluID0gLTE7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB0aGlzLnN0YXJ0KCk7XG4gIH1cblxuICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgIC8vIGlmKCFlbGVtLmRhdGEoJ3BhdXNlZCcpKXsgcmV0dXJuIGZhbHNlOyB9Ly9tYXliZSBpbXBsZW1lbnQgdGhpcyBzYW5pdHkgY2hlY2sgaWYgdXNlZCBmb3Igb3RoZXIgdGhpbmdzLlxuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgcmVtYWluID0gcmVtYWluIDw9IDAgPyBkdXJhdGlvbiA6IHJlbWFpbjtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIGZhbHNlKTtcbiAgICBzdGFydCA9IERhdGUubm93KCk7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBpZihvcHRpb25zLmluZmluaXRlKXtcbiAgICAgICAgX3RoaXMucmVzdGFydCgpOy8vcmVydW4gdGhlIHRpbWVyLlxuICAgICAgfVxuICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gICAgfSwgcmVtYWluKTtcbiAgICBlbGVtLnRyaWdnZXIoYHRpbWVyc3RhcnQuemYuJHtuYW1lU3BhY2V9YCk7XG4gIH1cblxuICB0aGlzLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7XG4gICAgLy9pZihlbGVtLmRhdGEoJ3BhdXNlZCcpKXsgcmV0dXJuIGZhbHNlOyB9Ly9tYXliZSBpbXBsZW1lbnQgdGhpcyBzYW5pdHkgY2hlY2sgaWYgdXNlZCBmb3Igb3RoZXIgdGhpbmdzLlxuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgZWxlbS5kYXRhKCdwYXVzZWQnLCB0cnVlKTtcbiAgICB2YXIgZW5kID0gRGF0ZS5ub3coKTtcbiAgICByZW1haW4gPSByZW1haW4gLSAoZW5kIC0gc3RhcnQpO1xuICAgIGVsZW0udHJpZ2dlcihgdGltZXJwYXVzZWQuemYuJHtuYW1lU3BhY2V9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSdW5zIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBpbWFnZXMgYXJlIGZ1bGx5IGxvYWRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZXMgLSBJbWFnZShzKSB0byBjaGVjayBpZiBsb2FkZWQuXG4gKiBAcGFyYW0ge0Z1bmN9IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGltYWdlIGlzIGZ1bGx5IGxvYWRlZC5cbiAqL1xuZnVuY3Rpb24gb25JbWFnZXNMb2FkZWQoaW1hZ2VzLCBjYWxsYmFjayl7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIHVubG9hZGVkID0gaW1hZ2VzLmxlbmd0aDtcblxuICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG5cbiAgaW1hZ2VzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgLy8gQ2hlY2sgaWYgaW1hZ2UgaXMgbG9hZGVkXG4gICAgaWYgKHRoaXMuY29tcGxldGUgfHwgKHRoaXMucmVhZHlTdGF0ZSA9PT0gNCkgfHwgKHRoaXMucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykpIHtcbiAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgfVxuICAgIC8vIEZvcmNlIGxvYWQgdGhlIGltYWdlXG4gICAgZWxzZSB7XG4gICAgICAvLyBmaXggZm9yIElFLiBTZWUgaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9qcXVlcnkvZml4aW5nLWxvYWQtaW4taWUtZm9yLWNhY2hlZC1pbWFnZXMvXG4gICAgICB2YXIgc3JjID0gJCh0aGlzKS5hdHRyKCdzcmMnKTtcbiAgICAgICQodGhpcykuYXR0cignc3JjJywgc3JjICsgKHNyYy5pbmRleE9mKCc/JykgPj0gMCA/ICcmJyA6ICc/JykgKyAobmV3IERhdGUoKS5nZXRUaW1lKCkpKTtcbiAgICAgICQodGhpcykub25lKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHNpbmdsZUltYWdlTG9hZGVkKCkge1xuICAgIHVubG9hZGVkLS07XG4gICAgaWYgKHVubG9hZGVkID09PSAwKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfVxufVxuXG5Gb3VuZGF0aW9uLlRpbWVyID0gVGltZXI7XG5Gb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkID0gb25JbWFnZXNMb2FkZWQ7XG5cbn0oalF1ZXJ5KTtcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipXb3JrIGluc3BpcmVkIGJ5IG11bHRpcGxlIGpxdWVyeSBzd2lwZSBwbHVnaW5zKipcbi8vKipEb25lIGJ5IFlvaGFpIEFyYXJhdCAqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbihmdW5jdGlvbigkKSB7XG5cbiAgJC5zcG90U3dpcGUgPSB7XG4gICAgdmVyc2lvbjogJzEuMC4wJyxcbiAgICBlbmFibGVkOiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgcHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICAgIG1vdmVUaHJlc2hvbGQ6IDc1LFxuICAgIHRpbWVUaHJlc2hvbGQ6IDIwMFxuICB9O1xuXG4gIHZhciAgIHN0YXJ0UG9zWCxcbiAgICAgICAgc3RhcnRQb3NZLFxuICAgICAgICBzdGFydFRpbWUsXG4gICAgICAgIGVsYXBzZWRUaW1lLFxuICAgICAgICBpc01vdmluZyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgLy8gIGFsZXJ0KHRoaXMpO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUpO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoRW5kKTtcbiAgICBpc01vdmluZyA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZSkge1xuICAgIGlmICgkLnNwb3RTd2lwZS5wcmV2ZW50RGVmYXVsdCkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICBpZihpc01vdmluZykge1xuICAgICAgdmFyIHggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICB2YXIgeSA9IGUudG91Y2hlc1swXS5wYWdlWTtcbiAgICAgIHZhciBkeCA9IHN0YXJ0UG9zWCAtIHg7XG4gICAgICB2YXIgZHkgPSBzdGFydFBvc1kgLSB5O1xuICAgICAgdmFyIGRpcjtcbiAgICAgIGVsYXBzZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydFRpbWU7XG4gICAgICBpZihNYXRoLmFicyhkeCkgPj0gJC5zcG90U3dpcGUubW92ZVRocmVzaG9sZCAmJiBlbGFwc2VkVGltZSA8PSAkLnNwb3RTd2lwZS50aW1lVGhyZXNob2xkKSB7XG4gICAgICAgIGRpciA9IGR4ID4gMCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICB9XG4gICAgICAvLyBlbHNlIGlmKE1hdGguYWJzKGR5KSA+PSAkLnNwb3RTd2lwZS5tb3ZlVGhyZXNob2xkICYmIGVsYXBzZWRUaW1lIDw9ICQuc3BvdFN3aXBlLnRpbWVUaHJlc2hvbGQpIHtcbiAgICAgIC8vICAgZGlyID0gZHkgPiAwID8gJ2Rvd24nIDogJ3VwJztcbiAgICAgIC8vIH1cbiAgICAgIGlmKGRpcikge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uVG91Y2hFbmQuY2FsbCh0aGlzKTtcbiAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCdzd2lwZScsIGRpcikudHJpZ2dlcihgc3dpcGUke2Rpcn1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZSkge1xuICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID09IDEpIHtcbiAgICAgIHN0YXJ0UG9zWCA9IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIHN0YXJ0UG9zWSA9IGUudG91Y2hlc1swXS5wYWdlWTtcbiAgICAgIGlzTW92aW5nID0gdHJ1ZTtcbiAgICAgIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSwgZmFsc2UpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciAmJiB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRlYXJkb3duKCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCk7XG4gIH1cblxuICAkLmV2ZW50LnNwZWNpYWwuc3dpcGUgPSB7IHNldHVwOiBpbml0IH07XG5cbiAgJC5lYWNoKFsnbGVmdCcsICd1cCcsICdkb3duJywgJ3JpZ2h0J10sIGZ1bmN0aW9uICgpIHtcbiAgICAkLmV2ZW50LnNwZWNpYWxbYHN3aXBlJHt0aGlzfWBdID0geyBzZXR1cDogZnVuY3Rpb24oKXtcbiAgICAgICQodGhpcykub24oJ3N3aXBlJywgJC5ub29wKTtcbiAgICB9IH07XG4gIH0pO1xufSkoalF1ZXJ5KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBNZXRob2QgZm9yIGFkZGluZyBwc3VlZG8gZHJhZyBldmVudHMgdG8gZWxlbWVudHMgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiFmdW5jdGlvbigkKXtcbiAgJC5mbi5hZGRUb3VjaCA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGksZWwpe1xuICAgICAgJChlbCkuYmluZCgndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnLGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vd2UgcGFzcyB0aGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0IGJlY2F1c2UgdGhlIGpRdWVyeSBldmVudFxuICAgICAgICAvL29iamVjdCBpcyBub3JtYWxpemVkIHRvIHczYyBzcGVjcyBhbmQgZG9lcyBub3QgcHJvdmlkZSB0aGUgVG91Y2hMaXN0XG4gICAgICAgIGhhbmRsZVRvdWNoKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGhhbmRsZVRvdWNoID0gZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICBmaXJzdCA9IHRvdWNoZXNbMF0sXG4gICAgICAgICAgZXZlbnRUeXBlcyA9IHtcbiAgICAgICAgICAgIHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuICAgICAgICAgICAgdG91Y2htb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgICAgICAgICAgIHRvdWNoZW5kOiAnbW91c2V1cCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHR5cGUgPSBldmVudFR5cGVzW2V2ZW50LnR5cGVdLFxuICAgICAgICAgIHNpbXVsYXRlZEV2ZW50XG4gICAgICAgIDtcblxuICAgICAgaWYoJ01vdXNlRXZlbnQnIGluIHdpbmRvdyAmJiB0eXBlb2Ygd2luZG93Lk1vdXNlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2ltdWxhdGVkRXZlbnQgPSBuZXcgd2luZG93Lk1vdXNlRXZlbnQodHlwZSwge1xuICAgICAgICAgICdidWJibGVzJzogdHJ1ZSxcbiAgICAgICAgICAnY2FuY2VsYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3NjcmVlblgnOiBmaXJzdC5zY3JlZW5YLFxuICAgICAgICAgICdzY3JlZW5ZJzogZmlyc3Quc2NyZWVuWSxcbiAgICAgICAgICAnY2xpZW50WCc6IGZpcnN0LmNsaWVudFgsXG4gICAgICAgICAgJ2NsaWVudFknOiBmaXJzdC5jbGllbnRZXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2ltdWxhdGVkRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICAgICAgICBzaW11bGF0ZWRFdmVudC5pbml0TW91c2VFdmVudCh0eXBlLCB0cnVlLCB0cnVlLCB3aW5kb3csIDEsIGZpcnN0LnNjcmVlblgsIGZpcnN0LnNjcmVlblksIGZpcnN0LmNsaWVudFgsIGZpcnN0LmNsaWVudFksIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLypsZWZ0Ki8sIG51bGwpO1xuICAgICAgfVxuICAgICAgZmlyc3QudGFyZ2V0LmRpc3BhdGNoRXZlbnQoc2ltdWxhdGVkRXZlbnQpO1xuICAgIH07XG4gIH07XG59KGpRdWVyeSk7XG5cblxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyoqRnJvbSB0aGUgalF1ZXJ5IE1vYmlsZSBMaWJyYXJ5Kipcbi8vKipuZWVkIHRvIHJlY3JlYXRlIGZ1bmN0aW9uYWxpdHkqKlxuLy8qKmFuZCB0cnkgdG8gaW1wcm92ZSBpZiBwb3NzaWJsZSoqXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuLyogUmVtb3ZpbmcgdGhlIGpRdWVyeSBmdW5jdGlvbiAqKioqXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHtcblxuXHR2YXIgJGRvY3VtZW50ID0gJCggZG9jdW1lbnQgKSxcblx0XHQvLyBzdXBwb3J0VG91Y2ggPSAkLm1vYmlsZS5zdXBwb3J0LnRvdWNoLFxuXHRcdHRvdWNoU3RhcnRFdmVudCA9ICd0b3VjaHN0YXJ0Jy8vc3VwcG9ydFRvdWNoID8gXCJ0b3VjaHN0YXJ0XCIgOiBcIm1vdXNlZG93blwiLFxuXHRcdHRvdWNoU3RvcEV2ZW50ID0gJ3RvdWNoZW5kJy8vc3VwcG9ydFRvdWNoID8gXCJ0b3VjaGVuZFwiIDogXCJtb3VzZXVwXCIsXG5cdFx0dG91Y2hNb3ZlRXZlbnQgPSAndG91Y2htb3ZlJy8vc3VwcG9ydFRvdWNoID8gXCJ0b3VjaG1vdmVcIiA6IFwibW91c2Vtb3ZlXCI7XG5cblx0Ly8gc2V0dXAgbmV3IGV2ZW50IHNob3J0Y3V0c1xuXHQkLmVhY2goICggXCJ0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCBcIiArXG5cdFx0XCJzd2lwZSBzd2lwZWxlZnQgc3dpcGVyaWdodFwiICkuc3BsaXQoIFwiIFwiICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdFx0JC5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0cmV0dXJuIGZuID8gdGhpcy5iaW5kKCBuYW1lLCBmbiApIDogdGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblxuXHRcdC8vIGpRdWVyeSA8IDEuOFxuXHRcdGlmICggJC5hdHRyRm4gKSB7XG5cdFx0XHQkLmF0dHJGblsgbmFtZSBdID0gdHJ1ZTtcblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIHRyaWdnZXJDdXN0b21FdmVudCggb2JqLCBldmVudFR5cGUsIGV2ZW50LCBidWJibGUgKSB7XG5cdFx0dmFyIG9yaWdpbmFsVHlwZSA9IGV2ZW50LnR5cGU7XG5cdFx0ZXZlbnQudHlwZSA9IGV2ZW50VHlwZTtcblx0XHRpZiAoIGJ1YmJsZSApIHtcblx0XHRcdCQuZXZlbnQudHJpZ2dlciggZXZlbnQsIHVuZGVmaW5lZCwgb2JqICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCQuZXZlbnQuZGlzcGF0Y2guY2FsbCggb2JqLCBldmVudCApO1xuXHRcdH1cblx0XHRldmVudC50eXBlID0gb3JpZ2luYWxUeXBlO1xuXHR9XG5cblx0Ly8gYWxzbyBoYW5kbGVzIHRhcGhvbGRcblxuXHQvLyBBbHNvIGhhbmRsZXMgc3dpcGVsZWZ0LCBzd2lwZXJpZ2h0XG5cdCQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHtcblxuXHRcdC8vIE1vcmUgdGhhbiB0aGlzIGhvcml6b250YWwgZGlzcGxhY2VtZW50LCBhbmQgd2Ugd2lsbCBzdXBwcmVzcyBzY3JvbGxpbmcuXG5cdFx0c2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZDogMzAsXG5cblx0XHQvLyBNb3JlIHRpbWUgdGhhbiB0aGlzLCBhbmQgaXQgaXNuJ3QgYSBzd2lwZS5cblx0XHRkdXJhdGlvblRocmVzaG9sZDogMTAwMCxcblxuXHRcdC8vIFN3aXBlIGhvcml6b250YWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbW9yZSB0aGFuIHRoaXMuXG5cdFx0aG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+PSAyID8gMTUgOiAzMCxcblxuXHRcdC8vIFN3aXBlIHZlcnRpY2FsIGRpc3BsYWNlbWVudCBtdXN0IGJlIGxlc3MgdGhhbiB0aGlzLlxuXHRcdHZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQ6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID49IDIgPyAxNSA6IDMwLFxuXG5cdFx0Z2V0TG9jYXRpb246IGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cdFx0XHR2YXIgd2luUGFnZVggPSB3aW5kb3cucGFnZVhPZmZzZXQsXG5cdFx0XHRcdHdpblBhZ2VZID0gd2luZG93LnBhZ2VZT2Zmc2V0LFxuXHRcdFx0XHR4ID0gZXZlbnQuY2xpZW50WCxcblx0XHRcdFx0eSA9IGV2ZW50LmNsaWVudFk7XG5cblx0XHRcdGlmICggZXZlbnQucGFnZVkgPT09IDAgJiYgTWF0aC5mbG9vciggeSApID4gTWF0aC5mbG9vciggZXZlbnQucGFnZVkgKSB8fFxuXHRcdFx0XHRldmVudC5wYWdlWCA9PT0gMCAmJiBNYXRoLmZsb29yKCB4ICkgPiBNYXRoLmZsb29yKCBldmVudC5wYWdlWCApICkge1xuXG5cdFx0XHRcdC8vIGlPUzQgY2xpZW50WC9jbGllbnRZIGhhdmUgdGhlIHZhbHVlIHRoYXQgc2hvdWxkIGhhdmUgYmVlblxuXHRcdFx0XHQvLyBpbiBwYWdlWC9wYWdlWS4gV2hpbGUgcGFnZVgvcGFnZS8gaGF2ZSB0aGUgdmFsdWUgMFxuXHRcdFx0XHR4ID0geCAtIHdpblBhZ2VYO1xuXHRcdFx0XHR5ID0geSAtIHdpblBhZ2VZO1xuXHRcdFx0fSBlbHNlIGlmICggeSA8ICggZXZlbnQucGFnZVkgLSB3aW5QYWdlWSkgfHwgeCA8ICggZXZlbnQucGFnZVggLSB3aW5QYWdlWCApICkge1xuXG5cdFx0XHRcdC8vIFNvbWUgQW5kcm9pZCBicm93c2VycyBoYXZlIHRvdGFsbHkgYm9ndXMgdmFsdWVzIGZvciBjbGllbnRYL1lcblx0XHRcdFx0Ly8gd2hlbiBzY3JvbGxpbmcvem9vbWluZyBhIHBhZ2UuIERldGVjdGFibGUgc2luY2UgY2xpZW50WC9jbGllbnRZXG5cdFx0XHRcdC8vIHNob3VsZCBuZXZlciBiZSBzbWFsbGVyIHRoYW4gcGFnZVgvcGFnZVkgbWludXMgcGFnZSBzY3JvbGxcblx0XHRcdFx0eCA9IGV2ZW50LnBhZ2VYIC0gd2luUGFnZVg7XG5cdFx0XHRcdHkgPSBldmVudC5wYWdlWSAtIHdpblBhZ2VZO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR4OiB4LFxuXHRcdFx0XHR5OiB5XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRzdGFydDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIGRhdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgP1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1sgMCBdIDogZXZlbnQsXG5cdFx0XHRcdGxvY2F0aW9uID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmdldExvY2F0aW9uKCBkYXRhICk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dGltZTogKCBuZXcgRGF0ZSgpICkuZ2V0VGltZSgpLFxuXHRcdFx0XHRcdFx0Y29vcmRzOiBbIGxvY2F0aW9uLngsIGxvY2F0aW9uLnkgXSxcblx0XHRcdFx0XHRcdG9yaWdpbjogJCggZXZlbnQudGFyZ2V0IClcblx0XHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRzdG9wOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZGF0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA/XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCxcblx0XHRcdFx0bG9jYXRpb24gPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZ2V0TG9jYXRpb24oIGRhdGEgKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksXG5cdFx0XHRcdFx0XHRjb29yZHM6IFsgbG9jYXRpb24ueCwgbG9jYXRpb24ueSBdXG5cdFx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0aGFuZGxlU3dpcGU6IGZ1bmN0aW9uKCBzdGFydCwgc3RvcCwgdGhpc09iamVjdCwgb3JpZ1RhcmdldCApIHtcblx0XHRcdGlmICggc3RvcC50aW1lIC0gc3RhcnQudGltZSA8ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5kdXJhdGlvblRocmVzaG9sZCAmJlxuXHRcdFx0XHRNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuaG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkICYmXG5cdFx0XHRcdE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDEgXSAtIHN0b3AuY29vcmRzWyAxIF0gKSA8ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS52ZXJ0aWNhbERpc3RhbmNlVGhyZXNob2xkICkge1xuXHRcdFx0XHR2YXIgZGlyZWN0aW9uID0gc3RhcnQuY29vcmRzWzBdID4gc3RvcC5jb29yZHNbIDAgXSA/IFwic3dpcGVsZWZ0XCIgOiBcInN3aXBlcmlnaHRcIjtcblxuXHRcdFx0XHR0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsIFwic3dpcGVcIiwgJC5FdmVudCggXCJzd2lwZVwiLCB7IHRhcmdldDogb3JpZ1RhcmdldCwgc3dpcGVzdGFydDogc3RhcnQsIHN3aXBlc3RvcDogc3RvcCB9KSwgdHJ1ZSApO1xuXHRcdFx0XHR0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsIGRpcmVjdGlvbiwkLkV2ZW50KCBkaXJlY3Rpb24sIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0LCBzd2lwZXN0YXJ0OiBzdGFydCwgc3dpcGVzdG9wOiBzdG9wIH0gKSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH0sXG5cblx0XHQvLyBUaGlzIHNlcnZlcyBhcyBhIGZsYWcgdG8gZW5zdXJlIHRoYXQgYXQgbW9zdCBvbmUgc3dpcGUgZXZlbnQgZXZlbnQgaXNcblx0XHQvLyBpbiB3b3JrIGF0IGFueSBnaXZlbiB0aW1lXG5cdFx0ZXZlbnRJblByb2dyZXNzOiBmYWxzZSxcblxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBldmVudHMsXG5cdFx0XHRcdHRoaXNPYmplY3QgPSB0aGlzLFxuXHRcdFx0XHQkdGhpcyA9ICQoIHRoaXNPYmplY3QgKSxcblx0XHRcdFx0Y29udGV4dCA9IHt9O1xuXG5cdFx0XHQvLyBSZXRyaWV2ZSB0aGUgZXZlbnRzIGRhdGEgZm9yIHRoaXMgZWxlbWVudCBhbmQgYWRkIHRoZSBzd2lwZSBjb250ZXh0XG5cdFx0XHRldmVudHMgPSAkLmRhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRpZiAoICFldmVudHMgKSB7XG5cdFx0XHRcdGV2ZW50cyA9IHsgbGVuZ3RoOiAwIH07XG5cdFx0XHRcdCQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIsIGV2ZW50cyApO1xuXHRcdFx0fVxuXHRcdFx0ZXZlbnRzLmxlbmd0aCsrO1xuXHRcdFx0ZXZlbnRzLnN3aXBlID0gY29udGV4dDtcblxuXHRcdFx0Y29udGV4dC5zdGFydCA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBCYWlsIGlmIHdlJ3JlIGFscmVhZHkgd29ya2luZyBvbiBhIHN3aXBlIGV2ZW50XG5cdFx0XHRcdGlmICggJC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IHRydWU7XG5cblx0XHRcdFx0dmFyIHN0b3AsXG5cdFx0XHRcdFx0c3RhcnQgPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc3RhcnQoIGV2ZW50ICksXG5cdFx0XHRcdFx0b3JpZ1RhcmdldCA9IGV2ZW50LnRhcmdldCxcblx0XHRcdFx0XHRlbWl0dGVkID0gZmFsc2U7XG5cblx0XHRcdFx0Y29udGV4dC5tb3ZlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdGlmICggIXN0YXJ0IHx8IGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHN0b3AgPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc3RvcCggZXZlbnQgKTtcblx0XHRcdFx0XHRpZiAoICFlbWl0dGVkICkge1xuXHRcdFx0XHRcdFx0ZW1pdHRlZCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5oYW5kbGVTd2lwZSggc3RhcnQsIHN0b3AsIHRoaXNPYmplY3QsIG9yaWdUYXJnZXQgKTtcblx0XHRcdFx0XHRcdGlmICggZW1pdHRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXNldCB0aGUgY29udGV4dCB0byBtYWtlIHdheSBmb3IgdGhlIG5leHQgc3dpcGUgZXZlbnRcblx0XHRcdFx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBwcmV2ZW50IHNjcm9sbGluZ1xuXHRcdFx0XHRcdGlmICggTWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMCBdIC0gc3RvcC5jb29yZHNbIDAgXSApID4gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnNjcm9sbFN1cHJlc3Npb25UaHJlc2hvbGQgKSB7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRjb250ZXh0LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGVtaXR0ZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHQvLyBSZXNldCB0aGUgY29udGV4dCB0byBtYWtlIHdheSBmb3IgdGhlIG5leHQgc3dpcGUgZXZlbnRcblx0XHRcdFx0XHRcdCQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgPSBmYWxzZTtcblx0XHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKTtcblx0XHRcdFx0XHRcdGNvbnRleHQubW92ZSA9IG51bGw7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0JGRvY3VtZW50Lm9uKCB0b3VjaE1vdmVFdmVudCwgY29udGV4dC5tb3ZlIClcblx0XHRcdFx0XHQub25lKCB0b3VjaFN0b3BFdmVudCwgY29udGV4dC5zdG9wICk7XG5cdFx0XHR9O1xuXHRcdFx0JHRoaXMub24oIHRvdWNoU3RhcnRFdmVudCwgY29udGV4dC5zdGFydCApO1xuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZXZlbnRzLCBjb250ZXh0O1xuXG5cdFx0XHRldmVudHMgPSAkLmRhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdFx0Y29udGV4dCA9IGV2ZW50cy5zd2lwZTtcblx0XHRcdFx0ZGVsZXRlIGV2ZW50cy5zd2lwZTtcblx0XHRcdFx0ZXZlbnRzLmxlbmd0aC0tO1xuXHRcdFx0XHRpZiAoIGV2ZW50cy5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRcdFx0JC5yZW1vdmVEYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggY29udGV4dCApIHtcblx0XHRcdFx0aWYgKCBjb250ZXh0LnN0YXJ0ICkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5vZmYoIHRvdWNoU3RhcnRFdmVudCwgY29udGV4dC5zdGFydCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggY29udGV4dC5tb3ZlICkge1xuXHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGNvbnRleHQuc3RvcCApIHtcblx0XHRcdFx0XHQkZG9jdW1lbnQub2ZmKCB0b3VjaFN0b3BFdmVudCwgY29udGV4dC5zdG9wICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdCQuZWFjaCh7XG5cdFx0c3dpcGVsZWZ0OiBcInN3aXBlLmxlZnRcIixcblx0XHRzd2lwZXJpZ2h0OiBcInN3aXBlLnJpZ2h0XCJcblx0fSwgZnVuY3Rpb24oIGV2ZW50LCBzb3VyY2VFdmVudCApIHtcblxuXHRcdCQuZXZlbnQuc3BlY2lhbFsgZXZlbnQgXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLmJpbmQoIHNvdXJjZUV2ZW50LCAkLm5vb3AgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS51bmJpbmQoIHNvdXJjZUV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG59KSggalF1ZXJ5LCB0aGlzICk7XG4qL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBNdXRhdGlvbk9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHByZWZpeGVzID0gWydXZWJLaXQnLCAnTW96JywgJ08nLCAnTXMnLCAnJ107XG4gIGZvciAodmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGAke3ByZWZpeGVzW2ldfU11dGF0aW9uT2JzZXJ2ZXJgIGluIHdpbmRvdykge1xuICAgICAgcmV0dXJuIHdpbmRvd1tgJHtwcmVmaXhlc1tpXX1NdXRhdGlvbk9ic2VydmVyYF07XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn0oKSk7XG5cbmNvbnN0IHRyaWdnZXJzID0gKGVsLCB0eXBlKSA9PiB7XG4gIGVsLmRhdGEodHlwZSkuc3BsaXQoJyAnKS5mb3JFYWNoKGlkID0+IHtcbiAgICAkKGAjJHtpZH1gKVsgdHlwZSA9PT0gJ2Nsb3NlJyA/ICd0cmlnZ2VyJyA6ICd0cmlnZ2VySGFuZGxlciddKGAke3R5cGV9LnpmLnRyaWdnZXJgLCBbZWxdKTtcbiAgfSk7XG59O1xuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1vcGVuXSB3aWxsIHJldmVhbCBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbiQoZG9jdW1lbnQpLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLW9wZW5dJywgZnVuY3Rpb24oKSB7XG4gIHRyaWdnZXJzKCQodGhpcyksICdvcGVuJyk7XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zZV0gd2lsbCBjbG9zZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbi8vIElmIHVzZWQgd2l0aG91dCBhIHZhbHVlIG9uIFtkYXRhLWNsb3NlXSwgdGhlIGV2ZW50IHdpbGwgYnViYmxlLCBhbGxvd2luZyBpdCB0byBjbG9zZSBhIHBhcmVudCBjb21wb25lbnQuXG4kKGRvY3VtZW50KS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS1jbG9zZV0nLCBmdW5jdGlvbigpIHtcbiAgbGV0IGlkID0gJCh0aGlzKS5kYXRhKCdjbG9zZScpO1xuICBpZiAoaWQpIHtcbiAgICB0cmlnZ2VycygkKHRoaXMpLCAnY2xvc2UnKTtcbiAgfVxuICBlbHNlIHtcbiAgICAkKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlLnpmLnRyaWdnZXInKTtcbiAgfVxufSk7XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtdG9nZ2xlXSB3aWxsIHRvZ2dsZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbiQoZG9jdW1lbnQpLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZV0nLCBmdW5jdGlvbigpIHtcbiAgbGV0IGlkID0gJCh0aGlzKS5kYXRhKCd0b2dnbGUnKTtcbiAgaWYgKGlkKSB7XG4gICAgdHJpZ2dlcnMoJCh0aGlzKSwgJ3RvZ2dsZScpO1xuICB9IGVsc2Uge1xuICAgICQodGhpcykudHJpZ2dlcigndG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgfVxufSk7XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtY2xvc2FibGVdIHdpbGwgcmVzcG9uZCB0byBjbG9zZS56Zi50cmlnZ2VyIGV2ZW50cy5cbiQoZG9jdW1lbnQpLm9uKCdjbG9zZS56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NhYmxlXScsIGZ1bmN0aW9uKGUpe1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICBsZXQgYW5pbWF0aW9uID0gJCh0aGlzKS5kYXRhKCdjbG9zYWJsZScpO1xuXG4gIGlmKGFuaW1hdGlvbiAhPT0gJycpe1xuICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQoJCh0aGlzKSwgYW5pbWF0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgICQodGhpcykudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gICAgfSk7XG4gIH1lbHNle1xuICAgICQodGhpcykuZmFkZU91dCgpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICB9XG59KTtcblxuJChkb2N1bWVudCkub24oJ2ZvY3VzLnpmLnRyaWdnZXIgYmx1ci56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZS1mb2N1c10nLCBmdW5jdGlvbigpIHtcbiAgbGV0IGlkID0gJCh0aGlzKS5kYXRhKCd0b2dnbGUtZm9jdXMnKTtcbiAgJChgIyR7aWR9YCkudHJpZ2dlckhhbmRsZXIoJ3RvZ2dsZS56Zi50cmlnZ2VyJywgWyQodGhpcyldKTtcbn0pO1xuXG4vKipcbiogRmlyZXMgb25jZSBhZnRlciBhbGwgb3RoZXIgc2NyaXB0cyBoYXZlIGxvYWRlZFxuKiBAZnVuY3Rpb25cbiogQHByaXZhdGVcbiovXG4kKHdpbmRvdykub24oJ2xvYWQnLCAoKSA9PiB7XG4gIGNoZWNrTGlzdGVuZXJzKCk7XG59KTtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcnMoKSB7XG4gIGV2ZW50c0xpc3RlbmVyKCk7XG4gIHJlc2l6ZUxpc3RlbmVyKCk7XG4gIHNjcm9sbExpc3RlbmVyKCk7XG4gIG11dGF0ZUxpc3RlbmVyKCk7XG4gIGNsb3NlbWVMaXN0ZW5lcigpO1xufVxuXG4vLyoqKioqKioqIG9ubHkgZmlyZXMgdGhpcyBmdW5jdGlvbiBvbmNlIG9uIGxvYWQsIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIHRvIHdhdGNoICoqKioqKioqXG5mdW5jdGlvbiBjbG9zZW1lTGlzdGVuZXIocGx1Z2luTmFtZSkge1xuICB2YXIgeWV0aUJveGVzID0gJCgnW2RhdGEteWV0aS1ib3hdJyksXG4gICAgICBwbHVnTmFtZXMgPSBbJ2Ryb3Bkb3duJywgJ3Rvb2x0aXAnLCAncmV2ZWFsJ107XG5cbiAgaWYocGx1Z2luTmFtZSl7XG4gICAgaWYodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdzdHJpbmcnKXtcbiAgICAgIHBsdWdOYW1lcy5wdXNoKHBsdWdpbk5hbWUpO1xuICAgIH1lbHNlIGlmKHR5cGVvZiBwbHVnaW5OYW1lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcGx1Z2luTmFtZVswXSA9PT0gJ3N0cmluZycpe1xuICAgICAgcGx1Z05hbWVzLmNvbmNhdChwbHVnaW5OYW1lKTtcbiAgICB9ZWxzZXtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1BsdWdpbiBuYW1lcyBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gIH1cbiAgaWYoeWV0aUJveGVzLmxlbmd0aCl7XG4gICAgbGV0IGxpc3RlbmVycyA9IHBsdWdOYW1lcy5tYXAoKG5hbWUpID0+IHtcbiAgICAgIHJldHVybiBgY2xvc2VtZS56Zi4ke25hbWV9YDtcbiAgICB9KS5qb2luKCcgJyk7XG5cbiAgICAkKHdpbmRvdykub2ZmKGxpc3RlbmVycykub24obGlzdGVuZXJzLCBmdW5jdGlvbihlLCBwbHVnaW5JZCl7XG4gICAgICBsZXQgcGx1Z2luID0gZS5uYW1lc3BhY2Uuc3BsaXQoJy4nKVswXTtcbiAgICAgIGxldCBwbHVnaW5zID0gJChgW2RhdGEtJHtwbHVnaW59XWApLm5vdChgW2RhdGEteWV0aS1ib3g9XCIke3BsdWdpbklkfVwiXWApO1xuXG4gICAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgbGV0IF90aGlzID0gJCh0aGlzKTtcblxuICAgICAgICBfdGhpcy50cmlnZ2VySGFuZGxlcignY2xvc2UuemYudHJpZ2dlcicsIFtfdGhpc10pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzaXplTGlzdGVuZXIoZGVib3VuY2Upe1xuICBsZXQgdGltZXIsXG4gICAgICAkbm9kZXMgPSAkKCdbZGF0YS1yZXNpemVdJyk7XG4gIGlmKCRub2Rlcy5sZW5ndGgpe1xuICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS56Zi50cmlnZ2VyJylcbiAgICAub24oJ3Jlc2l6ZS56Zi50cmlnZ2VyJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKHRpbWVyKSB7IGNsZWFyVGltZW91dCh0aW1lcik7IH1cblxuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgaWYoIU11dGF0aW9uT2JzZXJ2ZXIpey8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSByZXNpemUgZXZlbnRcbiAgICAgICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJyZXNpemVcIik7XG4gICAgICB9LCBkZWJvdW5jZSB8fCAxMCk7Ly9kZWZhdWx0IHRpbWUgdG8gZW1pdCByZXNpemUgZXZlbnRcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzY3JvbGxMaXN0ZW5lcihkZWJvdW5jZSl7XG4gIGxldCB0aW1lcixcbiAgICAgICRub2RlcyA9ICQoJ1tkYXRhLXNjcm9sbF0nKTtcbiAgaWYoJG5vZGVzLmxlbmd0aCl7XG4gICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsLnpmLnRyaWdnZXInKVxuICAgIC5vbignc2Nyb2xsLnpmLnRyaWdnZXInLCBmdW5jdGlvbihlKXtcbiAgICAgIGlmKHRpbWVyKXsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgfVxuXG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblxuICAgICAgICBpZighTXV0YXRpb25PYnNlcnZlcil7Ly9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHNjcm9sbCBldmVudFxuICAgICAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInNjcm9sbFwiKTtcbiAgICAgIH0sIGRlYm91bmNlIHx8IDEwKTsvL2RlZmF1bHQgdGltZSB0byBlbWl0IHNjcm9sbCBldmVudFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG11dGF0ZUxpc3RlbmVyKGRlYm91bmNlKSB7XG4gICAgbGV0ICRub2RlcyA9ICQoJ1tkYXRhLW11dGF0ZV0nKTtcbiAgICBpZiAoJG5vZGVzLmxlbmd0aCAmJiBNdXRhdGlvbk9ic2VydmVyKXtcblx0XHRcdC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBtdXRhdGUgZXZlbnRcbiAgICAgIC8vbm8gSUUgOSBvciAxMFxuXHRcdFx0JG5vZGVzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0ICAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG5cdFx0XHR9KTtcbiAgICB9XG4gfVxuXG5mdW5jdGlvbiBldmVudHNMaXN0ZW5lcigpIHtcbiAgaWYoIU11dGF0aW9uT2JzZXJ2ZXIpeyByZXR1cm4gZmFsc2U7IH1cbiAgbGV0IG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcmVzaXplXSwgW2RhdGEtc2Nyb2xsXSwgW2RhdGEtbXV0YXRlXScpO1xuXG4gIC8vZWxlbWVudCBjYWxsYmFja1xuICB2YXIgbGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiA9IGZ1bmN0aW9uIChtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgICB2YXIgJHRhcmdldCA9ICQobXV0YXRpb25SZWNvcmRzTGlzdFswXS50YXJnZXQpO1xuXG5cdCAgLy90cmlnZ2VyIHRoZSBldmVudCBoYW5kbGVyIGZvciB0aGUgZWxlbWVudCBkZXBlbmRpbmcgb24gdHlwZVxuICAgICAgc3dpdGNoIChtdXRhdGlvblJlY29yZHNMaXN0WzBdLnR5cGUpIHtcblxuICAgICAgICBjYXNlIFwiYXR0cmlidXRlc1wiOlxuICAgICAgICAgIGlmICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSA9PT0gXCJzY3JvbGxcIiAmJiBtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwiZGF0YS1ldmVudHNcIikge1xuXHRcdCAgXHQkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQsIHdpbmRvdy5wYWdlWU9mZnNldF0pO1xuXHRcdCAgfVxuXHRcdCAgaWYgKCR0YXJnZXQuYXR0cihcImRhdGEtZXZlbnRzXCIpID09PSBcInJlc2l6ZVwiICYmIG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLWV2ZW50c1wiKSB7XG5cdFx0ICBcdCR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldF0pO1xuXHRcdCAgIH1cblx0XHQgIGlmIChtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwic3R5bGVcIikge1xuXHRcdFx0ICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLFwibXV0YXRlXCIpO1xuXHRcdFx0ICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcblx0XHQgIH1cblx0XHQgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJjaGlsZExpc3RcIjpcblx0XHQgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsXCJtdXRhdGVcIik7XG5cdFx0ICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy9ub3RoaW5nXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChub2Rlcy5sZW5ndGgpIHtcbiAgICAgIC8vZm9yIGVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRvIGxpc3RlbiBmb3IgcmVzaXppbmcsIHNjcm9sbGluZywgb3IgbXV0YXRpb24gYWRkIGEgc2luZ2xlIG9ic2VydmVyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBub2Rlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZW1lbnRPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24pO1xuICAgICAgICBlbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZShub2Rlc1tpXSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIGNoYXJhY3RlckRhdGE6IGZhbHNlLCBzdWJ0cmVlOiB0cnVlLCBhdHRyaWJ1dGVGaWx0ZXI6IFtcImRhdGEtZXZlbnRzXCIsIFwic3R5bGVcIl0gfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBbUEhdXG4vLyBGb3VuZGF0aW9uLkNoZWNrV2F0Y2hlcnMgPSBjaGVja1dhdGNoZXJzO1xuRm91bmRhdGlvbi5JSGVhcllvdSA9IGNoZWNrTGlzdGVuZXJzO1xuLy8gRm91bmRhdGlvbi5JU2VlWW91ID0gc2Nyb2xsTGlzdGVuZXI7XG4vLyBGb3VuZGF0aW9uLklGZWVsWW91ID0gY2xvc2VtZUxpc3RlbmVyO1xuXG59KGpRdWVyeSk7XG5cbi8vIGZ1bmN0aW9uIGRvbU11dGF0aW9uT2JzZXJ2ZXIoZGVib3VuY2UpIHtcbi8vICAgLy8gISEhIFRoaXMgaXMgY29taW5nIHNvb24gYW5kIG5lZWRzIG1vcmUgd29yazsgbm90IGFjdGl2ZSAgISEhIC8vXG4vLyAgIHZhciB0aW1lcixcbi8vICAgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tdXRhdGVdJyk7XG4vLyAgIC8vXG4vLyAgIGlmIChub2Rlcy5sZW5ndGgpIHtcbi8vICAgICAvLyB2YXIgTXV0YXRpb25PYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4vLyAgICAgLy8gICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbi8vICAgICAvLyAgIGZvciAodmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgLy8gICAgIGlmIChwcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHtcbi8vICAgICAvLyAgICAgICByZXR1cm4gd2luZG93W3ByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInXTtcbi8vICAgICAvLyAgICAgfVxuLy8gICAgIC8vICAgfVxuLy8gICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuLy8gICAgIC8vIH0oKSk7XG4vL1xuLy9cbi8vICAgICAvL2ZvciB0aGUgYm9keSwgd2UgbmVlZCB0byBsaXN0ZW4gZm9yIGFsbCBjaGFuZ2VzIGVmZmVjdGluZyB0aGUgc3R5bGUgYW5kIGNsYXNzIGF0dHJpYnV0ZXNcbi8vICAgICB2YXIgYm9keU9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoYm9keU11dGF0aW9uKTtcbi8vICAgICBib2R5T2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogZmFsc2UsIHN1YnRyZWU6dHJ1ZSwgYXR0cmlidXRlRmlsdGVyOltcInN0eWxlXCIsIFwiY2xhc3NcIl19KTtcbi8vXG4vL1xuLy8gICAgIC8vYm9keSBjYWxsYmFja1xuLy8gICAgIGZ1bmN0aW9uIGJvZHlNdXRhdGlvbihtdXRhdGUpIHtcbi8vICAgICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBtdXRhdGlvbiBldmVudFxuLy8gICAgICAgaWYgKHRpbWVyKSB7IGNsZWFyVGltZW91dCh0aW1lcik7IH1cbi8vXG4vLyAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgIGJvZHlPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4vLyAgICAgICAgICQoJ1tkYXRhLW11dGF0ZV0nKS5hdHRyKCdkYXRhLWV2ZW50cycsXCJtdXRhdGVcIik7XG4vLyAgICAgICB9LCBkZWJvdW5jZSB8fCAxNTApO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gfVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE1hZ2VsbGFuIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tYWdlbGxhblxuICovXG5cbmNsYXNzIE1hZ2VsbGFuIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgTWFnZWxsYW4uXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgTWFnZWxsYW4jaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zICA9ICQuZXh0ZW5kKHt9LCBNYWdlbGxhbi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuY2FsY1BvaW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnTWFnZWxsYW4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgTWFnZWxsYW4gcGx1Z2luIGFuZCBjYWxscyBmdW5jdGlvbnMgdG8gZ2V0IGVxdWFsaXplciBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdtYWdlbGxhbicpO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy4kdGFyZ2V0cyA9ICQoJ1tkYXRhLW1hZ2VsbGFuLXRhcmdldF0nKTtcbiAgICB0aGlzLiRsaW5rcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnYScpO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAnZGF0YS1yZXNpemUnOiBpZCxcbiAgICAgICdkYXRhLXNjcm9sbCc6IGlkLFxuICAgICAgJ2lkJzogaWRcbiAgICB9KTtcbiAgICB0aGlzLiRhY3RpdmUgPSAkKCk7XG4gICAgdGhpcy5zY3JvbGxQb3MgPSBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQsIDEwKTtcblxuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYW4gYXJyYXkgb2YgcGl4ZWwgdmFsdWVzIHRoYXQgYXJlIHRoZSBkZW1hcmNhdGlvbiBsaW5lcyBiZXR3ZWVuIGxvY2F0aW9ucyBvbiB0aGUgcGFnZS5cbiAgICogQ2FuIGJlIGludm9rZWQgaWYgbmV3IGVsZW1lbnRzIGFyZSBhZGRlZCBvciB0aGUgc2l6ZSBvZiBhIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgY2FsY1BvaW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBib2R5ID0gZG9jdW1lbnQuYm9keSxcbiAgICAgICAgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgIHRoaXMucG9pbnRzID0gW107XG4gICAgdGhpcy53aW5IZWlnaHQgPSBNYXRoLnJvdW5kKE1hdGgubWF4KHdpbmRvdy5pbm5lckhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQpKTtcbiAgICB0aGlzLmRvY0hlaWdodCA9IE1hdGgucm91bmQoTWF0aC5tYXgoYm9keS5zY3JvbGxIZWlnaHQsIGJvZHkub2Zmc2V0SGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwub2Zmc2V0SGVpZ2h0KSk7XG5cbiAgICB0aGlzLiR0YXJnZXRzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIHZhciAkdGFyID0gJCh0aGlzKSxcbiAgICAgICAgICBwdCA9IE1hdGgucm91bmQoJHRhci5vZmZzZXQoKS50b3AgLSBfdGhpcy5vcHRpb25zLnRocmVzaG9sZCk7XG4gICAgICAkdGFyLnRhcmdldFBvaW50ID0gcHQ7XG4gICAgICBfdGhpcy5wb2ludHMucHVzaChwdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBNYWdlbGxhbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgJGJvZHkgPSAkKCdodG1sLCBib2R5JyksXG4gICAgICAgIG9wdHMgPSB7XG4gICAgICAgICAgZHVyYXRpb246IF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICAgICAgZWFzaW5nOiAgIF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nXG4gICAgICAgIH07XG4gICAgJCh3aW5kb3cpLm9uZSgnbG9hZCcsIGZ1bmN0aW9uKCl7XG4gICAgICBpZihfdGhpcy5vcHRpb25zLmRlZXBMaW5raW5nKXtcbiAgICAgICAgaWYobG9jYXRpb24uaGFzaCl7XG4gICAgICAgICAgX3RoaXMuc2Nyb2xsVG9Mb2MobG9jYXRpb24uaGFzaCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzLmNhbGNQb2ludHMoKTtcbiAgICAgIF90aGlzLl91cGRhdGVBY3RpdmUoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLnJlZmxvdy5iaW5kKHRoaXMpLFxuICAgICAgJ3Njcm9sbG1lLnpmLnRyaWdnZXInOiB0aGlzLl91cGRhdGVBY3RpdmUuYmluZCh0aGlzKVxuICAgIH0pLm9uKCdjbGljay56Zi5tYWdlbGxhbicsICdhW2hyZWZePVwiI1wiXScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgYXJyaXZhbCAgID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgICAgX3RoaXMuc2Nyb2xsVG9Mb2MoYXJyaXZhbCk7XG4gICAgICB9KTtcbiAgICAkKHdpbmRvdykub24oJ3BvcHN0YXRlJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5kZWVwTGlua2luZykge1xuICAgICAgICBfdGhpcy5zY3JvbGxUb0xvYyh3aW5kb3cubG9jYXRpb24uaGFzaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gbG9jYXRpb24gb24gdGhlIHBhZ2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBsb2MgLSBhIHByb3Blcmx5IGZvcm1hdHRlZCBqUXVlcnkgaWQgc2VsZWN0b3IuIEV4YW1wbGU6ICcjZm9vJ1xuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHNjcm9sbFRvTG9jKGxvYykge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgdGFyZ2V0IGRvZXMgbm90IGV4aXN0IHRvIHByZXZlbnQgZXJyb3JzXG4gICAgaWYgKCEkKGxvYykubGVuZ3RoKSB7cmV0dXJuIGZhbHNlO31cbiAgICB0aGlzLl9pblRyYW5zaXRpb24gPSB0cnVlO1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHNjcm9sbFBvcyA9IE1hdGgucm91bmQoJChsb2MpLm9mZnNldCgpLnRvcCAtIHRoaXMub3B0aW9ucy50aHJlc2hvbGQgLyAyIC0gdGhpcy5vcHRpb25zLmJhck9mZnNldCk7XG5cbiAgICAkKCdodG1sLCBib2R5Jykuc3RvcCh0cnVlKS5hbmltYXRlKFxuICAgICAgeyBzY3JvbGxUb3A6IHNjcm9sbFBvcyB9LFxuICAgICAgdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZyxcbiAgICAgIGZ1bmN0aW9uKCkge190aGlzLl9pblRyYW5zaXRpb24gPSBmYWxzZTsgX3RoaXMuX3VwZGF0ZUFjdGl2ZSgpfVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgTWFnZWxsYW4gdXBvbiBET00gY2hhbmdlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgcmVmbG93KCkge1xuICAgIHRoaXMuY2FsY1BvaW50cygpO1xuICAgIHRoaXMuX3VwZGF0ZUFjdGl2ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHZpc2liaWxpdHkgb2YgYW4gYWN0aXZlIGxvY2F0aW9uIGxpbmssIGFuZCB1cGRhdGVzIHRoZSB1cmwgaGFzaCBmb3IgdGhlIHBhZ2UsIGlmIGRlZXBMaW5raW5nIGVuYWJsZWQuXG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgTWFnZWxsYW4jdXBkYXRlXG4gICAqL1xuICBfdXBkYXRlQWN0aXZlKC8qZXZ0LCBlbGVtLCBzY3JvbGxQb3MqLykge1xuICAgIGlmKHRoaXMuX2luVHJhbnNpdGlvbikge3JldHVybjt9XG4gICAgdmFyIHdpblBvcyA9IC8qc2Nyb2xsUG9zIHx8Ki8gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCksXG4gICAgICAgIGN1cklkeDtcblxuICAgIGlmKHdpblBvcyArIHRoaXMud2luSGVpZ2h0ID09PSB0aGlzLmRvY0hlaWdodCl7IGN1cklkeCA9IHRoaXMucG9pbnRzLmxlbmd0aCAtIDE7IH1cbiAgICBlbHNlIGlmKHdpblBvcyA8IHRoaXMucG9pbnRzWzBdKXsgY3VySWR4ID0gdW5kZWZpbmVkOyB9XG4gICAgZWxzZXtcbiAgICAgIHZhciBpc0Rvd24gPSB0aGlzLnNjcm9sbFBvcyA8IHdpblBvcyxcbiAgICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgY3VyVmlzaWJsZSA9IHRoaXMucG9pbnRzLmZpbHRlcihmdW5jdGlvbihwLCBpKXtcbiAgICAgICAgICAgIHJldHVybiBpc0Rvd24gPyBwIC0gX3RoaXMub3B0aW9ucy5iYXJPZmZzZXQgPD0gd2luUG9zIDogcCAtIF90aGlzLm9wdGlvbnMuYmFyT2Zmc2V0IC0gX3RoaXMub3B0aW9ucy50aHJlc2hvbGQgPD0gd2luUG9zO1xuICAgICAgICAgIH0pO1xuICAgICAgY3VySWR4ID0gY3VyVmlzaWJsZS5sZW5ndGggPyBjdXJWaXNpYmxlLmxlbmd0aCAtIDEgOiAwO1xuICAgIH1cblxuICAgIHRoaXMuJGFjdGl2ZS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xuICAgIHRoaXMuJGFjdGl2ZSA9IHRoaXMuJGxpbmtzLmZpbHRlcignW2hyZWY9XCIjJyArIHRoaXMuJHRhcmdldHMuZXEoY3VySWR4KS5kYXRhKCdtYWdlbGxhbi10YXJnZXQnKSArICdcIl0nKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmRlZXBMaW5raW5nKXtcbiAgICAgIHZhciBoYXNoID0gXCJcIjtcbiAgICAgIGlmKGN1cklkeCAhPSB1bmRlZmluZWQpe1xuICAgICAgICBoYXNoID0gdGhpcy4kYWN0aXZlWzBdLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgfVxuICAgICAgaWYoaGFzaCAhPT0gd2luZG93LmxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgaWYod2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKXtcbiAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgaGFzaCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsUG9zID0gd2luUG9zO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gbWFnZWxsYW4gaXMgZmluaXNoZWQgdXBkYXRpbmcgdG8gdGhlIG5ldyBhY3RpdmUgZWxlbWVudC5cbiAgICAgKiBAZXZlbnQgTWFnZWxsYW4jdXBkYXRlXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cGRhdGUuemYubWFnZWxsYW4nLCBbdGhpcy4kYWN0aXZlXSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgTWFnZWxsYW4gYW5kIHJlc2V0cyB0aGUgdXJsIG9mIHRoZSB3aW5kb3cuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm1hZ2VsbGFuJylcbiAgICAgICAgLmZpbmQoYC4ke3RoaXMub3B0aW9ucy5hY3RpdmVDbGFzc31gKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmRlZXBMaW5raW5nKXtcbiAgICAgIHZhciBoYXNoID0gdGhpcy4kYWN0aXZlWzBdLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZShoYXNoLCAnJyk7XG4gICAgfVxuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cbk1hZ2VsbGFuLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUsIGluIG1zLCB0aGUgYW5pbWF0ZWQgc2Nyb2xsaW5nIHNob3VsZCB0YWtlIGJldHdlZW4gbG9jYXRpb25zLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwMFxuICAgKi9cbiAgYW5pbWF0aW9uRHVyYXRpb246IDUwMCxcbiAgLyoqXG4gICAqIEFuaW1hdGlvbiBzdHlsZSB0byB1c2Ugd2hlbiBzY3JvbGxpbmcgYmV0d2VlbiBsb2NhdGlvbnMuIENhbiBiZSBgJ3N3aW5nJ2Agb3IgYCdsaW5lYXInYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnbGluZWFyJ1xuICAgKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2FuaW1hdGV8SnF1ZXJ5IGFuaW1hdGV9XG4gICAqL1xuICBhbmltYXRpb25FYXNpbmc6ICdsaW5lYXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyB0byB1c2UgYXMgYSBtYXJrZXIgZm9yIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgNTBcbiAgICovXG4gIHRocmVzaG9sZDogNTAsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBhY3RpdmUgbG9jYXRpb25zIGxpbmsgb24gdGhlIG1hZ2VsbGFuIGNvbnRhaW5lci5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnYWN0aXZlJ1xuICAgKi9cbiAgYWN0aXZlQ2xhc3M6ICdhY3RpdmUnLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBzY3JpcHQgdG8gbWFuaXB1bGF0ZSB0aGUgdXJsIG9mIHRoZSBjdXJyZW50IHBhZ2UsIGFuZCBpZiBzdXBwb3J0ZWQsIGFsdGVyIHRoZSBoaXN0b3J5LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbmtpbmc6IGZhbHNlLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyB0byBvZmZzZXQgdGhlIHNjcm9sbCBvZiB0aGUgcGFnZSBvbiBpdGVtIGNsaWNrIGlmIHVzaW5nIGEgc3RpY2t5IG5hdiBiYXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgYmFyT2Zmc2V0OiAwXG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihNYWdlbGxhbiwgJ01hZ2VsbGFuJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBSZXNwb25zaXZlVG9nZ2xlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlVG9nZ2xlXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqL1xuXG5jbGFzcyBSZXNwb25zaXZlVG9nZ2xlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVGFiIEJhci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlVG9nZ2xlI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGF0dGFjaCB0YWIgYmFyIGZ1bmN0aW9uYWxpdHkgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSB0YWIgYmFyIGJ5IGZpbmRpbmcgdGhlIHRhcmdldCBlbGVtZW50LCB0b2dnbGluZyBlbGVtZW50LCBhbmQgcnVubmluZyB1cGRhdGUoKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgdGFyZ2V0SUQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtdG9nZ2xlJyk7XG4gICAgaWYgKCF0YXJnZXRJRCkge1xuICAgICAgY29uc29sZS5lcnJvcignWW91ciB0YWIgYmFyIG5lZWRzIGFuIElEIG9mIGEgTWVudSBhcyB0aGUgdmFsdWUgb2YgZGF0YS10YWItYmFyLicpO1xuICAgIH1cblxuICAgIHRoaXMuJHRhcmdldE1lbnUgPSAkKGAjJHt0YXJnZXRJRH1gKTtcbiAgICB0aGlzLiR0b2dnbGVyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS10b2dnbGVdJykuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRhcmdldCA9ICQodGhpcykuZGF0YSgndG9nZ2xlJyk7XG4gICAgICByZXR1cm4gKHRhcmdldCA9PT0gdGFyZ2V0SUQgfHwgdGFyZ2V0ID09PSBcIlwiKTtcbiAgICB9KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB0aGlzLiR0YXJnZXRNZW51LmRhdGEoKSk7XG5cbiAgICAvLyBJZiB0aGV5IHdlcmUgc2V0LCBwYXJzZSB0aGUgYW5pbWF0aW9uIGNsYXNzZXNcbiAgICBpZih0aGlzLm9wdGlvbnMuYW5pbWF0ZSkge1xuICAgICAgbGV0IGlucHV0ID0gdGhpcy5vcHRpb25zLmFuaW1hdGUuc3BsaXQoJyAnKTtcblxuICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGlucHV0WzBdO1xuICAgICAgdGhpcy5hbmltYXRpb25PdXQgPSBpbnB1dFsxXSB8fCBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgbmVjZXNzYXJ5IGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgdGFiIGJhciB0byB3b3JrLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuX3VwZGF0ZU1xSGFuZGxlciA9IHRoaXMuX3VwZGF0ZS5iaW5kKHRoaXMpO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl91cGRhdGVNcUhhbmRsZXIpO1xuXG4gICAgdGhpcy4kdG9nZ2xlci5vbignY2xpY2suemYucmVzcG9uc2l2ZVRvZ2dsZScsIHRoaXMudG9nZ2xlTWVudS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgbWVkaWEgcXVlcnkgdG8gZGV0ZXJtaW5lIGlmIHRoZSB0YWIgYmFyIHNob3VsZCBiZSB2aXNpYmxlIG9yIGhpZGRlbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlKCkge1xuICAgIC8vIE1vYmlsZVxuICAgIGlmICghRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLmhpZGVGb3IpKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnNob3coKTtcbiAgICAgIHRoaXMuJHRhcmdldE1lbnUuaGlkZSgpO1xuICAgIH1cblxuICAgIC8vIERlc2t0b3BcbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpO1xuICAgICAgdGhpcy4kdGFyZ2V0TWVudS5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIGVsZW1lbnQgYXR0YWNoZWQgdG8gdGhlIHRhYiBiYXIuIFRoZSB0b2dnbGUgb25seSBoYXBwZW5zIGlmIHRoZSBzY3JlZW4gaXMgc21hbGwgZW5vdWdoIHRvIGFsbG93IGl0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFJlc3BvbnNpdmVUb2dnbGUjdG9nZ2xlZFxuICAgKi9cbiAgdG9nZ2xlTWVudSgpIHtcbiAgICBpZiAoIUZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5oaWRlRm9yKSkge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBlbGVtZW50IGF0dGFjaGVkIHRvIHRoZSB0YWIgYmFyIHRvZ2dsZXMuXG4gICAgICAgKiBAZXZlbnQgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAgICAgKi9cbiAgICAgIGlmKHRoaXMub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLiR0YXJnZXRNZW51LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kdGFyZ2V0TWVudSwgdGhpcy5hbmltYXRpb25JbiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd0b2dnbGVkLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcbiAgICAgICAgICAgIHRoaXMuJHRhcmdldE1lbnUuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiR0YXJnZXRNZW51LCB0aGlzLmFuaW1hdGlvbk91dCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd0b2dnbGVkLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuJHRhcmdldE1lbnUudG9nZ2xlKDApO1xuICAgICAgICB0aGlzLiR0YXJnZXRNZW51LmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgdGhpcy4kdG9nZ2xlci5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG5cbiAgICAkKHdpbmRvdykub2ZmKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl91cGRhdGVNcUhhbmRsZXIpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblJlc3BvbnNpdmVUb2dnbGUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBUaGUgYnJlYWtwb2ludCBhZnRlciB3aGljaCB0aGUgbWVudSBpcyBhbHdheXMgc2hvd24sIGFuZCB0aGUgdGFiIGJhciBpcyBoaWRkZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIGhpZGVGb3I6ICdtZWRpdW0nLFxuXG4gIC8qKlxuICAgKiBUbyBkZWNpZGUgaWYgdGhlIHRvZ2dsZSBzaG91bGQgYmUgYW5pbWF0ZWQgb3Igbm90LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYW5pbWF0ZTogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXNwb25zaXZlVG9nZ2xlLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogU3RpY2t5IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5zdGlja3lcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICovXG5cbmNsYXNzIFN0aWNreSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgc3RpY2t5IHRoaW5nLlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2Ugc3RpY2t5LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB3aGVuIGNyZWF0aW5nIHRoZSBlbGVtZW50IHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFN0aWNreS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnU3RpY2t5Jyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHN0aWNreSBlbGVtZW50IGJ5IGFkZGluZyBjbGFzc2VzLCBnZXR0aW5nL3NldHRpbmcgZGltZW5zaW9ucywgYnJlYWtwb2ludHMgYW5kIGF0dHJpYnV0ZXNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdGlja3ktY29udGFpbmVyXScpLFxuICAgICAgICBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnc3RpY2t5JyksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgIHRoaXMud2FzV3JhcHBlZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuJGNvbnRhaW5lciA9ICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICQodGhpcy5vcHRpb25zLmNvbnRhaW5lcikud3JhcElubmVyKHRoaXMuJGVsZW1lbnQpO1xuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3MpXG4gICAgICAgICAgICAgICAgIC5hdHRyKHsnZGF0YS1yZXNpemUnOiBpZH0pO1xuXG4gICAgdGhpcy5zY3JvbGxDb3VudCA9IHRoaXMub3B0aW9ucy5jaGVja0V2ZXJ5O1xuICAgIHRoaXMuaXNTdHVjayA9IGZhbHNlO1xuICAgICQod2luZG93KS5vbmUoJ2xvYWQuemYuc3RpY2t5JywgZnVuY3Rpb24oKXtcbiAgICAgIC8vV2UgY2FsY3VsYXRlIHRoZSBjb250YWluZXIgaGVpZ2h0IHRvIGhhdmUgY29ycmVjdCB2YWx1ZXMgZm9yIGFuY2hvciBwb2ludHMgb2Zmc2V0IGNhbGN1bGF0aW9uLlxuICAgICAgX3RoaXMuY29udGFpbmVySGVpZ2h0ID0gX3RoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIiA/IDAgOiBfdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICBfdGhpcy4kY29udGFpbmVyLmNzcygnaGVpZ2h0JywgX3RoaXMuY29udGFpbmVySGVpZ2h0KTtcbiAgICAgIF90aGlzLmVsZW1IZWlnaHQgPSBfdGhpcy5jb250YWluZXJIZWlnaHQ7XG4gICAgICBpZihfdGhpcy5vcHRpb25zLmFuY2hvciAhPT0gJycpe1xuICAgICAgICBfdGhpcy4kYW5jaG9yID0gJCgnIycgKyBfdGhpcy5vcHRpb25zLmFuY2hvcik7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgX3RoaXMuX3BhcnNlUG9pbnRzKCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbigpe1xuICAgICAgICB2YXIgc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgc2Nyb2xsKTtcbiAgICAgICAgLy9VbnN0aWNrIHRoZSBlbGVtZW50IHdpbGwgZW5zdXJlIHRoYXQgcHJvcGVyIGNsYXNzZXMgYXJlIHNldC5cbiAgICAgICAgaWYgKCFfdGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgX3RoaXMuX3JlbW92ZVN0aWNreSgoc2Nyb2xsID49IF90aGlzLnRvcFBvaW50KSA/IGZhbHNlIDogdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgX3RoaXMuX2V2ZW50cyhpZC5zcGxpdCgnLScpLnJldmVyc2UoKS5qb2luKCctJykpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHVzaW5nIG11bHRpcGxlIGVsZW1lbnRzIGFzIGFuY2hvcnMsIGNhbGN1bGF0ZXMgdGhlIHRvcCBhbmQgYm90dG9tIHBpeGVsIHZhbHVlcyB0aGUgc3RpY2t5IHRoaW5nIHNob3VsZCBzdGljayBhbmQgdW5zdGljayBvbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcGFyc2VQb2ludHMoKSB7XG4gICAgdmFyIHRvcCA9IHRoaXMub3B0aW9ucy50b3BBbmNob3IgPT0gXCJcIiA/IDEgOiB0aGlzLm9wdGlvbnMudG9wQW5jaG9yLFxuICAgICAgICBidG0gPSB0aGlzLm9wdGlvbnMuYnRtQW5jaG9yPT0gXCJcIiA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgOiB0aGlzLm9wdGlvbnMuYnRtQW5jaG9yLFxuICAgICAgICBwdHMgPSBbdG9wLCBidG1dLFxuICAgICAgICBicmVha3MgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcHRzLmxlbmd0aDsgaSA8IGxlbiAmJiBwdHNbaV07IGkrKykge1xuICAgICAgdmFyIHB0O1xuICAgICAgaWYgKHR5cGVvZiBwdHNbaV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHB0ID0gcHRzW2ldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBsYWNlID0gcHRzW2ldLnNwbGl0KCc6JyksXG4gICAgICAgICAgICBhbmNob3IgPSAkKGAjJHtwbGFjZVswXX1gKTtcblxuICAgICAgICBwdCA9IGFuY2hvci5vZmZzZXQoKS50b3A7XG4gICAgICAgIGlmIChwbGFjZVsxXSAmJiBwbGFjZVsxXS50b0xvd2VyQ2FzZSgpID09PSAnYm90dG9tJykge1xuICAgICAgICAgIHB0ICs9IGFuY2hvclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrc1tpXSA9IHB0O1xuICAgIH1cblxuXG4gICAgdGhpcy5wb2ludHMgPSBicmVha3M7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBzY3JvbGxpbmcgZWxlbWVudC5cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gcHN1ZWRvLXJhbmRvbSBpZCBmb3IgdW5pcXVlIHNjcm9sbCBldmVudCBsaXN0ZW5lci5cbiAgICovXG4gIF9ldmVudHMoaWQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBzY3JvbGxMaXN0ZW5lciA9IHRoaXMuc2Nyb2xsTGlzdGVuZXIgPSBgc2Nyb2xsLnpmLiR7aWR9YDtcbiAgICBpZiAodGhpcy5pc09uKSB7IHJldHVybjsgfVxuICAgIGlmICh0aGlzLmNhblN0aWNrKSB7XG4gICAgICB0aGlzLmlzT24gPSB0cnVlO1xuICAgICAgJCh3aW5kb3cpLm9mZihzY3JvbGxMaXN0ZW5lcilcbiAgICAgICAgICAgICAgIC5vbihzY3JvbGxMaXN0ZW5lciwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2Nyb2xsQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxDb3VudCA9IF90aGlzLm9wdGlvbnMuY2hlY2tFdmVyeTtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgIF90aGlzLl9jYWxjKGZhbHNlLCB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJylcbiAgICAgICAgICAgICAgICAgLm9uKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgZnVuY3Rpb24oZSwgZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY2FuU3RpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmlzT24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9ldmVudHMoaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5pc09uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3BhdXNlTGlzdGVuZXJzKHNjcm9sbExpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBldmVudCBoYW5kbGVycyBmb3Igc2Nyb2xsIGFuZCBjaGFuZ2UgZXZlbnRzIG9uIGFuY2hvci5cbiAgICogQGZpcmVzIFN0aWNreSNwYXVzZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2Nyb2xsTGlzdGVuZXIgLSB1bmlxdWUsIG5hbWVzcGFjZWQgc2Nyb2xsIGxpc3RlbmVyIGF0dGFjaGVkIHRvIGB3aW5kb3dgXG4gICAqL1xuICBfcGF1c2VMaXN0ZW5lcnMoc2Nyb2xsTGlzdGVuZXIpIHtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICAkKHdpbmRvdykub2ZmKHNjcm9sbExpc3RlbmVyKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBpcyBwYXVzZWQgZHVlIHRvIHJlc2l6ZSBldmVudCBzaHJpbmtpbmcgdGhlIHZpZXcuXG4gICAgICogQGV2ZW50IFN0aWNreSNwYXVzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncGF1c2UuemYuc3RpY2t5Jyk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGV2ZXJ5IGBzY3JvbGxgIGV2ZW50IGFuZCBvbiBgX2luaXRgXG4gICAqIGZpcmVzIGZ1bmN0aW9ucyBiYXNlZCBvbiBib29sZWFucyBhbmQgY2FjaGVkIHZhbHVlc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrU2l6ZXMgLSB0cnVlIGlmIHBsdWdpbiBzaG91bGQgcmVjYWxjdWxhdGUgc2l6ZXMgYW5kIGJyZWFrcG9pbnRzLlxuICAgKiBAcGFyYW0ge051bWJlcn0gc2Nyb2xsIC0gY3VycmVudCBzY3JvbGwgcG9zaXRpb24gcGFzc2VkIGZyb20gc2Nyb2xsIGV2ZW50IGNiIGZ1bmN0aW9uLiBJZiBub3QgcGFzc2VkLCBkZWZhdWx0cyB0byBgd2luZG93LnBhZ2VZT2Zmc2V0YC5cbiAgICovXG4gIF9jYWxjKGNoZWNrU2l6ZXMsIHNjcm9sbCkge1xuICAgIGlmIChjaGVja1NpemVzKSB7IHRoaXMuX3NldFNpemVzKCk7IH1cblxuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzY3JvbGwpIHsgc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0OyB9XG5cbiAgICBpZiAoc2Nyb2xsID49IHRoaXMudG9wUG9pbnQpIHtcbiAgICAgIGlmIChzY3JvbGwgPD0gdGhpcy5ib3R0b21Qb2ludCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3NldFN0aWNreSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2F1c2VzIHRoZSAkZWxlbWVudCB0byBiZWNvbWUgc3R1Y2suXG4gICAqIEFkZHMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBmaXJlcyBTdGlja3kjc3R1Y2t0b1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRTdGlja3koKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc3RpY2tUbyA9IHRoaXMub3B0aW9ucy5zdGlja1RvLFxuICAgICAgICBtcmduID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnYm90dG9tJyA6ICd0b3AnLFxuICAgICAgICBjc3MgPSB7fTtcblxuICAgIGNzc1ttcmduXSA9IGAke3RoaXMub3B0aW9uc1ttcmduXX1lbWA7XG4gICAgY3NzW3N0aWNrVG9dID0gMDtcbiAgICBjc3Nbbm90U3R1Y2tUb10gPSAnYXV0byc7XG4gICAgdGhpcy5pc1N0dWNrID0gdHJ1ZTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGBpcy1hbmNob3JlZCBpcy1hdC0ke25vdFN0dWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGBpcy1zdHVjayBpcy1hdC0ke3N0aWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmNzcyhjc3MpXG4gICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSAkZWxlbWVudCBoYXMgYmVjb21lIGBwb3NpdGlvbjogZml4ZWQ7YFxuICAgICAgICAgICAgICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYuc3R1Y2t0bzp0b3BgXG4gICAgICAgICAgICAgICAgICAqIEBldmVudCBTdGlja3kjc3R1Y2t0b1xuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgLnRyaWdnZXIoYHN0aWNreS56Zi5zdHVja3RvOiR7c3RpY2tUb31gKTtcbiAgICB0aGlzLiRlbGVtZW50Lm9uKFwidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIE1TVHJhbnNpdGlvbkVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9zZXRTaXplcygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhdXNlcyB0aGUgJGVsZW1lbnQgdG8gYmVjb21lIHVuc3R1Y2suXG4gICAqIFJlbW92ZXMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEFkZHMgb3RoZXIgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNUb3AgLSB0ZWxscyB0aGUgZnVuY3Rpb24gaWYgdGhlICRlbGVtZW50IHNob3VsZCBhbmNob3IgdG8gdGhlIHRvcCBvciBib3R0b20gb2YgaXRzICRhbmNob3IgZWxlbWVudC5cbiAgICogQGZpcmVzIFN0aWNreSN1bnN0dWNrZnJvbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbW92ZVN0aWNreShpc1RvcCkge1xuICAgIHZhciBzdGlja1RvID0gdGhpcy5vcHRpb25zLnN0aWNrVG8sXG4gICAgICAgIHN0aWNrVG9Ub3AgPSBzdGlja1RvID09PSAndG9wJyxcbiAgICAgICAgY3NzID0ge30sXG4gICAgICAgIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLnBvaW50c1swXSA6IHRoaXMuYW5jaG9ySGVpZ2h0KSAtIHRoaXMuZWxlbUhlaWdodCxcbiAgICAgICAgbXJnbiA9IHN0aWNrVG9Ub3AgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUb1RvcCA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgICAgIHRvcE9yQm90dG9tID0gaXNUb3AgPyAndG9wJyA6ICdib3R0b20nO1xuXG4gICAgY3NzW21yZ25dID0gMDtcblxuICAgIGNzc1snYm90dG9tJ10gPSAnYXV0byc7XG4gICAgaWYoaXNUb3ApIHtcbiAgICAgIGNzc1sndG9wJ10gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NbJ3RvcCddID0gYW5jaG9yUHQ7XG4gICAgfVxuXG4gICAgdGhpcy5pc1N0dWNrID0gZmFsc2U7XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhgaXMtc3R1Y2sgaXMtYXQtJHtzdGlja1RvfWApXG4gICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgaXMtYW5jaG9yZWQgaXMtYXQtJHt0b3BPckJvdHRvbX1gKVxuICAgICAgICAgICAgICAgICAuY3NzKGNzcylcbiAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlICRlbGVtZW50IGhhcyBiZWNvbWUgYW5jaG9yZWQuXG4gICAgICAgICAgICAgICAgICAqIE5hbWVzcGFjZWQgdG8gYHRvcGAgb3IgYGJvdHRvbWAsIGUuZy4gYHN0aWNreS56Zi51bnN0dWNrZnJvbTpib3R0b21gXG4gICAgICAgICAgICAgICAgICAqIEBldmVudCBTdGlja3kjdW5zdHVja2Zyb21cbiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgIC50cmlnZ2VyKGBzdGlja3kuemYudW5zdHVja2Zyb206JHt0b3BPckJvdHRvbX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSAkZWxlbWVudCBhbmQgJGNvbnRhaW5lciBzaXplcyBmb3IgcGx1Z2luLlxuICAgKiBDYWxscyBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIG9uIGNvbXBsZXRpb24gb2YgYF9zZXRCcmVha1BvaW50c2AuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0U2l6ZXMoY2IpIHtcbiAgICB0aGlzLmNhblN0aWNrID0gRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmlzKHRoaXMub3B0aW9ucy5zdGlja3lPbik7XG4gICAgaWYgKCF0aGlzLmNhblN0aWNrKSB7XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgbmV3RWxlbVdpZHRoID0gdGhpcy4kY29udGFpbmVyWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLFxuICAgICAgICBjb21wID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy4kY29udGFpbmVyWzBdKSxcbiAgICAgICAgcGRuZ2wgPSBwYXJzZUludChjb21wWydwYWRkaW5nLWxlZnQnXSwgMTApLFxuICAgICAgICBwZG5nciA9IHBhcnNlSW50KGNvbXBbJ3BhZGRpbmctcmlnaHQnXSwgMTApO1xuXG4gICAgaWYgKHRoaXMuJGFuY2hvciAmJiB0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFuY2hvckhlaWdodCA9IHRoaXMuJGFuY2hvclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcnNlUG9pbnRzKCk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgJ21heC13aWR0aCc6IGAke25ld0VsZW1XaWR0aCAtIHBkbmdsIC0gcGRuZ3J9cHhgXG4gICAgfSk7XG5cbiAgICB2YXIgbmV3Q29udGFpbmVySGVpZ2h0ID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgfHwgdGhpcy5jb250YWluZXJIZWlnaHQ7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIikge1xuICAgICAgbmV3Q29udGFpbmVySGVpZ2h0ID0gMDtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXJIZWlnaHQgPSBuZXdDb250YWluZXJIZWlnaHQ7XG4gICAgdGhpcy4kY29udGFpbmVyLmNzcyh7XG4gICAgICBoZWlnaHQ6IG5ld0NvbnRhaW5lckhlaWdodFxuICAgIH0pO1xuICAgIHRoaXMuZWxlbUhlaWdodCA9IG5ld0NvbnRhaW5lckhlaWdodDtcblxuICAgIGlmICghdGhpcy5pc1N0dWNrKSB7XG4gICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtYXQtYm90dG9tJykpIHtcbiAgICAgICAgdmFyIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLiRjb250YWluZXIub2Zmc2V0KCkudG9wIDogdGhpcy5hbmNob3JIZWlnaHQpIC0gdGhpcy5lbGVtSGVpZ2h0O1xuICAgICAgICB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgYW5jaG9yUHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3NldEJyZWFrUG9pbnRzKG5ld0NvbnRhaW5lckhlaWdodCwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB1cHBlciBhbmQgbG93ZXIgYnJlYWtwb2ludHMgZm9yIHRoZSBlbGVtZW50IHRvIGJlY29tZSBzdGlja3kvdW5zdGlja3kuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbGVtSGVpZ2h0IC0gcHggdmFsdWUgZm9yIHN0aWNreS4kZWxlbWVudCBoZWlnaHQsIGNhbGN1bGF0ZWQgYnkgYF9zZXRTaXplc2AuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGNvbXBsZXRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0QnJlYWtQb2ludHMoZWxlbUhlaWdodCwgY2IpIHtcbiAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICAgICAgZWxzZSB7IHJldHVybiBmYWxzZTsgfVxuICAgIH1cbiAgICB2YXIgbVRvcCA9IGVtQ2FsYyh0aGlzLm9wdGlvbnMubWFyZ2luVG9wKSxcbiAgICAgICAgbUJ0bSA9IGVtQ2FsYyh0aGlzLm9wdGlvbnMubWFyZ2luQm90dG9tKSxcbiAgICAgICAgdG9wUG9pbnQgPSB0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzBdIDogdGhpcy4kYW5jaG9yLm9mZnNldCgpLnRvcCxcbiAgICAgICAgYm90dG9tUG9pbnQgPSB0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzFdIDogdG9wUG9pbnQgKyB0aGlzLmFuY2hvckhlaWdodCxcbiAgICAgICAgLy8gdG9wUG9pbnQgPSB0aGlzLiRhbmNob3Iub2Zmc2V0KCkudG9wIHx8IHRoaXMucG9pbnRzWzBdLFxuICAgICAgICAvLyBib3R0b21Qb2ludCA9IHRvcFBvaW50ICsgdGhpcy5hbmNob3JIZWlnaHQgfHwgdGhpcy5wb2ludHNbMV0sXG4gICAgICAgIHdpbkhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuc3RpY2tUbyA9PT0gJ3RvcCcpIHtcbiAgICAgIHRvcFBvaW50IC09IG1Ub3A7XG4gICAgICBib3R0b21Qb2ludCAtPSAoZWxlbUhlaWdodCArIG1Ub3ApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnN0aWNrVG8gPT09ICdib3R0b20nKSB7XG4gICAgICB0b3BQb2ludCAtPSAod2luSGVpZ2h0IC0gKGVsZW1IZWlnaHQgKyBtQnRtKSk7XG4gICAgICBib3R0b21Qb2ludCAtPSAod2luSGVpZ2h0IC0gbUJ0bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vdGhpcyB3b3VsZCBiZSB0aGUgc3RpY2tUbzogYm90aCBvcHRpb24uLi4gdHJpY2t5XG4gICAgfVxuXG4gICAgdGhpcy50b3BQb2ludCA9IHRvcFBvaW50O1xuICAgIHRoaXMuYm90dG9tUG9pbnQgPSBib3R0b21Qb2ludDtcblxuICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBjdXJyZW50IHN0aWNreSBlbGVtZW50LlxuICAgKiBSZXNldHMgdGhlIGVsZW1lbnQgdG8gdGhlIHRvcCBwb3NpdGlvbiBmaXJzdC5cbiAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMsIEpTLWFkZGVkIGNzcyBwcm9wZXJ0aWVzIGFuZCBjbGFzc2VzLCBhbmQgdW53cmFwcyB0aGUgJGVsZW1lbnQgaWYgdGhlIEpTIGFkZGVkIHRoZSAkY29udGFpbmVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhgJHt0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3N9IGlzLWFuY2hvcmVkIGlzLWF0LXRvcGApXG4gICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICAgICAgICAgdG9wOiAnJyxcbiAgICAgICAgICAgICAgICAgICBib3R0b206ICcnLFxuICAgICAgICAgICAgICAgICAgICdtYXgtd2lkdGgnOiAnJ1xuICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgaWYgKHRoaXMuJGFuY2hvciAmJiB0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRhbmNob3Iub2ZmKCdjaGFuZ2UuemYuc3RpY2t5Jyk7XG4gICAgfVxuICAgICQod2luZG93KS5vZmYodGhpcy5zY3JvbGxMaXN0ZW5lcik7XG5cbiAgICBpZiAodGhpcy53YXNXcmFwcGVkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnVud3JhcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJydcbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuU3RpY2t5LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQ3VzdG9taXphYmxlIGNvbnRhaW5lciB0ZW1wbGF0ZS4gQWRkIHlvdXIgb3duIGNsYXNzZXMgZm9yIHN0eWxpbmcgYW5kIHNpemluZy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJmx0O2RpdiBkYXRhLXN0aWNreS1jb250YWluZXImZ3Q7Jmx0Oy9kaXYmZ3Q7J1xuICAgKi9cbiAgY29udGFpbmVyOiAnPGRpdiBkYXRhLXN0aWNreS1jb250YWluZXI+PC9kaXY+JyxcbiAgLyoqXG4gICAqIExvY2F0aW9uIGluIHRoZSB2aWV3IHRoZSBlbGVtZW50IHN0aWNrcyB0by4gQ2FuIGJlIGAndG9wJ2Agb3IgYCdib3R0b20nYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAndG9wJ1xuICAgKi9cbiAgc3RpY2tUbzogJ3RvcCcsXG4gIC8qKlxuICAgKiBJZiBhbmNob3JlZCB0byBhIHNpbmdsZSBlbGVtZW50LCB0aGUgaWQgb2YgdGhhdCBlbGVtZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBhbmNob3I6ICcnLFxuICAvKipcbiAgICogSWYgdXNpbmcgbW9yZSB0aGFuIG9uZSBlbGVtZW50IGFzIGFuY2hvciBwb2ludHMsIHRoZSBpZCBvZiB0aGUgdG9wIGFuY2hvci5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgdG9wQW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIGJvdHRvbSBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIGJ0bUFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBNYXJnaW4sIGluIGBlbWAncyB0byBhcHBseSB0byB0aGUgdG9wIG9mIHRoZSBlbGVtZW50IHdoZW4gaXQgYmVjb21lcyBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgbWFyZ2luVG9wOiAxLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIGJvdHRvbSBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIG1hcmdpbkJvdHRvbTogMSxcbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgc3RyaW5nIHRoYXQgaXMgdGhlIG1pbmltdW0gc2NyZWVuIHNpemUgYW4gZWxlbWVudCBzaG91bGQgYmVjb21lIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc3RpY2t5T246ICdtZWRpdW0nLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBzdGlja3kgZWxlbWVudCwgYW5kIHJlbW92ZWQgb24gZGVzdHJ1Y3Rpb24uIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreWAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3N0aWNreSdcbiAgICovXG4gIHN0aWNreUNsYXNzOiAnc3RpY2t5JyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGNvbnRhaW5lci4gRm91bmRhdGlvbiBkZWZhdWx0cyB0byBgc3RpY2t5LWNvbnRhaW5lcmAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3N0aWNreS1jb250YWluZXInXG4gICAqL1xuICBjb250YWluZXJDbGFzczogJ3N0aWNreS1jb250YWluZXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHNjcm9sbCBldmVudHMgYmV0d2VlbiB0aGUgcGx1Z2luJ3MgcmVjYWxjdWxhdGluZyBzdGlja3kgcG9pbnRzLiBTZXR0aW5nIGl0IHRvIGAwYCB3aWxsIGNhdXNlIGl0IHRvIHJlY2FsYyBldmVyeSBzY3JvbGwgZXZlbnQsIHNldHRpbmcgaXQgdG8gYC0xYCB3aWxsIHByZXZlbnQgcmVjYWxjIG9uIHNjcm9sbC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAtMVxuICAgKi9cbiAgY2hlY2tFdmVyeTogLTFcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBlbSB2YWx1ZXNcbiAqIEBwYXJhbSBOdW1iZXIge2VtfSAtIG51bWJlciBvZiBlbSdzIHRvIGNhbGN1bGF0ZSBpbnRvIHBpeGVsc1xuICovXG5mdW5jdGlvbiBlbUNhbGMoZW0pIHtcbiAgcmV0dXJuIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHksIG51bGwpLmZvbnRTaXplLCAxMCkgKiBlbTtcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFN0aWNreSwgJ1N0aWNreScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogVG9nZ2xlciBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udG9nZ2xlclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xuXG5jbGFzcyBUb2dnbGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVG9nZ2xlci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBUb2dnbGVyI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBUb2dnbGVyLmRlZmF1bHRzLCBlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5jbGFzc05hbWUgPSAnJztcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1RvZ2dsZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgVG9nZ2xlciBwbHVnaW4gYnkgcGFyc2luZyB0aGUgdG9nZ2xlIGNsYXNzIGZyb20gZGF0YS10b2dnbGVyLCBvciBhbmltYXRpb24gY2xhc3NlcyBmcm9tIGRhdGEtYW5pbWF0ZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaW5wdXQ7XG4gICAgLy8gUGFyc2UgYW5pbWF0aW9uIGNsYXNzZXMgaWYgdGhleSB3ZXJlIHNldFxuICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0ZSkge1xuICAgICAgaW5wdXQgPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZS5zcGxpdCgnICcpO1xuXG4gICAgICB0aGlzLmFuaW1hdGlvbkluID0gaW5wdXRbMF07XG4gICAgICB0aGlzLmFuaW1hdGlvbk91dCA9IGlucHV0WzFdIHx8IG51bGw7XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgcGFyc2UgdG9nZ2xlIGNsYXNzXG4gICAgZWxzZSB7XG4gICAgICBpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZGF0YSgndG9nZ2xlcicpO1xuICAgICAgLy8gQWxsb3cgZm9yIGEgLiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzdHJpbmdcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gaW5wdXRbMF0gPT09ICcuJyA/IGlucHV0LnNsaWNlKDEpIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gQWRkIEFSSUEgYXR0cmlidXRlcyB0byB0cmlnZ2Vyc1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQ7XG4gICAgJChgW2RhdGEtb3Blbj1cIiR7aWR9XCJdLCBbZGF0YS1jbG9zZT1cIiR7aWR9XCJdLCBbZGF0YS10b2dnbGU9XCIke2lkfVwiXWApXG4gICAgICAuYXR0cignYXJpYS1jb250cm9scycsIGlkKTtcbiAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGhpZGRlbiwgYWRkIGFyaWEtaGlkZGVuXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdGhpcy4kZWxlbWVudC5pcygnOmhpZGRlbicpID8gZmFsc2UgOiB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIHRoZSB0b2dnbGUgdHJpZ2dlci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b2dnbGUuemYudHJpZ2dlcicpLm9uKCd0b2dnbGUuemYudHJpZ2dlcicsIHRoaXMudG9nZ2xlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHRhcmdldCBjbGFzcyBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQuIEFuIGV2ZW50IGlzIGZpcmVkIGZyb20gdGhlIG9yaWdpbmFsIHRyaWdnZXIgZGVwZW5kaW5nIG9uIGlmIHRoZSByZXN1bHRhbnQgc3RhdGUgd2FzIFwib25cIiBvciBcIm9mZlwiLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFRvZ2dsZXIjb25cbiAgICogQGZpcmVzIFRvZ2dsZXIjb2ZmXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgdGhpc1sgdGhpcy5vcHRpb25zLmFuaW1hdGUgPyAnX3RvZ2dsZUFuaW1hdGUnIDogJ190b2dnbGVDbGFzcyddKCk7XG4gIH1cblxuICBfdG9nZ2xlQ2xhc3MoKSB7XG4gICAgdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLmNsYXNzTmFtZSk7XG5cbiAgICB2YXIgaXNPbiA9IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3ModGhpcy5jbGFzc05hbWUpO1xuICAgIGlmIChpc09uKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBoYXMgdGhlIGNsYXNzIGFmdGVyIGEgdG9nZ2xlLlxuICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb25cbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvbi56Zi50b2dnbGVyJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgZG9lcyBub3QgaGF2ZSB0aGUgY2xhc3MgYWZ0ZXIgYSB0b2dnbGUuXG4gICAgICAgKiBAZXZlbnQgVG9nZ2xlciNvZmZcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvZmYuemYudG9nZ2xlcicpO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZUFSSUEoaXNPbik7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1tdXRhdGVdJykudHJpZ2dlcignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICB9XG5cbiAgX3RvZ2dsZUFuaW1hdGUoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbih0aGlzLiRlbGVtZW50LCB0aGlzLmFuaW1hdGlvbkluLCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFSSUEodHJ1ZSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgICAgICB0aGlzLmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsIHRoaXMuYW5pbWF0aW9uT3V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFSSUEoZmFsc2UpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ29mZi56Zi50b2dnbGVyJyk7XG4gICAgICAgIHRoaXMuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIF91cGRhdGVBUklBKGlzT24pIHtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09uID8gdHJ1ZSA6IGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgaW5zdGFuY2Ugb2YgVG9nZ2xlciBvbiB0aGUgZWxlbWVudC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudG9nZ2xlcicpO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5Ub2dnbGVyLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogVGVsbHMgdGhlIHBsdWdpbiBpZiB0aGUgZWxlbWVudCBzaG91bGQgYW5pbWF0ZWQgd2hlbiB0b2dnbGVkLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYW5pbWF0ZTogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihUb2dnbGVyLCAnVG9nZ2xlcicpO1xuXG59KGpRdWVyeSk7XG4iLCIvKlxyXG4gKiBDb2xvciBUaGllZiB2Mi4wXHJcbiAqIGJ5IExva2VzaCBEaGFrYXIgLSBodHRwOi8vd3d3Lmxva2VzaGRoYWthci5jb21cclxuICpcclxuICogVGhhbmtzXHJcbiAqIC0tLS0tLVxyXG4gKiBOaWNrIFJhYmlub3dpdHogLSBGb3IgY3JlYXRpbmcgcXVhbnRpemUuanMuXHJcbiAqIEpvaG4gU2NodWx6IC0gRm9yIGNsZWFuIHVwIGFuZCBvcHRpbWl6YXRpb24uIEBKRlNJSUlcclxuICogTmF0aGFuIFNwYWR5IC0gRm9yIGFkZGluZyBkcmFnIGFuZCBkcm9wIHN1cHBvcnQgdG8gdGhlIGRlbW8gcGFnZS5cclxuICpcclxuICogTGljZW5zZVxyXG4gKiAtLS0tLS0tXHJcbiAqIENvcHlyaWdodCAyMDExLCAyMDE1IExva2VzaCBEaGFrYXJcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9sb2tlc2gvY29sb3ItdGhpZWYvbWFzdGVyL0xJQ0VOU0VcclxuICpcclxuICogQGxpY2Vuc2VcclxuICovXHJcbnZhciBDYW52YXNJbWFnZSA9IGZ1bmN0aW9uIChhKSB7XHJcbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiksIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyksIHRoaXMud2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aCA9IGEud2lkdGgsIHRoaXMuaGVpZ2h0ID0gdGhpcy5jYW52YXMuaGVpZ2h0ID0gYS5oZWlnaHQsIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UoYSwgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpXHJcbn07XHJcbkNhbnZhc0ltYWdlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpXHJcbn0sIENhbnZhc0ltYWdlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoYSkge1xyXG4gICAgdGhpcy5jb250ZXh0LnB1dEltYWdlRGF0YShhLCAwLCAwKVxyXG59LCBDYW52YXNJbWFnZS5wcm90b3R5cGUuZ2V0UGl4ZWxDb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLndpZHRoICogdGhpcy5oZWlnaHRcclxufSwgQ2FudmFzSW1hZ2UucHJvdG90eXBlLmdldEltYWdlRGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KVxyXG59LCBDYW52YXNJbWFnZS5wcm90b3R5cGUucmVtb3ZlQ2FudmFzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5jYW52YXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmNhbnZhcylcclxufTtcclxudmFyIENvbG9yVGhpZWYgPSBmdW5jdGlvbiAoKSB7fTtcclxuLyohXHJcbiAqIHF1YW50aXplLmpzIENvcHlyaWdodCAyMDA4IE5pY2sgUmFiaW5vd2l0ei5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG4gKiBAbGljZW5zZVxyXG4gKi9cclxuLyohXHJcbiAqIEJsb2NrIGJlbG93IGNvcGllZCBmcm9tIFByb3RvdmlzOiBodHRwOi8vbWJvc3RvY2suZ2l0aHViLmNvbS9wcm90b3Zpcy9cclxuICogQ29weXJpZ2h0IDIwMTAgU3RhbmZvcmQgVmlzdWFsaXphdGlvbiBHcm91cFxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2U6IGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvYnNkLWxpY2Vuc2UucGhwXHJcbiAqIEBsaWNlbnNlXHJcbiAqL1xyXG5pZiAoQ29sb3JUaGllZi5wcm90b3R5cGUuZ2V0Q29sb3IgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHZhciBjID0gdGhpcy5nZXRQYWxldHRlKGEsIDUsIGIpLFxyXG4gICAgICAgICAgICBkID0gY1swXTtcclxuICAgICAgICByZXR1cm4gZFxyXG4gICAgfSwgQ29sb3JUaGllZi5wcm90b3R5cGUuZ2V0UGFsZXR0ZSA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XHJcbiAgICAgICAgXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgYiAmJiAoYiA9IDEwKSwgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGMgfHwgYyA8IDEpICYmIChjID0gMTApO1xyXG4gICAgICAgIGZvciAodmFyIGQsIGUsIGYsIGcsIGgsIGkgPSBuZXcgQ2FudmFzSW1hZ2UoYSksIGogPSBpLmdldEltYWdlRGF0YSgpLCBrID0gai5kYXRhLCBsID0gaS5nZXRQaXhlbENvdW50KCksIG0gPSBbXSwgbiA9IDA7IG4gPCBsOyBuICs9IGMpIGQgPSA0ICogbiwgZSA9IGtbZCArIDBdLCBmID0ga1tkICsgMV0sIGcgPSBrW2QgKyAyXSwgaCA9IGtbZCArIDNdLCBoID49IDEyNSAmJiAoZSA+IDI1MCAmJiBmID4gMjUwICYmIGcgPiAyNTAgfHwgbS5wdXNoKFtlLCBmLCBnXSkpO1xyXG4gICAgICAgIHZhciBvID0gTU1DUS5xdWFudGl6ZShtLCBiKSxcclxuICAgICAgICAgICAgcCA9IG8gPyBvLnBhbGV0dGUoKSA6IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIGkucmVtb3ZlQ2FudmFzKCksIHBcclxuICAgIH0sICFwdikgdmFyIHB2ID0ge1xyXG4gICAgbWFwOiBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHZhciBjID0ge307XHJcbiAgICAgICAgcmV0dXJuIGIgPyBhLm1hcChmdW5jdGlvbiAoYSwgZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYy5pbmRleCA9IGQsIGIuY2FsbChjLCBhKVxyXG4gICAgICAgIH0pIDogYS5zbGljZSgpXHJcbiAgICB9LFxyXG4gICAgbmF0dXJhbE9yZGVyOiBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMFxyXG4gICAgfSxcclxuICAgIHN1bTogZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICB2YXIgYyA9IHt9O1xyXG4gICAgICAgIHJldHVybiBhLnJlZHVjZShiID8gZnVuY3Rpb24gKGEsIGQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGMuaW5kZXggPSBlLCBhICsgYi5jYWxsKGMsIGQpXHJcbiAgICAgICAgfSA6IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhICsgYlxyXG4gICAgICAgIH0sIDApXHJcbiAgICB9LFxyXG4gICAgbWF4OiBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBiID8gcHYubWFwKGEsIGIpIDogYSlcclxuICAgIH1cclxufTtcclxudmFyIE1NQ1EgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBhKGEsIGIsIGMpIHtcclxuICAgICAgICByZXR1cm4gKGEgPDwgMiAqIGkpICsgKGIgPDwgaSkgKyBjXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYihhKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gYigpIHtcclxuICAgICAgICAgICAgYy5zb3J0KGEpLCBkID0gITBcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGMgPSBbXSxcclxuICAgICAgICAgICAgZCA9ICExO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHB1c2g6IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICBjLnB1c2goYSksIGQgPSAhMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwZWVrOiBmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQgfHwgYigpLCB2b2lkIDAgPT09IGEgJiYgKGEgPSBjLmxlbmd0aCAtIDEpLCBjW2FdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBvcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQgfHwgYigpLCBjLnBvcCgpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjLmxlbmd0aFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtYXA6IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYy5tYXAoYSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVidWc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkIHx8IGIoKSwgY1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGMoYSwgYiwgYywgZCwgZSwgZiwgZykge1xyXG4gICAgICAgIHZhciBoID0gdGhpcztcclxuICAgICAgICBoLnIxID0gYSwgaC5yMiA9IGIsIGguZzEgPSBjLCBoLmcyID0gZCwgaC5iMSA9IGUsIGguYjIgPSBmLCBoLmhpc3RvID0gZ1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGQoKSB7XHJcbiAgICAgICAgdGhpcy52Ym94ZXMgPSBuZXcgYihmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gcHYubmF0dXJhbE9yZGVyKGEudmJveC5jb3VudCgpICogYS52Ym94LnZvbHVtZSgpLCBiLnZib3guY291bnQoKSAqIGIudmJveC52b2x1bWUoKSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGUoYikge1xyXG4gICAgICAgIHZhciBjLCBkLCBlLCBmLCBnID0gMSA8PCAzICogaSxcclxuICAgICAgICAgICAgaCA9IG5ldyBBcnJheShnKTtcclxuICAgICAgICByZXR1cm4gYi5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XHJcbiAgICAgICAgICAgIGQgPSBiWzBdID4+IGosIGUgPSBiWzFdID4+IGosIGYgPSBiWzJdID4+IGosIGMgPSBhKGQsIGUsIGYpLCBoW2NdID0gKGhbY10gfHwgMCkgKyAxXHJcbiAgICAgICAgfSksIGhcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmKGEsIGIpIHtcclxuICAgICAgICB2YXIgZCwgZSwgZiwgZyA9IDFlNixcclxuICAgICAgICAgICAgaCA9IDAsXHJcbiAgICAgICAgICAgIGkgPSAxZTYsXHJcbiAgICAgICAgICAgIGsgPSAwLFxyXG4gICAgICAgICAgICBsID0gMWU2LFxyXG4gICAgICAgICAgICBtID0gMDtcclxuICAgICAgICByZXR1cm4gYS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgIGQgPSBhWzBdID4+IGosIGUgPSBhWzFdID4+IGosIGYgPSBhWzJdID4+IGosIGQgPCBnID8gZyA9IGQgOiBkID4gaCAmJiAoaCA9IGQpLCBlIDwgaSA/IGkgPSBlIDogZSA+IGsgJiYgKGsgPSBlKSwgZiA8IGwgPyBsID0gZiA6IGYgPiBtICYmIChtID0gZilcclxuICAgICAgICB9KSwgbmV3IGMoZywgaCwgaSwgaywgbCwgbSwgYilcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnKGIsIGMpIHtcclxuICAgICAgICBmdW5jdGlvbiBkKGEpIHtcclxuICAgICAgICAgICAgdmFyIGIsIGQsIGUsIGYsIGcsIGggPSBhICsgXCIxXCIsXHJcbiAgICAgICAgICAgICAgICBqID0gYSArIFwiMlwiLFxyXG4gICAgICAgICAgICAgICAgayA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IGNbaF07IGkgPD0gY1tqXTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgaWYgKG9baV0gPiBuIC8gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoZSA9IGMuY29weSgpLCBmID0gYy5jb3B5KCksIGIgPSBpIC0gY1toXSwgZCA9IGNbal0gLSBpLCBnID0gYiA8PSBkID8gTWF0aC5taW4oY1tqXSAtIDEsIH5+KGkgKyBkIC8gMikpIDogTWF0aC5tYXgoY1toXSwgfn4oaSAtIDEgLSBiIC8gMikpOyAhb1tnXTspIGcrKztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSBwW2ddOyAhayAmJiBvW2cgLSAxXTspIGsgPSBwWy0tZ107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVbal0gPSBnLCBmW2hdID0gZVtqXSArIDEsIFtlLCBmXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYy5jb3VudCgpKSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gYy5yMiAtIGMucjEgKyAxLFxyXG4gICAgICAgICAgICAgICAgZiA9IGMuZzIgLSBjLmcxICsgMSxcclxuICAgICAgICAgICAgICAgIGcgPSBjLmIyIC0gYy5iMSArIDEsXHJcbiAgICAgICAgICAgICAgICBoID0gcHYubWF4KFtlLCBmLCBnXSk7XHJcbiAgICAgICAgICAgIGlmICgxID09IGMuY291bnQoKSkgcmV0dXJuIFtjLmNvcHkoKV07XHJcbiAgICAgICAgICAgIHZhciBpLCBqLCBrLCBsLCBtLCBuID0gMCxcclxuICAgICAgICAgICAgICAgIG8gPSBbXSxcclxuICAgICAgICAgICAgICAgIHAgPSBbXTtcclxuICAgICAgICAgICAgaWYgKGggPT0gZSlcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IGMucjE7IGkgPD0gYy5yMjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsID0gMCwgaiA9IGMuZzE7IGogPD0gYy5nMjsgaisrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSBjLmIxOyBrIDw9IGMuYjI7IGsrKykgbSA9IGEoaSwgaiwgayksIGwgKz0gYlttXSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gKz0gbCwgb1tpXSA9IG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaCA9PSBmKVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGMuZzE7IGkgPD0gYy5nMjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobCA9IDAsIGogPSBjLnIxOyBqIDw9IGMucjI7IGorKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoayA9IGMuYjE7IGsgPD0gYy5iMjsgaysrKSBtID0gYShqLCBpLCBrKSwgbCArPSBiW21dIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gKz0gbCwgb1tpXSA9IG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gYy5iMTsgaSA8PSBjLmIyOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobCA9IDAsIGogPSBjLnIxOyBqIDw9IGMucjI7IGorKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSBjLmcxOyBrIDw9IGMuZzI7IGsrKykgbSA9IGEoaiwgaywgaSksIGwgKz0gYlttXSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiArPSBsLCBvW2ldID0gblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvLmZvckVhY2goZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgIHBbYl0gPSBuIC0gYVxyXG4gICAgICAgICAgICB9KSwgZChoID09IGUgPyBcInJcIiA6IGggPT0gZiA/IFwiZ1wiIDogXCJiXCIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGgoYSwgYykge1xyXG4gICAgICAgIGZ1bmN0aW9uIGgoYSwgYikge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBjLCBkID0gMSwgZSA9IDA7IGUgPCBrOylcclxuICAgICAgICAgICAgICAgIGlmIChjID0gYS5wb3AoKSwgYy5jb3VudCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBnKGksIGMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoID0gZlswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaiA9IGZbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEucHVzaChoKSwgaiAmJiAoYS5wdXNoKGopLCBkKyspLCBkID49IGIpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSsrID4gaykgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgYS5wdXNoKGMpLCBlKytcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFhLmxlbmd0aCB8fCBjIDwgMiB8fCBjID4gMjU2KSByZXR1cm4gITE7XHJcbiAgICAgICAgdmFyIGkgPSBlKGEpLFxyXG4gICAgICAgICAgICBqID0gMDtcclxuICAgICAgICBpLmZvckVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBqKytcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgbSA9IGYoYSwgaSksXHJcbiAgICAgICAgICAgIG4gPSBuZXcgYihmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHB2Lm5hdHVyYWxPcmRlcihhLmNvdW50KCksIGIuY291bnQoKSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgbi5wdXNoKG0pLCBoKG4sIGwgKiBjKTtcclxuICAgICAgICBmb3IgKHZhciBvID0gbmV3IGIoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwdi5uYXR1cmFsT3JkZXIoYS5jb3VudCgpICogYS52b2x1bWUoKSwgYi5jb3VudCgpICogYi52b2x1bWUoKSlcclxuICAgICAgICAgICAgfSk7IG4uc2l6ZSgpOykgby5wdXNoKG4ucG9wKCkpO1xyXG4gICAgICAgIGgobywgYyAtIG8uc2l6ZSgpKTtcclxuICAgICAgICBmb3IgKHZhciBwID0gbmV3IGQ7IG8uc2l6ZSgpOykgcC5wdXNoKG8ucG9wKCkpO1xyXG4gICAgICAgIHJldHVybiBwXHJcbiAgICB9XHJcbiAgICB2YXIgaSA9IDUsXHJcbiAgICAgICAgaiA9IDggLSBpLFxyXG4gICAgICAgIGsgPSAxZTMsXHJcbiAgICAgICAgbCA9IC43NTtcclxuICAgIHJldHVybiBjLnByb3RvdHlwZSA9IHtcclxuICAgICAgICB2b2x1bWU6IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgIHZhciBiID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIGIuX3ZvbHVtZSAmJiAhYSB8fCAoYi5fdm9sdW1lID0gKGIucjIgLSBiLnIxICsgMSkgKiAoYi5nMiAtIGIuZzEgKyAxKSAqIChiLmIyIC0gYi5iMSArIDEpKSwgYi5fdm9sdW1lXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb3VudDogZnVuY3Rpb24gKGIpIHtcclxuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgZCA9IGMuaGlzdG87XHJcbiAgICAgICAgICAgIGlmICghYy5fY291bnRfc2V0IHx8IGIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlLCBmLCBnLCBoID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAoZSA9IGMucjE7IGUgPD0gYy5yMjsgZSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoZiA9IGMuZzE7IGYgPD0gYy5nMjsgZisrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGcgPSBjLmIxOyBnIDw9IGMuYjI7IGcrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGEoZSwgZiwgZyksIGggKz0gZFtpbmRleF0gfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGMuX2NvdW50ID0gaCwgYy5fY291bnRfc2V0ID0gITBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYy5fY291bnRcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvcHk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGEgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGMoYS5yMSwgYS5yMiwgYS5nMSwgYS5nMiwgYS5iMSwgYS5iMiwgYS5oaXN0bylcclxuICAgICAgICB9LFxyXG4gICAgICAgIGF2ZzogZnVuY3Rpb24gKGIpIHtcclxuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgZCA9IGMuaGlzdG87XHJcbiAgICAgICAgICAgIGlmICghYy5fYXZnIHx8IGIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlLCBmLCBnLCBoLCBqLCBrID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBsID0gMSA8PCA4IC0gaSxcclxuICAgICAgICAgICAgICAgICAgICBtID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBuID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBvID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAoZiA9IGMucjE7IGYgPD0gYy5yMjsgZisrKVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoZyA9IGMuZzE7IGcgPD0gYy5nMjsgZysrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGggPSBjLmIxOyBoIDw9IGMuYjI7IGgrKykgaiA9IGEoZiwgZywgaCksIGUgPSBkW2pdIHx8IDAsIGsgKz0gZSwgbSArPSBlICogKGYgKyAuNSkgKiBsLCBuICs9IGUgKiAoZyArIC41KSAqIGwsIG8gKz0gZSAqIChoICsgLjUpICogbDtcclxuICAgICAgICAgICAgICAgIGsgPyBjLl9hdmcgPSBbfn4obSAvIGspLCB+fihuIC8gayksIH5+KG8gLyBrKV0gOiBjLl9hdmcgPSBbfn4obCAqIChjLnIxICsgYy5yMiArIDEpIC8gMiksIH5+KGwgKiAoYy5nMSArIGMuZzIgKyAxKSAvIDIpLCB+fihsICogKGMuYjEgKyBjLmIyICsgMSkgLyAyKV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYy5fYXZnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250YWluczogZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgdmFyIGIgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgYyA9IGFbMF0gPj4gajtcclxuICAgICAgICAgICAgcmV0dXJuIGd2YWwgPSBhWzFdID4+IGosIGJ2YWwgPSBhWzJdID4+IGosIGMgPj0gYi5yMSAmJiBjIDw9IGIucjIgJiYgZ3ZhbCA+PSBiLmcxICYmIGd2YWwgPD0gYi5nMiAmJiBidmFsID49IGIuYjEgJiYgYnZhbCA8PSBiLmIyXHJcbiAgICAgICAgfVxyXG4gICAgfSwgZC5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgcHVzaDogZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgdGhpcy52Ym94ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB2Ym94OiBhLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6IGEuYXZnKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBhbGV0dGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmJveGVzLm1hcChmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuY29sb3JcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmJveGVzLnNpemUoKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWFwOiBmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBiID0gdGhpcy52Ym94ZXMsIGMgPSAwOyBjIDwgYi5zaXplKCk7IGMrKylcclxuICAgICAgICAgICAgICAgIGlmIChiLnBlZWsoYykudmJveC5jb250YWlucyhhKSkgcmV0dXJuIGIucGVlayhjKS5jb2xvcjtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVhcmVzdChhKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbmVhcmVzdDogZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgYiwgYywgZCwgZSA9IHRoaXMudmJveGVzLCBmID0gMDsgZiA8IGUuc2l6ZSgpOyBmKyspIGMgPSBNYXRoLnNxcnQoTWF0aC5wb3coYVswXSAtIGUucGVlayhmKS5jb2xvclswXSwgMikgKyBNYXRoLnBvdyhhWzFdIC0gZS5wZWVrKGYpLmNvbG9yWzFdLCAyKSArIE1hdGgucG93KGFbMl0gLSBlLnBlZWsoZikuY29sb3JbMl0sIDIpKSwgKGMgPCBiIHx8IHZvaWQgMCA9PT0gYikgJiYgKGIgPSBjLCBkID0gZS5wZWVrKGYpLmNvbG9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZvcmNlYnc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGEgPSB0aGlzLnZib3hlcztcclxuICAgICAgICAgICAgYS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHYubmF0dXJhbE9yZGVyKHB2LnN1bShhLmNvbG9yKSwgcHYuc3VtKGIuY29sb3IpKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIGIgPSBhWzBdLmNvbG9yO1xyXG4gICAgICAgICAgICBiWzBdIDwgNSAmJiBiWzFdIDwgNSAmJiBiWzJdIDwgNSAmJiAoYVswXS5jb2xvciA9IFswLCAwLCAwXSk7XHJcbiAgICAgICAgICAgIHZhciBjID0gYS5sZW5ndGggLSAxLFxyXG4gICAgICAgICAgICAgICAgZCA9IGFbY10uY29sb3I7XHJcbiAgICAgICAgICAgIGRbMF0gPiAyNTEgJiYgZFsxXSA+IDI1MSAmJiBkWzJdID4gMjUxICYmIChhW2NdLmNvbG9yID0gWzI1NSwgMjU1LCAyNTVdKVxyXG4gICAgICAgIH1cclxuICAgIH0sIHtcclxuICAgICAgICBxdWFudGl6ZTogaFxyXG4gICAgfVxyXG59KCk7IiwiLyoqXHJcbiAqIE93bCBDYXJvdXNlbCB2Mi4yLjBcclxuICogQ29weXJpZ2h0IDIwMTMtMjAxNiBEYXZpZCBEZXV0c2NoXHJcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL093bENhcm91c2VsMi9Pd2xDYXJvdXNlbDIvYmxvYi9tYXN0ZXIvTElDRU5TRSlcclxuICovXHJcbiFmdW5jdGlvbihhLGIsYyxkKXtmdW5jdGlvbiBlKGIsYyl7dGhpcy5zZXR0aW5ncz1udWxsLHRoaXMub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLGMpLHRoaXMuJGVsZW1lbnQ9YShiKSx0aGlzLl9oYW5kbGVycz17fSx0aGlzLl9wbHVnaW5zPXt9LHRoaXMuX3N1cHJlc3M9e30sdGhpcy5fY3VycmVudD1udWxsLHRoaXMuX3NwZWVkPW51bGwsdGhpcy5fY29vcmRpbmF0ZXM9W10sdGhpcy5fYnJlYWtwb2ludD1udWxsLHRoaXMuX3dpZHRoPW51bGwsdGhpcy5faXRlbXM9W10sdGhpcy5fY2xvbmVzPVtdLHRoaXMuX21lcmdlcnM9W10sdGhpcy5fd2lkdGhzPVtdLHRoaXMuX2ludmFsaWRhdGVkPXt9LHRoaXMuX3BpcGU9W10sdGhpcy5fZHJhZz17dGltZTpudWxsLHRhcmdldDpudWxsLHBvaW50ZXI6bnVsbCxzdGFnZTp7c3RhcnQ6bnVsbCxjdXJyZW50Om51bGx9LGRpcmVjdGlvbjpudWxsfSx0aGlzLl9zdGF0ZXM9e2N1cnJlbnQ6e30sdGFnczp7aW5pdGlhbGl6aW5nOltcImJ1c3lcIl0sYW5pbWF0aW5nOltcImJ1c3lcIl0sZHJhZ2dpbmc6W1wiaW50ZXJhY3RpbmdcIl19fSxhLmVhY2goW1wib25SZXNpemVcIixcIm9uVGhyb3R0bGVkUmVzaXplXCJdLGEucHJveHkoZnVuY3Rpb24oYixjKXt0aGlzLl9oYW5kbGVyc1tjXT1hLnByb3h5KHRoaXNbY10sdGhpcyl9LHRoaXMpKSxhLmVhY2goZS5QbHVnaW5zLGEucHJveHkoZnVuY3Rpb24oYSxiKXt0aGlzLl9wbHVnaW5zW2EuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkrYS5zbGljZSgxKV09bmV3IGIodGhpcyl9LHRoaXMpKSxhLmVhY2goZS5Xb3JrZXJzLGEucHJveHkoZnVuY3Rpb24oYixjKXt0aGlzLl9waXBlLnB1c2goe2ZpbHRlcjpjLmZpbHRlcixydW46YS5wcm94eShjLnJ1bix0aGlzKX0pfSx0aGlzKSksdGhpcy5zZXR1cCgpLHRoaXMuaW5pdGlhbGl6ZSgpfWUuRGVmYXVsdHM9e2l0ZW1zOjMsbG9vcDohMSxjZW50ZXI6ITEscmV3aW5kOiExLG1vdXNlRHJhZzohMCx0b3VjaERyYWc6ITAscHVsbERyYWc6ITAsZnJlZURyYWc6ITEsbWFyZ2luOjAsc3RhZ2VQYWRkaW5nOjAsbWVyZ2U6ITEsbWVyZ2VGaXQ6ITAsYXV0b1dpZHRoOiExLHN0YXJ0UG9zaXRpb246MCxydGw6ITEsc21hcnRTcGVlZDoyNTAsZmx1aWRTcGVlZDohMSxkcmFnRW5kU3BlZWQ6ITEscmVzcG9uc2l2ZTp7fSxyZXNwb25zaXZlUmVmcmVzaFJhdGU6MjAwLHJlc3BvbnNpdmVCYXNlRWxlbWVudDpiLGZhbGxiYWNrRWFzaW5nOlwic3dpbmdcIixpbmZvOiExLG5lc3RlZEl0ZW1TZWxlY3RvcjohMSxpdGVtRWxlbWVudDpcImRpdlwiLHN0YWdlRWxlbWVudDpcImRpdlwiLHJlZnJlc2hDbGFzczpcIm93bC1yZWZyZXNoXCIsbG9hZGVkQ2xhc3M6XCJvd2wtbG9hZGVkXCIsbG9hZGluZ0NsYXNzOlwib3dsLWxvYWRpbmdcIixydGxDbGFzczpcIm93bC1ydGxcIixyZXNwb25zaXZlQ2xhc3M6XCJvd2wtcmVzcG9uc2l2ZVwiLGRyYWdDbGFzczpcIm93bC1kcmFnXCIsaXRlbUNsYXNzOlwib3dsLWl0ZW1cIixzdGFnZUNsYXNzOlwib3dsLXN0YWdlXCIsc3RhZ2VPdXRlckNsYXNzOlwib3dsLXN0YWdlLW91dGVyXCIsZ3JhYkNsYXNzOlwib3dsLWdyYWJcIn0sZS5XaWR0aD17RGVmYXVsdDpcImRlZmF1bHRcIixJbm5lcjpcImlubmVyXCIsT3V0ZXI6XCJvdXRlclwifSxlLlR5cGU9e0V2ZW50OlwiZXZlbnRcIixTdGF0ZTpcInN0YXRlXCJ9LGUuUGx1Z2lucz17fSxlLldvcmtlcnM9W3tmaWx0ZXI6W1wid2lkdGhcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbigpe3RoaXMuX3dpZHRoPXRoaXMuJGVsZW1lbnQud2lkdGgoKX19LHtmaWx0ZXI6W1wid2lkdGhcIixcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oYSl7YS5jdXJyZW50PXRoaXMuX2l0ZW1zJiZ0aGlzLl9pdGVtc1t0aGlzLnJlbGF0aXZlKHRoaXMuX2N1cnJlbnQpXX19LHtmaWx0ZXI6W1wiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbigpe3RoaXMuJHN0YWdlLmNoaWxkcmVuKFwiLmNsb25lZFwiKS5yZW1vdmUoKX19LHtmaWx0ZXI6W1wid2lkdGhcIixcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5zZXR0aW5ncy5tYXJnaW58fFwiXCIsYz0hdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsZD10aGlzLnNldHRpbmdzLnJ0bCxlPXt3aWR0aDpcImF1dG9cIixcIm1hcmdpbi1sZWZ0XCI6ZD9iOlwiXCIsXCJtYXJnaW4tcmlnaHRcIjpkP1wiXCI6Yn07IWMmJnRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuY3NzKGUpLGEuY3NzPWV9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKGEpe3ZhciBiPSh0aGlzLndpZHRoKCkvdGhpcy5zZXR0aW5ncy5pdGVtcykudG9GaXhlZCgzKS10aGlzLnNldHRpbmdzLm1hcmdpbixjPW51bGwsZD10aGlzLl9pdGVtcy5sZW5ndGgsZT0hdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsZj1bXTtmb3IoYS5pdGVtcz17bWVyZ2U6ITEsd2lkdGg6Yn07ZC0tOyljPXRoaXMuX21lcmdlcnNbZF0sYz10aGlzLnNldHRpbmdzLm1lcmdlRml0JiZNYXRoLm1pbihjLHRoaXMuc2V0dGluZ3MuaXRlbXMpfHxjLGEuaXRlbXMubWVyZ2U9Yz4xfHxhLml0ZW1zLm1lcmdlLGZbZF09ZT9iKmM6dGhpcy5faXRlbXNbZF0ud2lkdGgoKTt0aGlzLl93aWR0aHM9Zn19LHtmaWx0ZXI6W1wiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbigpe3ZhciBiPVtdLGM9dGhpcy5faXRlbXMsZD10aGlzLnNldHRpbmdzLGU9TWF0aC5tYXgoMipkLml0ZW1zLDQpLGY9MipNYXRoLmNlaWwoYy5sZW5ndGgvMiksZz1kLmxvb3AmJmMubGVuZ3RoP2QucmV3aW5kP2U6TWF0aC5tYXgoZSxmKTowLGg9XCJcIixpPVwiXCI7Zm9yKGcvPTI7Zy0tOyliLnB1c2godGhpcy5ub3JtYWxpemUoYi5sZW5ndGgvMiwhMCkpLGgrPWNbYltiLmxlbmd0aC0xXV1bMF0ub3V0ZXJIVE1MLGIucHVzaCh0aGlzLm5vcm1hbGl6ZShjLmxlbmd0aC0xLShiLmxlbmd0aC0xKS8yLCEwKSksaT1jW2JbYi5sZW5ndGgtMV1dWzBdLm91dGVySFRNTCtpO3RoaXMuX2Nsb25lcz1iLGEoaCkuYWRkQ2xhc3MoXCJjbG9uZWRcIikuYXBwZW5kVG8odGhpcy4kc3RhZ2UpLGEoaSkuYWRkQ2xhc3MoXCJjbG9uZWRcIikucHJlcGVuZFRvKHRoaXMuJHN0YWdlKX19LHtmaWx0ZXI6W1wid2lkdGhcIixcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5zZXR0aW5ncy5ydGw/MTotMSxiPXRoaXMuX2Nsb25lcy5sZW5ndGgrdGhpcy5faXRlbXMubGVuZ3RoLGM9LTEsZD0wLGU9MCxmPVtdOysrYzxiOylkPWZbYy0xXXx8MCxlPXRoaXMuX3dpZHRoc1t0aGlzLnJlbGF0aXZlKGMpXSt0aGlzLnNldHRpbmdzLm1hcmdpbixmLnB1c2goZCtlKmEpO3RoaXMuX2Nvb3JkaW5hdGVzPWZ9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcsYj10aGlzLl9jb29yZGluYXRlcyxjPXt3aWR0aDpNYXRoLmNlaWwoTWF0aC5hYnMoYltiLmxlbmd0aC0xXSkpKzIqYSxcInBhZGRpbmctbGVmdFwiOmF8fFwiXCIsXCJwYWRkaW5nLXJpZ2h0XCI6YXx8XCJcIn07dGhpcy4kc3RhZ2UuY3NzKGMpfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLl9jb29yZGluYXRlcy5sZW5ndGgsYz0hdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsZD10aGlzLiRzdGFnZS5jaGlsZHJlbigpO2lmKGMmJmEuaXRlbXMubWVyZ2UpZm9yKDtiLS07KWEuY3NzLndpZHRoPXRoaXMuX3dpZHRoc1t0aGlzLnJlbGF0aXZlKGIpXSxkLmVxKGIpLmNzcyhhLmNzcyk7ZWxzZSBjJiYoYS5jc3Mud2lkdGg9YS5pdGVtcy53aWR0aCxkLmNzcyhhLmNzcykpfX0se2ZpbHRlcjpbXCJpdGVtc1wiXSxydW46ZnVuY3Rpb24oKXt0aGlzLl9jb29yZGluYXRlcy5sZW5ndGg8MSYmdGhpcy4kc3RhZ2UucmVtb3ZlQXR0cihcInN0eWxlXCIpfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbihhKXthLmN1cnJlbnQ9YS5jdXJyZW50P3RoaXMuJHN0YWdlLmNoaWxkcmVuKCkuaW5kZXgoYS5jdXJyZW50KTowLGEuY3VycmVudD1NYXRoLm1heCh0aGlzLm1pbmltdW0oKSxNYXRoLm1pbih0aGlzLm1heGltdW0oKSxhLmN1cnJlbnQpKSx0aGlzLnJlc2V0KGEuY3VycmVudCl9fSx7ZmlsdGVyOltcInBvc2l0aW9uXCJdLHJ1bjpmdW5jdGlvbigpe3RoaXMuYW5pbWF0ZSh0aGlzLmNvb3JkaW5hdGVzKHRoaXMuX2N1cnJlbnQpKX19LHtmaWx0ZXI6W1wid2lkdGhcIixcInBvc2l0aW9uXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZT10aGlzLnNldHRpbmdzLnJ0bD8xOi0xLGY9Mip0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyxnPXRoaXMuY29vcmRpbmF0ZXModGhpcy5jdXJyZW50KCkpK2YsaD1nK3RoaXMud2lkdGgoKSplLGk9W107Zm9yKGM9MCxkPXRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aDtkPmM7YysrKWE9dGhpcy5fY29vcmRpbmF0ZXNbYy0xXXx8MCxiPU1hdGguYWJzKHRoaXMuX2Nvb3JkaW5hdGVzW2NdKStmKmUsKHRoaXMub3AoYSxcIjw9XCIsZykmJnRoaXMub3AoYSxcIj5cIixoKXx8dGhpcy5vcChiLFwiPFwiLGcpJiZ0aGlzLm9wKGIsXCI+XCIsaCkpJiZpLnB1c2goYyk7dGhpcy4kc3RhZ2UuY2hpbGRyZW4oXCIuYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLHRoaXMuJHN0YWdlLmNoaWxkcmVuKFwiOmVxKFwiK2kuam9pbihcIiksIDplcShcIikrXCIpXCIpLmFkZENsYXNzKFwiYWN0aXZlXCIpLHRoaXMuc2V0dGluZ3MuY2VudGVyJiYodGhpcy4kc3RhZ2UuY2hpbGRyZW4oXCIuY2VudGVyXCIpLnJlbW92ZUNsYXNzKFwiY2VudGVyXCIpLHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5jdXJyZW50KCkpLmFkZENsYXNzKFwiY2VudGVyXCIpKX19XSxlLnByb3RvdHlwZS5pbml0aWFsaXplPWZ1bmN0aW9uKCl7aWYodGhpcy5lbnRlcihcImluaXRpYWxpemluZ1wiKSx0aGlzLnRyaWdnZXIoXCJpbml0aWFsaXplXCIpLHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5zZXR0aW5ncy5ydGxDbGFzcyx0aGlzLnNldHRpbmdzLnJ0bCksdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgmJiF0aGlzLmlzKFwicHJlLWxvYWRpbmdcIikpe3ZhciBiLGMsZTtiPXRoaXMuJGVsZW1lbnQuZmluZChcImltZ1wiKSxjPXRoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yP1wiLlwiK3RoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yOmQsZT10aGlzLiRlbGVtZW50LmNoaWxkcmVuKGMpLndpZHRoKCksYi5sZW5ndGgmJjA+PWUmJnRoaXMucHJlbG9hZEF1dG9XaWR0aEltYWdlcyhiKX10aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5sb2FkaW5nQ2xhc3MpLHRoaXMuJHN0YWdlPWEoXCI8XCIrdGhpcy5zZXR0aW5ncy5zdGFnZUVsZW1lbnQrJyBjbGFzcz1cIicrdGhpcy5zZXR0aW5ncy5zdGFnZUNsYXNzKydcIi8+Jykud3JhcCgnPGRpdiBjbGFzcz1cIicrdGhpcy5zZXR0aW5ncy5zdGFnZU91dGVyQ2xhc3MrJ1wiLz4nKSx0aGlzLiRlbGVtZW50LmFwcGVuZCh0aGlzLiRzdGFnZS5wYXJlbnQoKSksdGhpcy5yZXBsYWNlKHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oKS5ub3QodGhpcy4kc3RhZ2UucGFyZW50KCkpKSx0aGlzLiRlbGVtZW50LmlzKFwiOnZpc2libGVcIik/dGhpcy5yZWZyZXNoKCk6dGhpcy5pbnZhbGlkYXRlKFwid2lkdGhcIiksdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGVkQ2xhc3MpLHRoaXMucmVnaXN0ZXJFdmVudEhhbmRsZXJzKCksdGhpcy5sZWF2ZShcImluaXRpYWxpemluZ1wiKSx0aGlzLnRyaWdnZXIoXCJpbml0aWFsaXplZFwiKX0sZS5wcm90b3R5cGUuc2V0dXA9ZnVuY3Rpb24oKXt2YXIgYj10aGlzLnZpZXdwb3J0KCksYz10aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSxkPS0xLGU9bnVsbDtjPyhhLmVhY2goYyxmdW5jdGlvbihhKXtiPj1hJiZhPmQmJihkPU51bWJlcihhKSl9KSxlPWEuZXh0ZW5kKHt9LHRoaXMub3B0aW9ucyxjW2RdKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnN0YWdlUGFkZGluZyYmKGUuc3RhZ2VQYWRkaW5nPWUuc3RhZ2VQYWRkaW5nKCkpLGRlbGV0ZSBlLnJlc3BvbnNpdmUsZS5yZXNwb25zaXZlQ2xhc3MmJnRoaXMuJGVsZW1lbnQuYXR0cihcImNsYXNzXCIsdGhpcy4kZWxlbWVudC5hdHRyKFwiY2xhc3NcIikucmVwbGFjZShuZXcgUmVnRXhwKFwiKFwiK3RoaXMub3B0aW9ucy5yZXNwb25zaXZlQ2xhc3MrXCItKVxcXFxTK1xcXFxzXCIsXCJnXCIpLFwiJDFcIitkKSkpOmU9YS5leHRlbmQoe30sdGhpcy5vcHRpb25zKSx0aGlzLnRyaWdnZXIoXCJjaGFuZ2VcIix7cHJvcGVydHk6e25hbWU6XCJzZXR0aW5nc1wiLHZhbHVlOmV9fSksdGhpcy5fYnJlYWtwb2ludD1kLHRoaXMuc2V0dGluZ3M9ZSx0aGlzLmludmFsaWRhdGUoXCJzZXR0aW5nc1wiKSx0aGlzLnRyaWdnZXIoXCJjaGFuZ2VkXCIse3Byb3BlcnR5OntuYW1lOlwic2V0dGluZ3NcIix2YWx1ZTp0aGlzLnNldHRpbmdzfX0pfSxlLnByb3RvdHlwZS5vcHRpb25zTG9naWM9ZnVuY3Rpb24oKXt0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCYmKHRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nPSExLHRoaXMuc2V0dGluZ3MubWVyZ2U9ITEpfSxlLnByb3RvdHlwZS5wcmVwYXJlPWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMudHJpZ2dlcihcInByZXBhcmVcIix7Y29udGVudDpifSk7cmV0dXJuIGMuZGF0YXx8KGMuZGF0YT1hKFwiPFwiK3RoaXMuc2V0dGluZ3MuaXRlbUVsZW1lbnQrXCIvPlwiKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaXRlbUNsYXNzKS5hcHBlbmQoYikpLHRoaXMudHJpZ2dlcihcInByZXBhcmVkXCIse2NvbnRlbnQ6Yy5kYXRhfSksYy5kYXRhfSxlLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXtmb3IodmFyIGI9MCxjPXRoaXMuX3BpcGUubGVuZ3RoLGQ9YS5wcm94eShmdW5jdGlvbihhKXtyZXR1cm4gdGhpc1thXX0sdGhpcy5faW52YWxpZGF0ZWQpLGU9e307Yz5iOykodGhpcy5faW52YWxpZGF0ZWQuYWxsfHxhLmdyZXAodGhpcy5fcGlwZVtiXS5maWx0ZXIsZCkubGVuZ3RoPjApJiZ0aGlzLl9waXBlW2JdLnJ1bihlKSxiKys7dGhpcy5faW52YWxpZGF0ZWQ9e30sIXRoaXMuaXMoXCJ2YWxpZFwiKSYmdGhpcy5lbnRlcihcInZhbGlkXCIpfSxlLnByb3RvdHlwZS53aWR0aD1mdW5jdGlvbihhKXtzd2l0Y2goYT1hfHxlLldpZHRoLkRlZmF1bHQpe2Nhc2UgZS5XaWR0aC5Jbm5lcjpjYXNlIGUuV2lkdGguT3V0ZXI6cmV0dXJuIHRoaXMuX3dpZHRoO2RlZmF1bHQ6cmV0dXJuIHRoaXMuX3dpZHRoLTIqdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcrdGhpcy5zZXR0aW5ncy5tYXJnaW59fSxlLnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKCl7dGhpcy5lbnRlcihcInJlZnJlc2hpbmdcIiksdGhpcy50cmlnZ2VyKFwicmVmcmVzaFwiKSx0aGlzLnNldHVwKCksdGhpcy5vcHRpb25zTG9naWMoKSx0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpLHRoaXMudXBkYXRlKCksdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucmVmcmVzaENsYXNzKSx0aGlzLmxlYXZlKFwicmVmcmVzaGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJyZWZyZXNoZWRcIil9LGUucHJvdG90eXBlLm9uVGhyb3R0bGVkUmVzaXplPWZ1bmN0aW9uKCl7Yi5jbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lciksdGhpcy5yZXNpemVUaW1lcj1iLnNldFRpbWVvdXQodGhpcy5faGFuZGxlcnMub25SZXNpemUsdGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlUmVmcmVzaFJhdGUpfSxlLnByb3RvdHlwZS5vblJlc2l6ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pdGVtcy5sZW5ndGg/dGhpcy5fd2lkdGg9PT10aGlzLiRlbGVtZW50LndpZHRoKCk/ITE6dGhpcy4kZWxlbWVudC5pcyhcIjp2aXNpYmxlXCIpPyh0aGlzLmVudGVyKFwicmVzaXppbmdcIiksdGhpcy50cmlnZ2VyKFwicmVzaXplXCIpLmlzRGVmYXVsdFByZXZlbnRlZCgpPyh0aGlzLmxlYXZlKFwicmVzaXppbmdcIiksITEpOih0aGlzLmludmFsaWRhdGUoXCJ3aWR0aFwiKSx0aGlzLnJlZnJlc2goKSx0aGlzLmxlYXZlKFwicmVzaXppbmdcIiksdm9pZCB0aGlzLnRyaWdnZXIoXCJyZXNpemVkXCIpKSk6ITE6ITF9LGUucHJvdG90eXBlLnJlZ2lzdGVyRXZlbnRIYW5kbGVycz1mdW5jdGlvbigpe2Euc3VwcG9ydC50cmFuc2l0aW9uJiZ0aGlzLiRzdGFnZS5vbihhLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQrXCIub3dsLmNvcmVcIixhLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLHRoaXMpKSx0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmUhPT0hMSYmdGhpcy5vbihiLFwicmVzaXplXCIsdGhpcy5faGFuZGxlcnMub25UaHJvdHRsZWRSZXNpemUpLHRoaXMuc2V0dGluZ3MubW91c2VEcmFnJiYodGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZHJhZ0NsYXNzKSx0aGlzLiRzdGFnZS5vbihcIm1vdXNlZG93bi5vd2wuY29yZVwiLGEucHJveHkodGhpcy5vbkRyYWdTdGFydCx0aGlzKSksdGhpcy4kc3RhZ2Uub24oXCJkcmFnc3RhcnQub3dsLmNvcmUgc2VsZWN0c3RhcnQub3dsLmNvcmVcIixmdW5jdGlvbigpe3JldHVybiExfSkpLHRoaXMuc2V0dGluZ3MudG91Y2hEcmFnJiYodGhpcy4kc3RhZ2Uub24oXCJ0b3VjaHN0YXJ0Lm93bC5jb3JlXCIsYS5wcm94eSh0aGlzLm9uRHJhZ1N0YXJ0LHRoaXMpKSx0aGlzLiRzdGFnZS5vbihcInRvdWNoY2FuY2VsLm93bC5jb3JlXCIsYS5wcm94eSh0aGlzLm9uRHJhZ0VuZCx0aGlzKSkpfSxlLnByb3RvdHlwZS5vbkRyYWdTdGFydD1mdW5jdGlvbihiKXt2YXIgZD1udWxsOzMhPT1iLndoaWNoJiYoYS5zdXBwb3J0LnRyYW5zZm9ybT8oZD10aGlzLiRzdGFnZS5jc3MoXCJ0cmFuc2Zvcm1cIikucmVwbGFjZSgvLipcXCh8XFwpfCAvZyxcIlwiKS5zcGxpdChcIixcIiksZD17eDpkWzE2PT09ZC5sZW5ndGg/MTI6NF0seTpkWzE2PT09ZC5sZW5ndGg/MTM6NV19KTooZD10aGlzLiRzdGFnZS5wb3NpdGlvbigpLGQ9e3g6dGhpcy5zZXR0aW5ncy5ydGw/ZC5sZWZ0K3RoaXMuJHN0YWdlLndpZHRoKCktdGhpcy53aWR0aCgpK3RoaXMuc2V0dGluZ3MubWFyZ2luOmQubGVmdCx5OmQudG9wfSksdGhpcy5pcyhcImFuaW1hdGluZ1wiKSYmKGEuc3VwcG9ydC50cmFuc2Zvcm0/dGhpcy5hbmltYXRlKGQueCk6dGhpcy4kc3RhZ2Uuc3RvcCgpLHRoaXMuaW52YWxpZGF0ZShcInBvc2l0aW9uXCIpKSx0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MsXCJtb3VzZWRvd25cIj09PWIudHlwZSksdGhpcy5zcGVlZCgwKSx0aGlzLl9kcmFnLnRpbWU9KG5ldyBEYXRlKS5nZXRUaW1lKCksdGhpcy5fZHJhZy50YXJnZXQ9YShiLnRhcmdldCksdGhpcy5fZHJhZy5zdGFnZS5zdGFydD1kLHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudD1kLHRoaXMuX2RyYWcucG9pbnRlcj10aGlzLnBvaW50ZXIoYiksYShjKS5vbihcIm1vdXNldXAub3dsLmNvcmUgdG91Y2hlbmQub3dsLmNvcmVcIixhLnByb3h5KHRoaXMub25EcmFnRW5kLHRoaXMpKSxhKGMpLm9uZShcIm1vdXNlbW92ZS5vd2wuY29yZSB0b3VjaG1vdmUub3dsLmNvcmVcIixhLnByb3h5KGZ1bmN0aW9uKGIpe3ZhciBkPXRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnBvaW50ZXIsdGhpcy5wb2ludGVyKGIpKTthKGMpLm9uKFwibW91c2Vtb3ZlLm93bC5jb3JlIHRvdWNobW92ZS5vd2wuY29yZVwiLGEucHJveHkodGhpcy5vbkRyYWdNb3ZlLHRoaXMpKSxNYXRoLmFicyhkLngpPE1hdGguYWJzKGQueSkmJnRoaXMuaXMoXCJ2YWxpZFwiKXx8KGIucHJldmVudERlZmF1bHQoKSx0aGlzLmVudGVyKFwiZHJhZ2dpbmdcIiksdGhpcy50cmlnZ2VyKFwiZHJhZ1wiKSl9LHRoaXMpKSl9LGUucHJvdG90eXBlLm9uRHJhZ01vdmU9ZnVuY3Rpb24oYSl7dmFyIGI9bnVsbCxjPW51bGwsZD1udWxsLGU9dGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlcix0aGlzLnBvaW50ZXIoYSkpLGY9dGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcuc3RhZ2Uuc3RhcnQsZSk7dGhpcy5pcyhcImRyYWdnaW5nXCIpJiYoYS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuc2V0dGluZ3MubG9vcD8oYj10aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKSxjPXRoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkrMSktYixmLng9KChmLngtYiklYytjKSVjK2IpOihiPXRoaXMuc2V0dGluZ3MucnRsP3RoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkpOnRoaXMuY29vcmRpbmF0ZXModGhpcy5taW5pbXVtKCkpLGM9dGhpcy5zZXR0aW5ncy5ydGw/dGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSk6dGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSksZD10aGlzLnNldHRpbmdzLnB1bGxEcmFnPy0xKmUueC81OjAsZi54PU1hdGgubWF4KE1hdGgubWluKGYueCxiK2QpLGMrZCkpLHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudD1mLHRoaXMuYW5pbWF0ZShmLngpKX0sZS5wcm90b3R5cGUub25EcmFnRW5kPWZ1bmN0aW9uKGIpe3ZhciBkPXRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnBvaW50ZXIsdGhpcy5wb2ludGVyKGIpKSxlPXRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudCxmPWQueD4wXnRoaXMuc2V0dGluZ3MucnRsP1wibGVmdFwiOlwicmlnaHRcIjthKGMpLm9mZihcIi5vd2wuY29yZVwiKSx0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MpLCgwIT09ZC54JiZ0aGlzLmlzKFwiZHJhZ2dpbmdcIil8fCF0aGlzLmlzKFwidmFsaWRcIikpJiYodGhpcy5zcGVlZCh0aGlzLnNldHRpbmdzLmRyYWdFbmRTcGVlZHx8dGhpcy5zZXR0aW5ncy5zbWFydFNwZWVkKSx0aGlzLmN1cnJlbnQodGhpcy5jbG9zZXN0KGUueCwwIT09ZC54P2Y6dGhpcy5fZHJhZy5kaXJlY3Rpb24pKSx0aGlzLmludmFsaWRhdGUoXCJwb3NpdGlvblwiKSx0aGlzLnVwZGF0ZSgpLHRoaXMuX2RyYWcuZGlyZWN0aW9uPWYsKE1hdGguYWJzKGQueCk+M3x8KG5ldyBEYXRlKS5nZXRUaW1lKCktdGhpcy5fZHJhZy50aW1lPjMwMCkmJnRoaXMuX2RyYWcudGFyZ2V0Lm9uZShcImNsaWNrLm93bC5jb3JlXCIsZnVuY3Rpb24oKXtyZXR1cm4hMX0pKSx0aGlzLmlzKFwiZHJhZ2dpbmdcIikmJih0aGlzLmxlYXZlKFwiZHJhZ2dpbmdcIiksdGhpcy50cmlnZ2VyKFwiZHJhZ2dlZFwiKSl9LGUucHJvdG90eXBlLmNsb3Nlc3Q9ZnVuY3Rpb24oYixjKXt2YXIgZD0tMSxlPTMwLGY9dGhpcy53aWR0aCgpLGc9dGhpcy5jb29yZGluYXRlcygpO3JldHVybiB0aGlzLnNldHRpbmdzLmZyZWVEcmFnfHxhLmVhY2goZyxhLnByb3h5KGZ1bmN0aW9uKGEsaCl7cmV0dXJuXCJsZWZ0XCI9PT1jJiZiPmgtZSYmaCtlPmI/ZD1hOlwicmlnaHRcIj09PWMmJmI+aC1mLWUmJmgtZitlPmI/ZD1hKzE6dGhpcy5vcChiLFwiPFwiLGgpJiZ0aGlzLm9wKGIsXCI+XCIsZ1thKzFdfHxoLWYpJiYoZD1cImxlZnRcIj09PWM/YSsxOmEpLC0xPT09ZH0sdGhpcykpLHRoaXMuc2V0dGluZ3MubG9vcHx8KHRoaXMub3AoYixcIj5cIixnW3RoaXMubWluaW11bSgpXSk/ZD1iPXRoaXMubWluaW11bSgpOnRoaXMub3AoYixcIjxcIixnW3RoaXMubWF4aW11bSgpXSkmJihkPWI9dGhpcy5tYXhpbXVtKCkpKSxkfSxlLnByb3RvdHlwZS5hbmltYXRlPWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMuc3BlZWQoKT4wO3RoaXMuaXMoXCJhbmltYXRpbmdcIikmJnRoaXMub25UcmFuc2l0aW9uRW5kKCksYyYmKHRoaXMuZW50ZXIoXCJhbmltYXRpbmdcIiksdGhpcy50cmlnZ2VyKFwidHJhbnNsYXRlXCIpKSxhLnN1cHBvcnQudHJhbnNmb3JtM2QmJmEuc3VwcG9ydC50cmFuc2l0aW9uP3RoaXMuJHN0YWdlLmNzcyh7dHJhbnNmb3JtOlwidHJhbnNsYXRlM2QoXCIrYitcInB4LDBweCwwcHgpXCIsdHJhbnNpdGlvbjp0aGlzLnNwZWVkKCkvMWUzK1wic1wifSk6Yz90aGlzLiRzdGFnZS5hbmltYXRlKHtsZWZ0OmIrXCJweFwifSx0aGlzLnNwZWVkKCksdGhpcy5zZXR0aW5ncy5mYWxsYmFja0Vhc2luZyxhLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLHRoaXMpKTp0aGlzLiRzdGFnZS5jc3Moe2xlZnQ6YitcInB4XCJ9KX0sZS5wcm90b3R5cGUuaXM9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX3N0YXRlcy5jdXJyZW50W2FdJiZ0aGlzLl9zdGF0ZXMuY3VycmVudFthXT4wfSxlLnByb3RvdHlwZS5jdXJyZW50PWZ1bmN0aW9uKGEpe2lmKGE9PT1kKXJldHVybiB0aGlzLl9jdXJyZW50O2lmKDA9PT10aGlzLl9pdGVtcy5sZW5ndGgpcmV0dXJuIGQ7aWYoYT10aGlzLm5vcm1hbGl6ZShhKSx0aGlzLl9jdXJyZW50IT09YSl7dmFyIGI9dGhpcy50cmlnZ2VyKFwiY2hhbmdlXCIse3Byb3BlcnR5OntuYW1lOlwicG9zaXRpb25cIix2YWx1ZTphfX0pO2IuZGF0YSE9PWQmJihhPXRoaXMubm9ybWFsaXplKGIuZGF0YSkpLHRoaXMuX2N1cnJlbnQ9YSx0aGlzLmludmFsaWRhdGUoXCJwb3NpdGlvblwiKSx0aGlzLnRyaWdnZXIoXCJjaGFuZ2VkXCIse3Byb3BlcnR5OntuYW1lOlwicG9zaXRpb25cIix2YWx1ZTp0aGlzLl9jdXJyZW50fX0pfXJldHVybiB0aGlzLl9jdXJyZW50fSxlLnByb3RvdHlwZS5pbnZhbGlkYXRlPWZ1bmN0aW9uKGIpe3JldHVyblwic3RyaW5nXCI9PT1hLnR5cGUoYikmJih0aGlzLl9pbnZhbGlkYXRlZFtiXT0hMCx0aGlzLmlzKFwidmFsaWRcIikmJnRoaXMubGVhdmUoXCJ2YWxpZFwiKSksYS5tYXAodGhpcy5faW52YWxpZGF0ZWQsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYn0pfSxlLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbihhKXthPXRoaXMubm9ybWFsaXplKGEpLGEhPT1kJiYodGhpcy5fc3BlZWQ9MCx0aGlzLl9jdXJyZW50PWEsdGhpcy5zdXBwcmVzcyhbXCJ0cmFuc2xhdGVcIixcInRyYW5zbGF0ZWRcIl0pLHRoaXMuYW5pbWF0ZSh0aGlzLmNvb3JkaW5hdGVzKGEpKSx0aGlzLnJlbGVhc2UoW1widHJhbnNsYXRlXCIsXCJ0cmFuc2xhdGVkXCJdKSl9LGUucHJvdG90eXBlLm5vcm1hbGl6ZT1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2l0ZW1zLmxlbmd0aCxlPWI/MDp0aGlzLl9jbG9uZXMubGVuZ3RoO3JldHVybiF0aGlzLmlzTnVtZXJpYyhhKXx8MT5jP2E9ZDooMD5hfHxhPj1jK2UpJiYoYT0oKGEtZS8yKSVjK2MpJWMrZS8yKSxhfSxlLnByb3RvdHlwZS5yZWxhdGl2ZT1mdW5jdGlvbihhKXtyZXR1cm4gYS09dGhpcy5fY2xvbmVzLmxlbmd0aC8yLHRoaXMubm9ybWFsaXplKGEsITApfSxlLnByb3RvdHlwZS5tYXhpbXVtPWZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPXRoaXMuc2V0dGluZ3MsZj10aGlzLl9jb29yZGluYXRlcy5sZW5ndGg7aWYoZS5sb29wKWY9dGhpcy5fY2xvbmVzLmxlbmd0aC8yK3RoaXMuX2l0ZW1zLmxlbmd0aC0xO2Vsc2UgaWYoZS5hdXRvV2lkdGh8fGUubWVyZ2Upe2ZvcihiPXRoaXMuX2l0ZW1zLmxlbmd0aCxjPXRoaXMuX2l0ZW1zWy0tYl0ud2lkdGgoKSxkPXRoaXMuJGVsZW1lbnQud2lkdGgoKTtiLS0mJihjKz10aGlzLl9pdGVtc1tiXS53aWR0aCgpK3RoaXMuc2V0dGluZ3MubWFyZ2luLCEoYz5kKSk7KTtmPWIrMX1lbHNlIGY9ZS5jZW50ZXI/dGhpcy5faXRlbXMubGVuZ3RoLTE6dGhpcy5faXRlbXMubGVuZ3RoLWUuaXRlbXM7cmV0dXJuIGEmJihmLT10aGlzLl9jbG9uZXMubGVuZ3RoLzIpLE1hdGgubWF4KGYsMCl9LGUucHJvdG90eXBlLm1pbmltdW09ZnVuY3Rpb24oYSl7cmV0dXJuIGE/MDp0aGlzLl9jbG9uZXMubGVuZ3RoLzJ9LGUucHJvdG90eXBlLml0ZW1zPWZ1bmN0aW9uKGEpe3JldHVybiBhPT09ZD90aGlzLl9pdGVtcy5zbGljZSgpOihhPXRoaXMubm9ybWFsaXplKGEsITApLHRoaXMuX2l0ZW1zW2FdKX0sZS5wcm90b3R5cGUubWVyZ2Vycz1mdW5jdGlvbihhKXtyZXR1cm4gYT09PWQ/dGhpcy5fbWVyZ2Vycy5zbGljZSgpOihhPXRoaXMubm9ybWFsaXplKGEsITApLHRoaXMuX21lcmdlcnNbYV0pfSxlLnByb3RvdHlwZS5jbG9uZXM9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5fY2xvbmVzLmxlbmd0aC8yLGU9Yyt0aGlzLl9pdGVtcy5sZW5ndGgsZj1mdW5jdGlvbihhKXtyZXR1cm4gYSUyPT09MD9lK2EvMjpjLShhKzEpLzJ9O3JldHVybiBiPT09ZD9hLm1hcCh0aGlzLl9jbG9uZXMsZnVuY3Rpb24oYSxiKXtyZXR1cm4gZihiKX0pOmEubWFwKHRoaXMuX2Nsb25lcyxmdW5jdGlvbihhLGMpe3JldHVybiBhPT09Yj9mKGMpOm51bGx9KX0sZS5wcm90b3R5cGUuc3BlZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT1kJiYodGhpcy5fc3BlZWQ9YSksdGhpcy5fc3BlZWR9LGUucHJvdG90eXBlLmNvb3JkaW5hdGVzPWZ1bmN0aW9uKGIpe3ZhciBjLGU9MSxmPWItMTtyZXR1cm4gYj09PWQ/YS5tYXAodGhpcy5fY29vcmRpbmF0ZXMsYS5wcm94eShmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmNvb3JkaW5hdGVzKGIpfSx0aGlzKSk6KHRoaXMuc2V0dGluZ3MuY2VudGVyPyh0aGlzLnNldHRpbmdzLnJ0bCYmKGU9LTEsZj1iKzEpLGM9dGhpcy5fY29vcmRpbmF0ZXNbYl0sYys9KHRoaXMud2lkdGgoKS1jKyh0aGlzLl9jb29yZGluYXRlc1tmXXx8MCkpLzIqZSk6Yz10aGlzLl9jb29yZGluYXRlc1tmXXx8MCxjPU1hdGguY2VpbChjKSl9LGUucHJvdG90eXBlLmR1cmF0aW9uPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMD09PWM/MDpNYXRoLm1pbihNYXRoLm1heChNYXRoLmFicyhiLWEpLDEpLDYpKk1hdGguYWJzKGN8fHRoaXMuc2V0dGluZ3Muc21hcnRTcGVlZCl9LGUucHJvdG90eXBlLnRvPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jdXJyZW50KCksZD1udWxsLGU9YS10aGlzLnJlbGF0aXZlKGMpLGY9KGU+MCktKDA+ZSksZz10aGlzLl9pdGVtcy5sZW5ndGgsaD10aGlzLm1pbmltdW0oKSxpPXRoaXMubWF4aW11bSgpO3RoaXMuc2V0dGluZ3MubG9vcD8oIXRoaXMuc2V0dGluZ3MucmV3aW5kJiZNYXRoLmFicyhlKT5nLzImJihlKz0tMSpmKmcpLGE9YytlLGQ9KChhLWgpJWcrZyklZytoLGQhPT1hJiZpPj1kLWUmJmQtZT4wJiYoYz1kLWUsYT1kLHRoaXMucmVzZXQoYykpKTp0aGlzLnNldHRpbmdzLnJld2luZD8oaSs9MSxhPShhJWkraSklaSk6YT1NYXRoLm1heChoLE1hdGgubWluKGksYSkpLHRoaXMuc3BlZWQodGhpcy5kdXJhdGlvbihjLGEsYikpLHRoaXMuY3VycmVudChhKSx0aGlzLiRlbGVtZW50LmlzKFwiOnZpc2libGVcIikmJnRoaXMudXBkYXRlKCl9LGUucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oYSl7YT1hfHwhMSx0aGlzLnRvKHRoaXMucmVsYXRpdmUodGhpcy5jdXJyZW50KCkpKzEsYSl9LGUucHJvdG90eXBlLnByZXY9ZnVuY3Rpb24oYSl7YT1hfHwhMSx0aGlzLnRvKHRoaXMucmVsYXRpdmUodGhpcy5jdXJyZW50KCkpLTEsYSl9LGUucHJvdG90eXBlLm9uVHJhbnNpdGlvbkVuZD1mdW5jdGlvbihhKXtyZXR1cm4gYSE9PWQmJihhLnN0b3BQcm9wYWdhdGlvbigpLChhLnRhcmdldHx8YS5zcmNFbGVtZW50fHxhLm9yaWdpbmFsVGFyZ2V0KSE9PXRoaXMuJHN0YWdlLmdldCgwKSk/ITE6KHRoaXMubGVhdmUoXCJhbmltYXRpbmdcIiksdm9pZCB0aGlzLnRyaWdnZXIoXCJ0cmFuc2xhdGVkXCIpKX0sZS5wcm90b3R5cGUudmlld3BvcnQ9ZnVuY3Rpb24oKXt2YXIgZDtpZih0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUJhc2VFbGVtZW50IT09YilkPWEodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVCYXNlRWxlbWVudCkud2lkdGgoKTtlbHNlIGlmKGIuaW5uZXJXaWR0aClkPWIuaW5uZXJXaWR0aDtlbHNle2lmKCFjLmRvY3VtZW50RWxlbWVudHx8IWMuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKXRocm93XCJDYW4gbm90IGRldGVjdCB2aWV3cG9ydCB3aWR0aC5cIjtkPWMuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRofXJldHVybiBkfSxlLnByb3RvdHlwZS5yZXBsYWNlPWZ1bmN0aW9uKGIpe3RoaXMuJHN0YWdlLmVtcHR5KCksdGhpcy5faXRlbXM9W10sYiYmKGI9YiBpbnN0YW5jZW9mIGpRdWVyeT9iOmEoYikpLHRoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yJiYoYj1iLmZpbmQoXCIuXCIrdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IpKSxiLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiAxPT09dGhpcy5ub2RlVHlwZX0pLmVhY2goYS5wcm94eShmdW5jdGlvbihhLGIpe2I9dGhpcy5wcmVwYXJlKGIpLHRoaXMuJHN0YWdlLmFwcGVuZChiKSx0aGlzLl9pdGVtcy5wdXNoKGIpLHRoaXMuX21lcmdlcnMucHVzaCgxKmIuZmluZChcIltkYXRhLW1lcmdlXVwiKS5hZGRCYWNrKFwiW2RhdGEtbWVyZ2VdXCIpLmF0dHIoXCJkYXRhLW1lcmdlXCIpfHwxKX0sdGhpcykpLHRoaXMucmVzZXQodGhpcy5pc051bWVyaWModGhpcy5zZXR0aW5ncy5zdGFydFBvc2l0aW9uKT90aGlzLnNldHRpbmdzLnN0YXJ0UG9zaXRpb246MCksdGhpcy5pbnZhbGlkYXRlKFwiaXRlbXNcIil9LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihiLGMpe3ZhciBlPXRoaXMucmVsYXRpdmUodGhpcy5fY3VycmVudCk7Yz1jPT09ZD90aGlzLl9pdGVtcy5sZW5ndGg6dGhpcy5ub3JtYWxpemUoYywhMCksYj1iIGluc3RhbmNlb2YgalF1ZXJ5P2I6YShiKSx0aGlzLnRyaWdnZXIoXCJhZGRcIix7Y29udGVudDpiLHBvc2l0aW9uOmN9KSxiPXRoaXMucHJlcGFyZShiKSwwPT09dGhpcy5faXRlbXMubGVuZ3RofHxjPT09dGhpcy5faXRlbXMubGVuZ3RoPygwPT09dGhpcy5faXRlbXMubGVuZ3RoJiZ0aGlzLiRzdGFnZS5hcHBlbmQoYiksMCE9PXRoaXMuX2l0ZW1zLmxlbmd0aCYmdGhpcy5faXRlbXNbYy0xXS5hZnRlcihiKSx0aGlzLl9pdGVtcy5wdXNoKGIpLHRoaXMuX21lcmdlcnMucHVzaCgxKmIuZmluZChcIltkYXRhLW1lcmdlXVwiKS5hZGRCYWNrKFwiW2RhdGEtbWVyZ2VdXCIpLmF0dHIoXCJkYXRhLW1lcmdlXCIpfHwxKSk6KHRoaXMuX2l0ZW1zW2NdLmJlZm9yZShiKSx0aGlzLl9pdGVtcy5zcGxpY2UoYywwLGIpLHRoaXMuX21lcmdlcnMuc3BsaWNlKGMsMCwxKmIuZmluZChcIltkYXRhLW1lcmdlXVwiKS5hZGRCYWNrKFwiW2RhdGEtbWVyZ2VdXCIpLmF0dHIoXCJkYXRhLW1lcmdlXCIpfHwxKSksdGhpcy5faXRlbXNbZV0mJnRoaXMucmVzZXQodGhpcy5faXRlbXNbZV0uaW5kZXgoKSksdGhpcy5pbnZhbGlkYXRlKFwiaXRlbXNcIiksdGhpcy50cmlnZ2VyKFwiYWRkZWRcIix7Y29udGVudDpiLHBvc2l0aW9uOmN9KX0sZS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKGEpe2E9dGhpcy5ub3JtYWxpemUoYSwhMCksYSE9PWQmJih0aGlzLnRyaWdnZXIoXCJyZW1vdmVcIix7Y29udGVudDp0aGlzLl9pdGVtc1thXSxwb3NpdGlvbjphfSksdGhpcy5faXRlbXNbYV0ucmVtb3ZlKCksdGhpcy5faXRlbXMuc3BsaWNlKGEsMSksdGhpcy5fbWVyZ2Vycy5zcGxpY2UoYSwxKSx0aGlzLmludmFsaWRhdGUoXCJpdGVtc1wiKSx0aGlzLnRyaWdnZXIoXCJyZW1vdmVkXCIse2NvbnRlbnQ6bnVsbCxwb3NpdGlvbjphfSkpfSxlLnByb3RvdHlwZS5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzPWZ1bmN0aW9uKGIpe2IuZWFjaChhLnByb3h5KGZ1bmN0aW9uKGIsYyl7dGhpcy5lbnRlcihcInByZS1sb2FkaW5nXCIpLGM9YShjKSxhKG5ldyBJbWFnZSkub25lKFwibG9hZFwiLGEucHJveHkoZnVuY3Rpb24oYSl7Yy5hdHRyKFwic3JjXCIsYS50YXJnZXQuc3JjKSxjLmNzcyhcIm9wYWNpdHlcIiwxKSx0aGlzLmxlYXZlKFwicHJlLWxvYWRpbmdcIiksIXRoaXMuaXMoXCJwcmUtbG9hZGluZ1wiKSYmIXRoaXMuaXMoXCJpbml0aWFsaXppbmdcIikmJnRoaXMucmVmcmVzaCgpfSx0aGlzKSkuYXR0cihcInNyY1wiLGMuYXR0cihcInNyY1wiKXx8Yy5hdHRyKFwiZGF0YS1zcmNcIil8fGMuYXR0cihcImRhdGEtc3JjLXJldGluYVwiKSl9LHRoaXMpKX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQub2ZmKFwiLm93bC5jb3JlXCIpLHRoaXMuJHN0YWdlLm9mZihcIi5vd2wuY29yZVwiKSxhKGMpLm9mZihcIi5vd2wuY29yZVwiKSx0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmUhPT0hMSYmKGIuY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZXIpLHRoaXMub2ZmKGIsXCJyZXNpemVcIix0aGlzLl9oYW5kbGVycy5vblRocm90dGxlZFJlc2l6ZSkpO2Zvcih2YXIgZCBpbiB0aGlzLl9wbHVnaW5zKXRoaXMuX3BsdWdpbnNbZF0uZGVzdHJveSgpO3RoaXMuJHN0YWdlLmNoaWxkcmVuKFwiLmNsb25lZFwiKS5yZW1vdmUoKSx0aGlzLiRzdGFnZS51bndyYXAoKSx0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmNvbnRlbnRzKCkudW53cmFwKCksdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS51bndyYXAoKSx0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkaW5nQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkZWRDbGFzcykucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnJ0bENsYXNzKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZHJhZ0NsYXNzKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzKS5hdHRyKFwiY2xhc3NcIix0aGlzLiRlbGVtZW50LmF0dHIoXCJjbGFzc1wiKS5yZXBsYWNlKG5ldyBSZWdFeHAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVDbGFzcytcIi1cXFxcUytcXFxcc1wiLFwiZ1wiKSxcIlwiKSkucmVtb3ZlRGF0YShcIm93bC5jYXJvdXNlbFwiKX0sZS5wcm90b3R5cGUub3A9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuc2V0dGluZ3MucnRsO3N3aXRjaChiKXtjYXNlXCI8XCI6cmV0dXJuIGQ/YT5jOmM+YTtjYXNlXCI+XCI6cmV0dXJuIGQ/Yz5hOmE+YztjYXNlXCI+PVwiOnJldHVybiBkP2M+PWE6YT49YztjYXNlXCI8PVwiOnJldHVybiBkP2E+PWM6Yz49YX19LGUucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGEsYixjLGQpe2EuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLGQpOmEuYXR0YWNoRXZlbnQmJmEuYXR0YWNoRXZlbnQoXCJvblwiK2IsYyl9LGUucHJvdG90eXBlLm9mZj1mdW5jdGlvbihhLGIsYyxkKXthLnJlbW92ZUV2ZW50TGlzdGVuZXI/YS5yZW1vdmVFdmVudExpc3RlbmVyKGIsYyxkKTphLmRldGFjaEV2ZW50JiZhLmRldGFjaEV2ZW50KFwib25cIitiLGMpfSxlLnByb3RvdHlwZS50cmlnZ2VyPWZ1bmN0aW9uKGIsYyxkLGYsZyl7dmFyIGg9e2l0ZW06e2NvdW50OnRoaXMuX2l0ZW1zLmxlbmd0aCxpbmRleDp0aGlzLmN1cnJlbnQoKX19LGk9YS5jYW1lbENhc2UoYS5ncmVwKFtcIm9uXCIsYixkXSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pLmpvaW4oXCItXCIpLnRvTG93ZXJDYXNlKCkpLGo9YS5FdmVudChbYixcIm93bFwiLGR8fFwiY2Fyb3VzZWxcIl0uam9pbihcIi5cIikudG9Mb3dlckNhc2UoKSxhLmV4dGVuZCh7cmVsYXRlZFRhcmdldDp0aGlzfSxoLGMpKTtyZXR1cm4gdGhpcy5fc3VwcmVzc1tiXXx8KGEuZWFjaCh0aGlzLl9wbHVnaW5zLGZ1bmN0aW9uKGEsYil7Yi5vblRyaWdnZXImJmIub25UcmlnZ2VyKGopfSksdGhpcy5yZWdpc3Rlcih7dHlwZTplLlR5cGUuRXZlbnQsbmFtZTpifSksdGhpcy4kZWxlbWVudC50cmlnZ2VyKGopLHRoaXMuc2V0dGluZ3MmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuc2V0dGluZ3NbaV0mJnRoaXMuc2V0dGluZ3NbaV0uY2FsbCh0aGlzLGopKSxqfSxlLnByb3RvdHlwZS5lbnRlcj1mdW5jdGlvbihiKXthLmVhY2goW2JdLmNvbmNhdCh0aGlzLl9zdGF0ZXMudGFnc1tiXXx8W10pLGEucHJveHkoZnVuY3Rpb24oYSxiKXt0aGlzLl9zdGF0ZXMuY3VycmVudFtiXT09PWQmJih0aGlzLl9zdGF0ZXMuY3VycmVudFtiXT0wKSx0aGlzLl9zdGF0ZXMuY3VycmVudFtiXSsrfSx0aGlzKSl9LGUucHJvdG90eXBlLmxlYXZlPWZ1bmN0aW9uKGIpe2EuZWFjaChbYl0uY29uY2F0KHRoaXMuX3N0YXRlcy50YWdzW2JdfHxbXSksYS5wcm94eShmdW5jdGlvbihhLGIpe3RoaXMuX3N0YXRlcy5jdXJyZW50W2JdLS19LHRoaXMpKX0sZS5wcm90b3R5cGUucmVnaXN0ZXI9ZnVuY3Rpb24oYil7aWYoYi50eXBlPT09ZS5UeXBlLkV2ZW50KXtpZihhLmV2ZW50LnNwZWNpYWxbYi5uYW1lXXx8KGEuZXZlbnQuc3BlY2lhbFtiLm5hbWVdPXt9KSwhYS5ldmVudC5zcGVjaWFsW2IubmFtZV0ub3dsKXt2YXIgYz1hLmV2ZW50LnNwZWNpYWxbYi5uYW1lXS5fZGVmYXVsdDthLmV2ZW50LnNwZWNpYWxbYi5uYW1lXS5fZGVmYXVsdD1mdW5jdGlvbihhKXtyZXR1cm4hY3x8IWMuYXBwbHl8fGEubmFtZXNwYWNlJiYtMSE9PWEubmFtZXNwYWNlLmluZGV4T2YoXCJvd2xcIik/YS5uYW1lc3BhY2UmJmEubmFtZXNwYWNlLmluZGV4T2YoXCJvd2xcIik+LTE6Yy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGEuZXZlbnQuc3BlY2lhbFtiLm5hbWVdLm93bD0hMH19ZWxzZSBiLnR5cGU9PT1lLlR5cGUuU3RhdGUmJih0aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdP3RoaXMuX3N0YXRlcy50YWdzW2IubmFtZV09dGhpcy5fc3RhdGVzLnRhZ3NbYi5uYW1lXS5jb25jYXQoYi50YWdzKTp0aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdPWIudGFncyx0aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdPWEuZ3JlcCh0aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdLGEucHJveHkoZnVuY3Rpb24oYyxkKXtyZXR1cm4gYS5pbkFycmF5KGMsdGhpcy5fc3RhdGVzLnRhZ3NbYi5uYW1lXSk9PT1kfSx0aGlzKSkpfSxlLnByb3RvdHlwZS5zdXBwcmVzcz1mdW5jdGlvbihiKXthLmVhY2goYixhLnByb3h5KGZ1bmN0aW9uKGEsYil7dGhpcy5fc3VwcmVzc1tiXT0hMH0sdGhpcykpfSxlLnByb3RvdHlwZS5yZWxlYXNlPWZ1bmN0aW9uKGIpe2EuZWFjaChiLGEucHJveHkoZnVuY3Rpb24oYSxiKXtkZWxldGUgdGhpcy5fc3VwcmVzc1tiXX0sdGhpcykpfSxlLnByb3RvdHlwZS5wb2ludGVyPWZ1bmN0aW9uKGEpe3ZhciBjPXt4Om51bGwseTpudWxsfTtyZXR1cm4gYT1hLm9yaWdpbmFsRXZlbnR8fGF8fGIuZXZlbnQsYT1hLnRvdWNoZXMmJmEudG91Y2hlcy5sZW5ndGg/YS50b3VjaGVzWzBdOmEuY2hhbmdlZFRvdWNoZXMmJmEuY2hhbmdlZFRvdWNoZXMubGVuZ3RoP2EuY2hhbmdlZFRvdWNoZXNbMF06YSxhLnBhZ2VYPyhjLng9YS5wYWdlWCxjLnk9YS5wYWdlWSk6KGMueD1hLmNsaWVudFgsYy55PWEuY2xpZW50WSksY30sZS5wcm90b3R5cGUuaXNOdW1lcmljPWZ1bmN0aW9uKGEpe3JldHVybiFpc05hTihwYXJzZUZsb2F0KGEpKX0sZS5wcm90b3R5cGUuZGlmZmVyZW5jZT1mdW5jdGlvbihhLGIpe3JldHVybnt4OmEueC1iLngseTphLnktYi55fX0sYS5mbi5vd2xDYXJvdXNlbD1mdW5jdGlvbihiKXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBkPWEodGhpcyksZj1kLmRhdGEoXCJvd2wuY2Fyb3VzZWxcIik7Znx8KGY9bmV3IGUodGhpcyxcIm9iamVjdFwiPT10eXBlb2YgYiYmYiksZC5kYXRhKFwib3dsLmNhcm91c2VsXCIsZiksYS5lYWNoKFtcIm5leHRcIixcInByZXZcIixcInRvXCIsXCJkZXN0cm95XCIsXCJyZWZyZXNoXCIsXCJyZXBsYWNlXCIsXCJhZGRcIixcInJlbW92ZVwiXSxmdW5jdGlvbihiLGMpe2YucmVnaXN0ZXIoe3R5cGU6ZS5UeXBlLkV2ZW50LG5hbWU6Y30pLGYuJGVsZW1lbnQub24oYytcIi5vd2wuY2Fyb3VzZWwuY29yZVwiLGEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJmEucmVsYXRlZFRhcmdldCE9PXRoaXMmJih0aGlzLnN1cHByZXNzKFtjXSksZltjXS5hcHBseSh0aGlzLFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpKSx0aGlzLnJlbGVhc2UoW2NdKSl9LGYpKX0pKSxcInN0cmluZ1wiPT10eXBlb2YgYiYmXCJfXCIhPT1iLmNoYXJBdCgwKSYmZltiXS5hcHBseShmLGMpfSl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3I9ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZnVuY3Rpb24oYil7dGhpcy5fY29yZT1iLHRoaXMuX2ludGVydmFsPW51bGwsdGhpcy5fdmlzaWJsZT1udWxsLHRoaXMuX2hhbmRsZXJzPXtcImluaXRpYWxpemVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b1JlZnJlc2gmJnRoaXMud2F0Y2goKX0sdGhpcyl9LHRoaXMuX2NvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuX2NvcmUub3B0aW9ucyksdGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyl9O2UuRGVmYXVsdHM9e2F1dG9SZWZyZXNoOiEwLGF1dG9SZWZyZXNoSW50ZXJ2YWw6NTAwfSxlLnByb3RvdHlwZS53YXRjaD1mdW5jdGlvbigpe3RoaXMuX2ludGVydmFsfHwodGhpcy5fdmlzaWJsZT10aGlzLl9jb3JlLiRlbGVtZW50LmlzKFwiOnZpc2libGVcIiksdGhpcy5faW50ZXJ2YWw9Yi5zZXRJbnRlcnZhbChhLnByb3h5KHRoaXMucmVmcmVzaCx0aGlzKSx0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoSW50ZXJ2YWwpKX0sZS5wcm90b3R5cGUucmVmcmVzaD1mdW5jdGlvbigpe3RoaXMuX2NvcmUuJGVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSE9PXRoaXMuX3Zpc2libGUmJih0aGlzLl92aXNpYmxlPSF0aGlzLl92aXNpYmxlLHRoaXMuX2NvcmUuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoXCJvd2wtaGlkZGVuXCIsIXRoaXMuX3Zpc2libGUpLHRoaXMuX3Zpc2libGUmJnRoaXMuX2NvcmUuaW52YWxpZGF0ZShcIndpZHRoXCIpJiZ0aGlzLl9jb3JlLnJlZnJlc2goKSl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxjO2IuY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7Zm9yKGEgaW4gdGhpcy5faGFuZGxlcnMpdGhpcy5fY29yZS4kZWxlbWVudC5vZmYoYSx0aGlzLl9oYW5kbGVyc1thXSk7Zm9yKGMgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1tjXSYmKHRoaXNbY109bnVsbCl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5BdXRvUmVmcmVzaD1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLl9jb3JlPWIsdGhpcy5fbG9hZGVkPVtdLHRoaXMuX2hhbmRsZXJzPXtcImluaXRpYWxpemVkLm93bC5jYXJvdXNlbCBjaGFuZ2Uub3dsLmNhcm91c2VsIHJlc2l6ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihiKXtpZihiLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncyYmdGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCYmKGIucHJvcGVydHkmJlwicG9zaXRpb25cIj09Yi5wcm9wZXJ0eS5uYW1lfHxcImluaXRpYWxpemVkXCI9PWIudHlwZSkpZm9yKHZhciBjPXRoaXMuX2NvcmUuc2V0dGluZ3MsZT1jLmNlbnRlciYmTWF0aC5jZWlsKGMuaXRlbXMvMil8fGMuaXRlbXMsZj1jLmNlbnRlciYmLTEqZXx8MCxnPShiLnByb3BlcnR5JiZiLnByb3BlcnR5LnZhbHVlIT09ZD9iLnByb3BlcnR5LnZhbHVlOnRoaXMuX2NvcmUuY3VycmVudCgpKStmLGg9dGhpcy5fY29yZS5jbG9uZXMoKS5sZW5ndGgsaT1hLnByb3h5KGZ1bmN0aW9uKGEsYil7dGhpcy5sb2FkKGIpfSx0aGlzKTtmKys8ZTspdGhpcy5sb2FkKGgvMit0aGlzLl9jb3JlLnJlbGF0aXZlKGcpKSxoJiZhLmVhY2godGhpcy5fY29yZS5jbG9uZXModGhpcy5fY29yZS5yZWxhdGl2ZShnKSksaSksZysrfSx0aGlzKX0sdGhpcy5fY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5fY29yZS5vcHRpb25zKSx0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKX07ZS5EZWZhdWx0cz17bGF6eUxvYWQ6ITF9LGUucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oYyl7dmFyIGQ9dGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS5lcShjKSxlPWQmJmQuZmluZChcIi5vd2wtbGF6eVwiKTshZXx8YS5pbkFycmF5KGQuZ2V0KDApLHRoaXMuX2xvYWRlZCk+LTF8fChlLmVhY2goYS5wcm94eShmdW5jdGlvbihjLGQpe3ZhciBlLGY9YShkKSxnPWIuZGV2aWNlUGl4ZWxSYXRpbz4xJiZmLmF0dHIoXCJkYXRhLXNyYy1yZXRpbmFcIil8fGYuYXR0cihcImRhdGEtc3JjXCIpO3RoaXMuX2NvcmUudHJpZ2dlcihcImxvYWRcIix7ZWxlbWVudDpmLHVybDpnfSxcImxhenlcIiksZi5pcyhcImltZ1wiKT9mLm9uZShcImxvYWQub3dsLmxhenlcIixhLnByb3h5KGZ1bmN0aW9uKCl7Zi5jc3MoXCJvcGFjaXR5XCIsMSksdGhpcy5fY29yZS50cmlnZ2VyKFwibG9hZGVkXCIse2VsZW1lbnQ6Zix1cmw6Z30sXCJsYXp5XCIpfSx0aGlzKSkuYXR0cihcInNyY1wiLGcpOihlPW5ldyBJbWFnZSxlLm9ubG9hZD1hLnByb3h5KGZ1bmN0aW9uKCl7Zi5jc3Moe1wiYmFja2dyb3VuZC1pbWFnZVwiOlwidXJsKFwiK2crXCIpXCIsb3BhY2l0eTpcIjFcIn0pLHRoaXMuX2NvcmUudHJpZ2dlcihcImxvYWRlZFwiLHtlbGVtZW50OmYsdXJsOmd9LFwibGF6eVwiKX0sdGhpcyksZS5zcmM9Zyl9LHRoaXMpKSx0aGlzLl9sb2FkZWQucHVzaChkLmdldCgwKSkpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYjtmb3IoYSBpbiB0aGlzLmhhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5oYW5kbGVyc1thXSk7Zm9yKGIgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1tiXSYmKHRoaXNbYl09bnVsbCl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5MYXp5PWV9KHdpbmRvdy5aZXB0b3x8d2luZG93LmpRdWVyeSx3aW5kb3csZG9jdW1lbnQpLGZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWZ1bmN0aW9uKGIpe3RoaXMuX2NvcmU9Yix0aGlzLl9oYW5kbGVycz17XCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgcmVmcmVzaGVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCYmdGhpcy51cGRhdGUoKX0sdGhpcyksXCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCYmXCJwb3NpdGlvblwiPT1hLnByb3BlcnR5Lm5hbWUmJnRoaXMudXBkYXRlKCl9LHRoaXMpLFwibG9hZGVkLm93bC5sYXp5XCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0JiZhLmVsZW1lbnQuY2xvc2VzdChcIi5cIit0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1DbGFzcykuaW5kZXgoKT09PXRoaXMuX2NvcmUuY3VycmVudCgpJiZ0aGlzLnVwZGF0ZSgpfSx0aGlzKX0sdGhpcy5fY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5fY29yZS5vcHRpb25zKSx0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKX07ZS5EZWZhdWx0cz17YXV0b0hlaWdodDohMSxhdXRvSGVpZ2h0Q2xhc3M6XCJvd2wtaGVpZ2h0XCJ9LGUucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBiPXRoaXMuX2NvcmUuX2N1cnJlbnQsYz1iK3RoaXMuX2NvcmUuc2V0dGluZ3MuaXRlbXMsZD10aGlzLl9jb3JlLiRzdGFnZS5jaGlsZHJlbigpLnRvQXJyYXkoKS5zbGljZShiLGMpLGU9W10sZj0wO2EuZWFjaChkLGZ1bmN0aW9uKGIsYyl7ZS5wdXNoKGEoYykuaGVpZ2h0KCkpfSksZj1NYXRoLm1heC5hcHBseShudWxsLGUpLHRoaXMuX2NvcmUuJHN0YWdlLnBhcmVudCgpLmhlaWdodChmKS5hZGRDbGFzcyh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHRDbGFzcyl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxiO2ZvcihhIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5faGFuZGxlcnNbYV0pO2ZvcihiIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbYl0mJih0aGlzW2JdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b0hlaWdodD1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLl9jb3JlPWIsdGhpcy5fdmlkZW9zPXt9LHRoaXMuX3BsYXlpbmc9bnVsbCx0aGlzLl9oYW5kbGVycz17XCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLnJlZ2lzdGVyKHt0eXBlOlwic3RhdGVcIixuYW1lOlwicGxheWluZ1wiLHRhZ3M6W1wiaW50ZXJhY3RpbmdcIl19KX0sdGhpcyksXCJyZXNpemUub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy52aWRlbyYmdGhpcy5pc0luRnVsbFNjcmVlbigpJiZhLnByZXZlbnREZWZhdWx0KCl9LHRoaXMpLFwicmVmcmVzaGVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuaXMoXCJyZXNpemluZ1wiKSYmdGhpcy5fY29yZS4kc3RhZ2UuZmluZChcIi5jbG9uZWQgLm93bC12aWRlby1mcmFtZVwiKS5yZW1vdmUoKX0sdGhpcyksXCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJlwicG9zaXRpb25cIj09PWEucHJvcGVydHkubmFtZSYmdGhpcy5fcGxheWluZyYmdGhpcy5zdG9wKCl9LHRoaXMpLFwicHJlcGFyZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihiKXtpZihiLm5hbWVzcGFjZSl7dmFyIGM9YShiLmNvbnRlbnQpLmZpbmQoXCIub3dsLXZpZGVvXCIpO2MubGVuZ3RoJiYoYy5jc3MoXCJkaXNwbGF5XCIsXCJub25lXCIpLHRoaXMuZmV0Y2goYyxhKGIuY29udGVudCkpKX19LHRoaXMpfSx0aGlzLl9jb3JlLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyx0aGlzLl9jb3JlLm9wdGlvbnMpLHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpLHRoaXMuX2NvcmUuJGVsZW1lbnQub24oXCJjbGljay5vd2wudmlkZW9cIixcIi5vd2wtdmlkZW8tcGxheS1pY29uXCIsYS5wcm94eShmdW5jdGlvbihhKXt0aGlzLnBsYXkoYSl9LHRoaXMpKX07ZS5EZWZhdWx0cz17dmlkZW86ITEsdmlkZW9IZWlnaHQ6ITEsdmlkZW9XaWR0aDohMX0sZS5wcm90b3R5cGUuZmV0Y2g9ZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbigpe3JldHVybiBhLmF0dHIoXCJkYXRhLXZpbWVvLWlkXCIpP1widmltZW9cIjphLmF0dHIoXCJkYXRhLXZ6YWFyLWlkXCIpP1widnphYXJcIjpcInlvdXR1YmVcIn0oKSxkPWEuYXR0cihcImRhdGEtdmltZW8taWRcIil8fGEuYXR0cihcImRhdGEteW91dHViZS1pZFwiKXx8YS5hdHRyKFwiZGF0YS12emFhci1pZFwiKSxlPWEuYXR0cihcImRhdGEtd2lkdGhcIil8fHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW9XaWR0aCxmPWEuYXR0cihcImRhdGEtaGVpZ2h0XCIpfHx0aGlzLl9jb3JlLnNldHRpbmdzLnZpZGVvSGVpZ2h0LGc9YS5hdHRyKFwiaHJlZlwiKTtpZighZyl0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHZpZGVvIFVSTC5cIik7aWYoZD1nLm1hdGNoKC8oaHR0cDp8aHR0cHM6fClcXC9cXC8ocGxheWVyLnx3d3cufGFwcC4pPyh2aW1lb1xcLmNvbXx5b3V0dShiZVxcLmNvbXxcXC5iZXxiZVxcLmdvb2dsZWFwaXNcXC5jb20pfHZ6YWFyXFwuY29tKVxcLyh2aWRlb1xcL3x2aWRlb3NcXC98ZW1iZWRcXC98Y2hhbm5lbHNcXC8uK1xcL3xncm91cHNcXC8uK1xcL3x3YXRjaFxcP3Y9fHZcXC8pPyhbQS1aYS16MC05Ll8lLV0qKShcXCZcXFMrKT8vKSxkWzNdLmluZGV4T2YoXCJ5b3V0dVwiKT4tMSljPVwieW91dHViZVwiO2Vsc2UgaWYoZFszXS5pbmRleE9mKFwidmltZW9cIik+LTEpYz1cInZpbWVvXCI7ZWxzZXtpZighKGRbM10uaW5kZXhPZihcInZ6YWFyXCIpPi0xKSl0aHJvdyBuZXcgRXJyb3IoXCJWaWRlbyBVUkwgbm90IHN1cHBvcnRlZC5cIik7Yz1cInZ6YWFyXCJ9ZD1kWzZdLHRoaXMuX3ZpZGVvc1tnXT17dHlwZTpjLGlkOmQsd2lkdGg6ZSxoZWlnaHQ6Zn0sYi5hdHRyKFwiZGF0YS12aWRlb1wiLGcpLHRoaXMudGh1bWJuYWlsKGEsdGhpcy5fdmlkZW9zW2ddKX0sZS5wcm90b3R5cGUudGh1bWJuYWlsPWZ1bmN0aW9uKGIsYyl7dmFyIGQsZSxmLGc9Yy53aWR0aCYmYy5oZWlnaHQ/J3N0eWxlPVwid2lkdGg6JytjLndpZHRoK1wicHg7aGVpZ2h0OlwiK2MuaGVpZ2h0KydweDtcIic6XCJcIixoPWIuZmluZChcImltZ1wiKSxpPVwic3JjXCIsaj1cIlwiLGs9dGhpcy5fY29yZS5zZXR0aW5ncyxsPWZ1bmN0aW9uKGEpe2U9JzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tcGxheS1pY29uXCI+PC9kaXY+JyxkPWsubGF6eUxvYWQ/JzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tdG4gJytqKydcIiAnK2krJz1cIicrYSsnXCI+PC9kaXY+JzonPGRpdiBjbGFzcz1cIm93bC12aWRlby10blwiIHN0eWxlPVwib3BhY2l0eToxO2JhY2tncm91bmQtaW1hZ2U6dXJsKCcrYSsnKVwiPjwvZGl2PicsYi5hZnRlcihkKSxiLmFmdGVyKGUpfTtyZXR1cm4gYi53cmFwKCc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXdyYXBwZXJcIicrZytcIj48L2Rpdj5cIiksdGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCYmKGk9XCJkYXRhLXNyY1wiLGo9XCJvd2wtbGF6eVwiKSxoLmxlbmd0aD8obChoLmF0dHIoaSkpLGgucmVtb3ZlKCksITEpOnZvaWQoXCJ5b3V0dWJlXCI9PT1jLnR5cGU/KGY9XCIvL2ltZy55b3V0dWJlLmNvbS92aS9cIitjLmlkK1wiL2hxZGVmYXVsdC5qcGdcIixsKGYpKTpcInZpbWVvXCI9PT1jLnR5cGU/YS5hamF4KHt0eXBlOlwiR0VUXCIsdXJsOlwiLy92aW1lby5jb20vYXBpL3YyL3ZpZGVvL1wiK2MuaWQrXCIuanNvblwiLGpzb25wOlwiY2FsbGJhY2tcIixkYXRhVHlwZTpcImpzb25wXCIsc3VjY2VzczpmdW5jdGlvbihhKXtmPWFbMF0udGh1bWJuYWlsX2xhcmdlLGwoZil9fSk6XCJ2emFhclwiPT09Yy50eXBlJiZhLmFqYXgoe3R5cGU6XCJHRVRcIix1cmw6XCIvL3Z6YWFyLmNvbS9hcGkvdmlkZW9zL1wiK2MuaWQrXCIuanNvblwiLGpzb25wOlwiY2FsbGJhY2tcIixkYXRhVHlwZTpcImpzb25wXCIsc3VjY2VzczpmdW5jdGlvbihhKXtmPWEuZnJhbWVncmFiX3VybCxsKGYpfX0pKX0sZS5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3RoaXMuX2NvcmUudHJpZ2dlcihcInN0b3BcIixudWxsLFwidmlkZW9cIiksdGhpcy5fcGxheWluZy5maW5kKFwiLm93bC12aWRlby1mcmFtZVwiKS5yZW1vdmUoKSx0aGlzLl9wbGF5aW5nLnJlbW92ZUNsYXNzKFwib3dsLXZpZGVvLXBsYXlpbmdcIiksdGhpcy5fcGxheWluZz1udWxsLHRoaXMuX2NvcmUubGVhdmUoXCJwbGF5aW5nXCIpLHRoaXMuX2NvcmUudHJpZ2dlcihcInN0b3BwZWRcIixudWxsLFwidmlkZW9cIil9LGUucHJvdG90eXBlLnBsYXk9ZnVuY3Rpb24oYil7dmFyIGMsZD1hKGIudGFyZ2V0KSxlPWQuY2xvc2VzdChcIi5cIit0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1DbGFzcyksZj10aGlzLl92aWRlb3NbZS5hdHRyKFwiZGF0YS12aWRlb1wiKV0sZz1mLndpZHRofHxcIjEwMCVcIixoPWYuaGVpZ2h0fHx0aGlzLl9jb3JlLiRzdGFnZS5oZWlnaHQoKTt0aGlzLl9wbGF5aW5nfHwodGhpcy5fY29yZS5lbnRlcihcInBsYXlpbmdcIiksdGhpcy5fY29yZS50cmlnZ2VyKFwicGxheVwiLG51bGwsXCJ2aWRlb1wiKSxlPXRoaXMuX2NvcmUuaXRlbXModGhpcy5fY29yZS5yZWxhdGl2ZShlLmluZGV4KCkpKSx0aGlzLl9jb3JlLnJlc2V0KGUuaW5kZXgoKSksXCJ5b3V0dWJlXCI9PT1mLnR5cGU/Yz0nPGlmcmFtZSB3aWR0aD1cIicrZysnXCIgaGVpZ2h0PVwiJytoKydcIiBzcmM9XCIvL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8nK2YuaWQrXCI/YXV0b3BsYXk9MSZ2PVwiK2YuaWQrJ1wiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nOlwidmltZW9cIj09PWYudHlwZT9jPSc8aWZyYW1lIHNyYz1cIi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8nK2YuaWQrJz9hdXRvcGxheT0xXCIgd2lkdGg9XCInK2crJ1wiIGhlaWdodD1cIicraCsnXCIgZnJhbWVib3JkZXI9XCIwXCIgd2Via2l0YWxsb3dmdWxsc2NyZWVuIG1vemFsbG93ZnVsbHNjcmVlbiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+JzpcInZ6YWFyXCI9PT1mLnR5cGUmJihjPSc8aWZyYW1lIGZyYW1lYm9yZGVyPVwiMFwiaGVpZ2h0PVwiJytoKydcIndpZHRoPVwiJytnKydcIiBhbGxvd2Z1bGxzY3JlZW4gbW96YWxsb3dmdWxsc2NyZWVuIHdlYmtpdEFsbG93RnVsbFNjcmVlbiBzcmM9XCIvL3ZpZXcudnphYXIuY29tLycrZi5pZCsnL3BsYXllcj9hdXRvcGxheT10cnVlXCI+PC9pZnJhbWU+JyksYSgnPGRpdiBjbGFzcz1cIm93bC12aWRlby1mcmFtZVwiPicrYytcIjwvZGl2PlwiKS5pbnNlcnRBZnRlcihlLmZpbmQoXCIub3dsLXZpZGVvXCIpKSx0aGlzLl9wbGF5aW5nPWUuYWRkQ2xhc3MoXCJvd2wtdmlkZW8tcGxheWluZ1wiKSl9LGUucHJvdG90eXBlLmlzSW5GdWxsU2NyZWVuPWZ1bmN0aW9uKCl7dmFyIGI9Yy5mdWxsc2NyZWVuRWxlbWVudHx8Yy5tb3pGdWxsU2NyZWVuRWxlbWVudHx8Yy53ZWJraXRGdWxsc2NyZWVuRWxlbWVudDtyZXR1cm4gYiYmYShiKS5wYXJlbnQoKS5oYXNDbGFzcyhcIm93bC12aWRlby1mcmFtZVwiKX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBhLGI7dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoXCJjbGljay5vd2wudmlkZW9cIik7Zm9yKGEgaW4gdGhpcy5faGFuZGxlcnMpdGhpcy5fY29yZS4kZWxlbWVudC5vZmYoYSx0aGlzLl9oYW5kbGVyc1thXSk7Zm9yKGIgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1tiXSYmKHRoaXNbYl09bnVsbCl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5WaWRlbz1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLmNvcmU9Yix0aGlzLmNvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuY29yZS5vcHRpb25zKSx0aGlzLnN3YXBwaW5nPSEwLHRoaXMucHJldmlvdXM9ZCx0aGlzLm5leHQ9ZCx0aGlzLmhhbmRsZXJzPXtcImNoYW5nZS5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZcInBvc2l0aW9uXCI9PWEucHJvcGVydHkubmFtZSYmKHRoaXMucHJldmlvdXM9dGhpcy5jb3JlLmN1cnJlbnQoKSx0aGlzLm5leHQ9YS5wcm9wZXJ0eS52YWx1ZSl9LHRoaXMpLFwiZHJhZy5vd2wuY2Fyb3VzZWwgZHJhZ2dlZC5vd2wuY2Fyb3VzZWwgdHJhbnNsYXRlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiYodGhpcy5zd2FwcGluZz1cInRyYW5zbGF0ZWRcIj09YS50eXBlKX0sdGhpcyksXCJ0cmFuc2xhdGUub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5zd2FwcGluZyYmKHRoaXMuY29yZS5vcHRpb25zLmFuaW1hdGVPdXR8fHRoaXMuY29yZS5vcHRpb25zLmFuaW1hdGVJbikmJnRoaXMuc3dhcCgpfSx0aGlzKX0sdGhpcy5jb3JlLiRlbGVtZW50Lm9uKHRoaXMuaGFuZGxlcnMpfTtlLkRlZmF1bHRzPXthbmltYXRlT3V0OiExLGFuaW1hdGVJbjohMX0sZS5wcm90b3R5cGUuc3dhcD1mdW5jdGlvbigpe2lmKDE9PT10aGlzLmNvcmUuc2V0dGluZ3MuaXRlbXMmJmEuc3VwcG9ydC5hbmltYXRpb24mJmEuc3VwcG9ydC50cmFuc2l0aW9uKXt0aGlzLmNvcmUuc3BlZWQoMCk7dmFyIGIsYz1hLnByb3h5KHRoaXMuY2xlYXIsdGhpcyksZD10aGlzLmNvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5wcmV2aW91cyksZT10aGlzLmNvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5uZXh0KSxmPXRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlSW4sZz10aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZU91dDt0aGlzLmNvcmUuY3VycmVudCgpIT09dGhpcy5wcmV2aW91cyYmKGcmJihiPXRoaXMuY29yZS5jb29yZGluYXRlcyh0aGlzLnByZXZpb3VzKS10aGlzLmNvcmUuY29vcmRpbmF0ZXModGhpcy5uZXh0KSxkLm9uZShhLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCxjKS5jc3Moe2xlZnQ6YitcInB4XCJ9KS5hZGRDbGFzcyhcImFuaW1hdGVkIG93bC1hbmltYXRlZC1vdXRcIikuYWRkQ2xhc3MoZykpLGYmJmUub25lKGEuc3VwcG9ydC5hbmltYXRpb24uZW5kLGMpLmFkZENsYXNzKFwiYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLWluXCIpLmFkZENsYXNzKGYpKX19LGUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKGIpe2EoYi50YXJnZXQpLmNzcyh7bGVmdDpcIlwifSkucmVtb3ZlQ2xhc3MoXCJhbmltYXRlZCBvd2wtYW5pbWF0ZWQtb3V0IG93bC1hbmltYXRlZC1pblwiKS5yZW1vdmVDbGFzcyh0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZUluKS5yZW1vdmVDbGFzcyh0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZU91dCksdGhpcy5jb3JlLm9uVHJhbnNpdGlvbkVuZCgpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYjtmb3IoYSBpbiB0aGlzLmhhbmRsZXJzKXRoaXMuY29yZS4kZWxlbWVudC5vZmYoYSx0aGlzLmhhbmRsZXJzW2FdKTtmb3IoYiBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSlcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2JdJiYodGhpc1tiXT1udWxsKTtcclxufSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQW5pbWF0ZT1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLl9jb3JlPWIsdGhpcy5fdGltZW91dD1udWxsLHRoaXMuX3BhdXNlZD0hMSx0aGlzLl9oYW5kbGVycz17XCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJlwic2V0dGluZ3NcIj09PWEucHJvcGVydHkubmFtZT90aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5P3RoaXMucGxheSgpOnRoaXMuc3RvcCgpOmEubmFtZXNwYWNlJiZcInBvc2l0aW9uXCI9PT1hLnByb3BlcnR5Lm5hbWUmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXkmJnRoaXMuX3NldEF1dG9QbGF5SW50ZXJ2YWwoKX0sdGhpcyksXCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5JiZ0aGlzLnBsYXkoKX0sdGhpcyksXCJwbGF5Lm93bC5hdXRvcGxheVwiOmEucHJveHkoZnVuY3Rpb24oYSxiLGMpe2EubmFtZXNwYWNlJiZ0aGlzLnBsYXkoYixjKX0sdGhpcyksXCJzdG9wLm93bC5hdXRvcGxheVwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuc3RvcCgpfSx0aGlzKSxcIm1vdXNlb3Zlci5vd2wuYXV0b3BsYXlcIjphLnByb3h5KGZ1bmN0aW9uKCl7dGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UmJnRoaXMuX2NvcmUuaXMoXCJyb3RhdGluZ1wiKSYmdGhpcy5wYXVzZSgpfSx0aGlzKSxcIm1vdXNlbGVhdmUub3dsLmF1dG9wbGF5XCI6YS5wcm94eShmdW5jdGlvbigpe3RoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlJiZ0aGlzLl9jb3JlLmlzKFwicm90YXRpbmdcIikmJnRoaXMucGxheSgpfSx0aGlzKSxcInRvdWNoc3RhcnQub3dsLmNvcmVcIjphLnByb3h5KGZ1bmN0aW9uKCl7dGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UmJnRoaXMuX2NvcmUuaXMoXCJyb3RhdGluZ1wiKSYmdGhpcy5wYXVzZSgpfSx0aGlzKSxcInRvdWNoZW5kLm93bC5jb3JlXCI6YS5wcm94eShmdW5jdGlvbigpe3RoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlJiZ0aGlzLnBsYXkoKX0sdGhpcyl9LHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpLHRoaXMuX2NvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuX2NvcmUub3B0aW9ucyl9O2UuRGVmYXVsdHM9e2F1dG9wbGF5OiExLGF1dG9wbGF5VGltZW91dDo1ZTMsYXV0b3BsYXlIb3ZlclBhdXNlOiExLGF1dG9wbGF5U3BlZWQ6ITF9LGUucHJvdG90eXBlLnBsYXk9ZnVuY3Rpb24oYSxiKXt0aGlzLl9wYXVzZWQ9ITEsdGhpcy5fY29yZS5pcyhcInJvdGF0aW5nXCIpfHwodGhpcy5fY29yZS5lbnRlcihcInJvdGF0aW5nXCIpLHRoaXMuX3NldEF1dG9QbGF5SW50ZXJ2YWwoKSl9LGUucHJvdG90eXBlLl9nZXROZXh0VGltZW91dD1mdW5jdGlvbihkLGUpe3JldHVybiB0aGlzLl90aW1lb3V0JiZiLmNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KSxiLnNldFRpbWVvdXQoYS5wcm94eShmdW5jdGlvbigpe3RoaXMuX3BhdXNlZHx8dGhpcy5fY29yZS5pcyhcImJ1c3lcIil8fHRoaXMuX2NvcmUuaXMoXCJpbnRlcmFjdGluZ1wiKXx8Yy5oaWRkZW58fHRoaXMuX2NvcmUubmV4dChlfHx0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5U3BlZWQpfSx0aGlzKSxkfHx0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5VGltZW91dCl9LGUucHJvdG90eXBlLl9zZXRBdXRvUGxheUludGVydmFsPWZ1bmN0aW9uKCl7dGhpcy5fdGltZW91dD10aGlzLl9nZXROZXh0VGltZW91dCgpfSxlLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5fY29yZS5pcyhcInJvdGF0aW5nXCIpJiYoYi5jbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCksdGhpcy5fY29yZS5sZWF2ZShcInJvdGF0aW5nXCIpKX0sZS5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oKXt0aGlzLl9jb3JlLmlzKFwicm90YXRpbmdcIikmJih0aGlzLl9wYXVzZWQ9ITApfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYjt0aGlzLnN0b3AoKTtmb3IoYSBpbiB0aGlzLl9oYW5kbGVycyl0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihhLHRoaXMuX2hhbmRsZXJzW2FdKTtmb3IoYiBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSlcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2JdJiYodGhpc1tiXT1udWxsKX0sYS5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLmF1dG9wbGF5PWV9KHdpbmRvdy5aZXB0b3x8d2luZG93LmpRdWVyeSx3aW5kb3csZG9jdW1lbnQpLGZ1bmN0aW9uKGEsYixjLGQpe1widXNlIHN0cmljdFwiO3ZhciBlPWZ1bmN0aW9uKGIpe3RoaXMuX2NvcmU9Yix0aGlzLl9pbml0aWFsaXplZD0hMSx0aGlzLl9wYWdlcz1bXSx0aGlzLl9jb250cm9scz17fSx0aGlzLl90ZW1wbGF0ZXM9W10sdGhpcy4kZWxlbWVudD10aGlzLl9jb3JlLiRlbGVtZW50LHRoaXMuX292ZXJyaWRlcz17bmV4dDp0aGlzLl9jb3JlLm5leHQscHJldjp0aGlzLl9jb3JlLnByZXYsdG86dGhpcy5fY29yZS50b30sdGhpcy5faGFuZGxlcnM9e1wicHJlcGFyZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihiKXtiLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSYmdGhpcy5fdGVtcGxhdGVzLnB1c2goJzxkaXYgY2xhc3M9XCInK3RoaXMuX2NvcmUuc2V0dGluZ3MuZG90Q2xhc3MrJ1wiPicrYShiLmNvbnRlbnQpLmZpbmQoXCJbZGF0YS1kb3RdXCIpLmFkZEJhY2soXCJbZGF0YS1kb3RdXCIpLmF0dHIoXCJkYXRhLWRvdFwiKStcIjwvZGl2PlwiKX0sdGhpcyksXCJhZGRlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhJiZ0aGlzLl90ZW1wbGF0ZXMuc3BsaWNlKGEucG9zaXRpb24sMCx0aGlzLl90ZW1wbGF0ZXMucG9wKCkpfSx0aGlzKSxcInJlbW92ZS5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhJiZ0aGlzLl90ZW1wbGF0ZXMuc3BsaWNlKGEucG9zaXRpb24sMSl9LHRoaXMpLFwiY2hhbmdlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZcInBvc2l0aW9uXCI9PWEucHJvcGVydHkubmFtZSYmdGhpcy5kcmF3KCl9LHRoaXMpLFwiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmIXRoaXMuX2luaXRpYWxpemVkJiYodGhpcy5fY29yZS50cmlnZ2VyKFwiaW5pdGlhbGl6ZVwiLG51bGwsXCJuYXZpZ2F0aW9uXCIpLHRoaXMuaW5pdGlhbGl6ZSgpLHRoaXMudXBkYXRlKCksdGhpcy5kcmF3KCksdGhpcy5faW5pdGlhbGl6ZWQ9ITAsdGhpcy5fY29yZS50cmlnZ2VyKFwiaW5pdGlhbGl6ZWRcIixudWxsLFwibmF2aWdhdGlvblwiKSl9LHRoaXMpLFwicmVmcmVzaGVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2luaXRpYWxpemVkJiYodGhpcy5fY29yZS50cmlnZ2VyKFwicmVmcmVzaFwiLG51bGwsXCJuYXZpZ2F0aW9uXCIpLHRoaXMudXBkYXRlKCksdGhpcy5kcmF3KCksdGhpcy5fY29yZS50cmlnZ2VyKFwicmVmcmVzaGVkXCIsbnVsbCxcIm5hdmlnYXRpb25cIikpfSx0aGlzKX0sdGhpcy5fY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5fY29yZS5vcHRpb25zKSx0aGlzLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKX07ZS5EZWZhdWx0cz17bmF2OiExLG5hdlRleHQ6W1wicHJldlwiLFwibmV4dFwiXSxuYXZTcGVlZDohMSxuYXZFbGVtZW50OlwiZGl2XCIsbmF2Q29udGFpbmVyOiExLG5hdkNvbnRhaW5lckNsYXNzOlwib3dsLW5hdlwiLG5hdkNsYXNzOltcIm93bC1wcmV2XCIsXCJvd2wtbmV4dFwiXSxzbGlkZUJ5OjEsZG90Q2xhc3M6XCJvd2wtZG90XCIsZG90c0NsYXNzOlwib3dsLWRvdHNcIixkb3RzOiEwLGRvdHNFYWNoOiExLGRvdHNEYXRhOiExLGRvdHNTcGVlZDohMSxkb3RzQ29udGFpbmVyOiExfSxlLnByb3RvdHlwZS5pbml0aWFsaXplPWZ1bmN0aW9uKCl7dmFyIGIsYz10aGlzLl9jb3JlLnNldHRpbmdzO3RoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZT0oYy5uYXZDb250YWluZXI/YShjLm5hdkNvbnRhaW5lcik6YShcIjxkaXY+XCIpLmFkZENsYXNzKGMubmF2Q29udGFpbmVyQ2xhc3MpLmFwcGVuZFRvKHRoaXMuJGVsZW1lbnQpKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpLHRoaXMuX2NvbnRyb2xzLiRwcmV2aW91cz1hKFwiPFwiK2MubmF2RWxlbWVudCtcIj5cIikuYWRkQ2xhc3MoYy5uYXZDbGFzc1swXSkuaHRtbChjLm5hdlRleHRbMF0pLnByZXBlbmRUbyh0aGlzLl9jb250cm9scy4kcmVsYXRpdmUpLm9uKFwiY2xpY2tcIixhLnByb3h5KGZ1bmN0aW9uKGEpe3RoaXMucHJldihjLm5hdlNwZWVkKX0sdGhpcykpLHRoaXMuX2NvbnRyb2xzLiRuZXh0PWEoXCI8XCIrYy5uYXZFbGVtZW50K1wiPlwiKS5hZGRDbGFzcyhjLm5hdkNsYXNzWzFdKS5odG1sKGMubmF2VGV4dFsxXSkuYXBwZW5kVG8odGhpcy5fY29udHJvbHMuJHJlbGF0aXZlKS5vbihcImNsaWNrXCIsYS5wcm94eShmdW5jdGlvbihhKXt0aGlzLm5leHQoYy5uYXZTcGVlZCl9LHRoaXMpKSxjLmRvdHNEYXRhfHwodGhpcy5fdGVtcGxhdGVzPVthKFwiPGRpdj5cIikuYWRkQ2xhc3MoYy5kb3RDbGFzcykuYXBwZW5kKGEoXCI8c3Bhbj5cIikpLnByb3AoXCJvdXRlckhUTUxcIildKSx0aGlzLl9jb250cm9scy4kYWJzb2x1dGU9KGMuZG90c0NvbnRhaW5lcj9hKGMuZG90c0NvbnRhaW5lcik6YShcIjxkaXY+XCIpLmFkZENsYXNzKGMuZG90c0NsYXNzKS5hcHBlbmRUbyh0aGlzLiRlbGVtZW50KSkuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSx0aGlzLl9jb250cm9scy4kYWJzb2x1dGUub24oXCJjbGlja1wiLFwiZGl2XCIsYS5wcm94eShmdW5jdGlvbihiKXt2YXIgZD1hKGIudGFyZ2V0KS5wYXJlbnQoKS5pcyh0aGlzLl9jb250cm9scy4kYWJzb2x1dGUpP2EoYi50YXJnZXQpLmluZGV4KCk6YShiLnRhcmdldCkucGFyZW50KCkuaW5kZXgoKTtiLnByZXZlbnREZWZhdWx0KCksdGhpcy50byhkLGMuZG90c1NwZWVkKX0sdGhpcykpO2ZvcihiIGluIHRoaXMuX292ZXJyaWRlcyl0aGlzLl9jb3JlW2JdPWEucHJveHkodGhpc1tiXSx0aGlzKX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBhLGIsYyxkO2ZvcihhIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuJGVsZW1lbnQub2ZmKGEsdGhpcy5faGFuZGxlcnNbYV0pO2ZvcihiIGluIHRoaXMuX2NvbnRyb2xzKXRoaXMuX2NvbnRyb2xzW2JdLnJlbW92ZSgpO2ZvcihkIGluIHRoaXMub3ZlcmlkZXMpdGhpcy5fY29yZVtkXT10aGlzLl9vdmVycmlkZXNbZF07Zm9yKGMgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1tjXSYmKHRoaXNbY109bnVsbCl9LGUucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhLGIsYyxkPXRoaXMuX2NvcmUuY2xvbmVzKCkubGVuZ3RoLzIsZT1kK3RoaXMuX2NvcmUuaXRlbXMoKS5sZW5ndGgsZj10aGlzLl9jb3JlLm1heGltdW0oITApLGc9dGhpcy5fY29yZS5zZXR0aW5ncyxoPWcuY2VudGVyfHxnLmF1dG9XaWR0aHx8Zy5kb3RzRGF0YT8xOmcuZG90c0VhY2h8fGcuaXRlbXM7aWYoXCJwYWdlXCIhPT1nLnNsaWRlQnkmJihnLnNsaWRlQnk9TWF0aC5taW4oZy5zbGlkZUJ5LGcuaXRlbXMpKSxnLmRvdHN8fFwicGFnZVwiPT1nLnNsaWRlQnkpZm9yKHRoaXMuX3BhZ2VzPVtdLGE9ZCxiPTAsYz0wO2U+YTthKyspe2lmKGI+PWh8fDA9PT1iKXtpZih0aGlzLl9wYWdlcy5wdXNoKHtzdGFydDpNYXRoLm1pbihmLGEtZCksZW5kOmEtZCtoLTF9KSxNYXRoLm1pbihmLGEtZCk9PT1mKWJyZWFrO2I9MCwrK2N9Yis9dGhpcy5fY29yZS5tZXJnZXJzKHRoaXMuX2NvcmUucmVsYXRpdmUoYSkpfX0sZS5wcm90b3R5cGUuZHJhdz1mdW5jdGlvbigpe3ZhciBiLGM9dGhpcy5fY29yZS5zZXR0aW5ncyxkPXRoaXMuX2NvcmUuaXRlbXMoKS5sZW5ndGg8PWMuaXRlbXMsZT10aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKSxmPWMubG9vcHx8Yy5yZXdpbmQ7dGhpcy5fY29udHJvbHMuJHJlbGF0aXZlLnRvZ2dsZUNsYXNzKFwiZGlzYWJsZWRcIiwhYy5uYXZ8fGQpLGMubmF2JiYodGhpcy5fY29udHJvbHMuJHByZXZpb3VzLnRvZ2dsZUNsYXNzKFwiZGlzYWJsZWRcIiwhZiYmZTw9dGhpcy5fY29yZS5taW5pbXVtKCEwKSksdGhpcy5fY29udHJvbHMuJG5leHQudG9nZ2xlQ2xhc3MoXCJkaXNhYmxlZFwiLCFmJiZlPj10aGlzLl9jb3JlLm1heGltdW0oITApKSksdGhpcy5fY29udHJvbHMuJGFic29sdXRlLnRvZ2dsZUNsYXNzKFwiZGlzYWJsZWRcIiwhYy5kb3RzfHxkKSxjLmRvdHMmJihiPXRoaXMuX3BhZ2VzLmxlbmd0aC10aGlzLl9jb250cm9scy4kYWJzb2x1dGUuY2hpbGRyZW4oKS5sZW5ndGgsYy5kb3RzRGF0YSYmMCE9PWI/dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmh0bWwodGhpcy5fdGVtcGxhdGVzLmpvaW4oXCJcIikpOmI+MD90aGlzLl9jb250cm9scy4kYWJzb2x1dGUuYXBwZW5kKG5ldyBBcnJheShiKzEpLmpvaW4odGhpcy5fdGVtcGxhdGVzWzBdKSk6MD5iJiZ0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuY2hpbGRyZW4oKS5zbGljZShiKS5yZW1vdmUoKSx0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuZmluZChcIi5hY3RpdmVcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIiksdGhpcy5fY29udHJvbHMuJGFic29sdXRlLmNoaWxkcmVuKCkuZXEoYS5pbkFycmF5KHRoaXMuY3VycmVudCgpLHRoaXMuX3BhZ2VzKSkuYWRkQ2xhc3MoXCJhY3RpdmVcIikpfSxlLnByb3RvdHlwZS5vblRyaWdnZXI9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5fY29yZS5zZXR0aW5ncztiLnBhZ2U9e2luZGV4OmEuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSx0aGlzLl9wYWdlcyksY291bnQ6dGhpcy5fcGFnZXMubGVuZ3RoLHNpemU6YyYmKGMuY2VudGVyfHxjLmF1dG9XaWR0aHx8Yy5kb3RzRGF0YT8xOmMuZG90c0VhY2h8fGMuaXRlbXMpfX0sZS5wcm90b3R5cGUuY3VycmVudD1mdW5jdGlvbigpe3ZhciBiPXRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpO3JldHVybiBhLmdyZXAodGhpcy5fcGFnZXMsYS5wcm94eShmdW5jdGlvbihhLGMpe3JldHVybiBhLnN0YXJ0PD1iJiZhLmVuZD49Yn0sdGhpcykpLnBvcCgpfSxlLnByb3RvdHlwZS5nZXRQb3NpdGlvbj1mdW5jdGlvbihiKXt2YXIgYyxkLGU9dGhpcy5fY29yZS5zZXR0aW5ncztyZXR1cm5cInBhZ2VcIj09ZS5zbGlkZUJ5PyhjPWEuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSx0aGlzLl9wYWdlcyksZD10aGlzLl9wYWdlcy5sZW5ndGgsYj8rK2M6LS1jLGM9dGhpcy5fcGFnZXNbKGMlZCtkKSVkXS5zdGFydCk6KGM9dGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSksZD10aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoLGI/Yys9ZS5zbGlkZUJ5OmMtPWUuc2xpZGVCeSksY30sZS5wcm90b3R5cGUubmV4dD1mdW5jdGlvbihiKXthLnByb3h5KHRoaXMuX292ZXJyaWRlcy50byx0aGlzLl9jb3JlKSh0aGlzLmdldFBvc2l0aW9uKCEwKSxiKX0sZS5wcm90b3R5cGUucHJldj1mdW5jdGlvbihiKXthLnByb3h5KHRoaXMuX292ZXJyaWRlcy50byx0aGlzLl9jb3JlKSh0aGlzLmdldFBvc2l0aW9uKCExKSxiKX0sZS5wcm90b3R5cGUudG89ZnVuY3Rpb24oYixjLGQpe3ZhciBlOyFkJiZ0aGlzLl9wYWdlcy5sZW5ndGg/KGU9dGhpcy5fcGFnZXMubGVuZ3RoLGEucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLHRoaXMuX2NvcmUpKHRoaXMuX3BhZ2VzWyhiJWUrZSklZV0uc3RhcnQsYykpOmEucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLHRoaXMuX2NvcmUpKGIsYyl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5OYXZpZ2F0aW9uPWV9KHdpbmRvdy5aZXB0b3x8d2luZG93LmpRdWVyeSx3aW5kb3csZG9jdW1lbnQpLGZ1bmN0aW9uKGEsYixjLGQpe1widXNlIHN0cmljdFwiO3ZhciBlPWZ1bmN0aW9uKGMpe3RoaXMuX2NvcmU9Yyx0aGlzLl9oYXNoZXM9e30sdGhpcy4kZWxlbWVudD10aGlzLl9jb3JlLiRlbGVtZW50LHRoaXMuX2hhbmRsZXJzPXtcImluaXRpYWxpemVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYyl7Yy5uYW1lc3BhY2UmJlwiVVJMSGFzaFwiPT09dGhpcy5fY29yZS5zZXR0aW5ncy5zdGFydFBvc2l0aW9uJiZhKGIpLnRyaWdnZXIoXCJoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uXCIpfSx0aGlzKSxcInByZXBhcmVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYil7aWYoYi5uYW1lc3BhY2Upe3ZhciBjPWEoYi5jb250ZW50KS5maW5kKFwiW2RhdGEtaGFzaF1cIikuYWRkQmFjayhcIltkYXRhLWhhc2hdXCIpLmF0dHIoXCJkYXRhLWhhc2hcIik7aWYoIWMpcmV0dXJuO3RoaXMuX2hhc2hlc1tjXT1iLmNvbnRlbnR9fSx0aGlzKSxcImNoYW5nZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihjKXtpZihjLm5hbWVzcGFjZSYmXCJwb3NpdGlvblwiPT09Yy5wcm9wZXJ0eS5uYW1lKXt2YXIgZD10aGlzLl9jb3JlLml0ZW1zKHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpKSxlPWEubWFwKHRoaXMuX2hhc2hlcyxmdW5jdGlvbihhLGIpe3JldHVybiBhPT09ZD9iOm51bGx9KS5qb2luKCk7aWYoIWV8fGIubG9jYXRpb24uaGFzaC5zbGljZSgxKT09PWUpcmV0dXJuO2IubG9jYXRpb24uaGFzaD1lfX0sdGhpcyl9LHRoaXMuX2NvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuX2NvcmUub3B0aW9ucyksdGhpcy4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyksYShiKS5vbihcImhhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb25cIixhLnByb3h5KGZ1bmN0aW9uKGEpe3ZhciBjPWIubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSksZT10aGlzLl9jb3JlLiRzdGFnZS5jaGlsZHJlbigpLGY9dGhpcy5faGFzaGVzW2NdJiZlLmluZGV4KHRoaXMuX2hhc2hlc1tjXSk7ZiE9PWQmJmYhPT10aGlzLl9jb3JlLmN1cnJlbnQoKSYmdGhpcy5fY29yZS50byh0aGlzLl9jb3JlLnJlbGF0aXZlKGYpLCExLCEwKX0sdGhpcykpfTtlLkRlZmF1bHRzPXtVUkxoYXNoTGlzdGVuZXI6ITF9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYyxkO2EoYikub2ZmKFwiaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvblwiKTtmb3IoYyBpbiB0aGlzLl9oYW5kbGVycyl0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihjLHRoaXMuX2hhbmRsZXJzW2NdKTtmb3IoZCBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSlcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2RdJiYodGhpc1tkXT1udWxsKX0sYS5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkhhc2g9ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7ZnVuY3Rpb24gZShiLGMpe3ZhciBlPSExLGY9Yi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStiLnNsaWNlKDEpO3JldHVybiBhLmVhY2goKGIrXCIgXCIraC5qb2luKGYrXCIgXCIpK2YpLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhLGIpe3JldHVybiBnW2JdIT09ZD8oZT1jP2I6ITAsITEpOnZvaWQgMH0pLGV9ZnVuY3Rpb24gZihhKXtyZXR1cm4gZShhLCEwKX12YXIgZz1hKFwiPHN1cHBvcnQ+XCIpLmdldCgwKS5zdHlsZSxoPVwiV2Via2l0IE1veiBPIG1zXCIuc3BsaXQoXCIgXCIpLGk9e3RyYW5zaXRpb246e2VuZDp7V2Via2l0VHJhbnNpdGlvbjpcIndlYmtpdFRyYW5zaXRpb25FbmRcIixNb3pUcmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwiLE9UcmFuc2l0aW9uOlwib1RyYW5zaXRpb25FbmRcIix0cmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwifX0sYW5pbWF0aW9uOntlbmQ6e1dlYmtpdEFuaW1hdGlvbjpcIndlYmtpdEFuaW1hdGlvbkVuZFwiLE1vekFuaW1hdGlvbjpcImFuaW1hdGlvbmVuZFwiLE9BbmltYXRpb246XCJvQW5pbWF0aW9uRW5kXCIsYW5pbWF0aW9uOlwiYW5pbWF0aW9uZW5kXCJ9fX0saj17Y3NzdHJhbnNmb3JtczpmdW5jdGlvbigpe3JldHVybiEhZShcInRyYW5zZm9ybVwiKX0sY3NzdHJhbnNmb3JtczNkOmZ1bmN0aW9uKCl7cmV0dXJuISFlKFwicGVyc3BlY3RpdmVcIil9LGNzc3RyYW5zaXRpb25zOmZ1bmN0aW9uKCl7cmV0dXJuISFlKFwidHJhbnNpdGlvblwiKX0sY3NzYW5pbWF0aW9uczpmdW5jdGlvbigpe3JldHVybiEhZShcImFuaW1hdGlvblwiKX19O2ouY3NzdHJhbnNpdGlvbnMoKSYmKGEuc3VwcG9ydC50cmFuc2l0aW9uPW5ldyBTdHJpbmcoZihcInRyYW5zaXRpb25cIikpLGEuc3VwcG9ydC50cmFuc2l0aW9uLmVuZD1pLnRyYW5zaXRpb24uZW5kW2Euc3VwcG9ydC50cmFuc2l0aW9uXSksai5jc3NhbmltYXRpb25zKCkmJihhLnN1cHBvcnQuYW5pbWF0aW9uPW5ldyBTdHJpbmcoZihcImFuaW1hdGlvblwiKSksYS5zdXBwb3J0LmFuaW1hdGlvbi5lbmQ9aS5hbmltYXRpb24uZW5kW2Euc3VwcG9ydC5hbmltYXRpb25dKSxqLmNzc3RyYW5zZm9ybXMoKSYmKGEuc3VwcG9ydC50cmFuc2Zvcm09bmV3IFN0cmluZyhmKFwidHJhbnNmb3JtXCIpKSxhLnN1cHBvcnQudHJhbnNmb3JtM2Q9ai5jc3N0cmFuc2Zvcm1zM2QoKSl9KHdpbmRvdy5aZXB0b3x8d2luZG93LmpRdWVyeSx3aW5kb3csZG9jdW1lbnQpOyIsIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcclxuLypcclxuICogcXVhbnRpemUuanMgQ29weXJpZ2h0IDIwMDggTmljayBSYWJpbm93aXR6XHJcbiAqIFBvcnRlZCB0byBub2RlLmpzIGJ5IE9saXZpZXIgTGVzbmlja2lcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG4gKi9cclxuXHJcbi8vIGZpbGwgb3V0IGEgY291cGxlIHByb3RvdmlzIGRlcGVuZGVuY2llc1xyXG4vKlxyXG4gKiBCbG9jayBiZWxvdyBjb3BpZWQgZnJvbSBQcm90b3ZpczogaHR0cDovL21ib3N0b2NrLmdpdGh1Yi5jb20vcHJvdG92aXMvXHJcbiAqIENvcHlyaWdodCAyMDEwIFN0YW5mb3JkIFZpc3VhbGl6YXRpb24gR3JvdXBcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlOiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL2JzZC1saWNlbnNlLnBocFxyXG4gKi9cclxuaWYgKCFwdikge1xyXG4gICAgdmFyIHB2ID0ge1xyXG4gICAgICAgIG1hcDogZnVuY3Rpb24oYXJyYXksIGYpIHtcclxuICAgICAgICAgICAgdmFyIG8gPSB7fTtcclxuICAgICAgICAgICAgcmV0dXJuIGYgPyBhcnJheS5tYXAoZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICAgICAgby5pbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZi5jYWxsKG8sIGQpO1xyXG4gICAgICAgICAgICB9KSA6IGFycmF5LnNsaWNlKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBuYXR1cmFsT3JkZXI6IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChhIDwgYikgPyAtMSA6ICgoYSA+IGIpID8gMSA6IDApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3VtOiBmdW5jdGlvbihhcnJheSwgZikge1xyXG4gICAgICAgICAgICB2YXIgbyA9IHt9O1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyYXkucmVkdWNlKGYgPyBmdW5jdGlvbihwLCBkLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBvLmluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwICsgZi5jYWxsKG8sIGQpO1xyXG4gICAgICAgICAgICB9IDogZnVuY3Rpb24ocCwgZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHAgKyBkO1xyXG4gICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1heDogZnVuY3Rpb24oYXJyYXksIGYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGYgPyBwdi5tYXAoYXJyYXksIGYpIDogYXJyYXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEJhc2ljIEphdmFzY3JpcHQgcG9ydCBvZiB0aGUgTU1DUSAobW9kaWZpZWQgbWVkaWFuIGN1dCBxdWFudGl6YXRpb24pXHJcbiAqIGFsZ29yaXRobSBmcm9tIHRoZSBMZXB0b25pY2EgbGlicmFyeSAoaHR0cDovL3d3dy5sZXB0b25pY2EuY29tLykuXHJcbiAqIFJldHVybnMgYSBjb2xvciBtYXAgeW91IGNhbiB1c2UgdG8gbWFwIG9yaWdpbmFsIHBpeGVscyB0byB0aGUgcmVkdWNlZFxyXG4gKiBwYWxldHRlLiBTdGlsbCBhIHdvcmsgaW4gcHJvZ3Jlc3MuXHJcbiAqIFxyXG4gKiBAYXV0aG9yIE5pY2sgUmFiaW5vd2l0elxyXG4gKiBAZXhhbXBsZVxyXG4gXHJcbi8vIGFycmF5IG9mIHBpeGVscyBhcyBbUixHLEJdIGFycmF5c1xyXG52YXIgbXlQaXhlbHMgPSBbWzE5MCwxOTcsMTkwXSwgWzIwMiwyMDQsMjAwXSwgWzIwNywyMTQsMjEwXSwgWzIxMSwyMTQsMjExXSwgWzIwNSwyMDcsMjA3XVxyXG4gICAgICAgICAgICAgICAgLy8gZXRjXHJcbiAgICAgICAgICAgICAgICBdO1xyXG52YXIgbWF4Q29sb3JzID0gNDtcclxuIFxyXG52YXIgY21hcCA9IE1NQ1EucXVhbnRpemUobXlQaXhlbHMsIG1heENvbG9ycyk7XHJcbnZhciBuZXdQYWxldHRlID0gY21hcC5wYWxldHRlKCk7XHJcbnZhciBuZXdQaXhlbHMgPSBteVBpeGVscy5tYXAoZnVuY3Rpb24ocCkgeyBcclxuICAgIHJldHVybiBjbWFwLm1hcChwKTsgXHJcbn0pO1xyXG4gXHJcbiAqL1xyXG52YXIgTU1DUSA9IChmdW5jdGlvbigpIHtcclxuICAgIC8vIHByaXZhdGUgY29uc3RhbnRzXHJcbiAgICB2YXIgc2lnYml0cyA9IDUsXHJcbiAgICAgICAgcnNoaWZ0ID0gOCAtIHNpZ2JpdHMsXHJcbiAgICAgICAgbWF4SXRlcmF0aW9ucyA9IDEwMDAsXHJcbiAgICAgICAgZnJhY3RCeVBvcHVsYXRpb25zID0gMC43NTtcclxuXHJcbiAgICAvLyBnZXQgcmVkdWNlZC1zcGFjZSBjb2xvciBpbmRleCBmb3IgYSBwaXhlbFxyXG5cclxuICAgIGZ1bmN0aW9uIGdldENvbG9ySW5kZXgociwgZywgYikge1xyXG4gICAgICAgIHJldHVybiAociA8PCAoMiAqIHNpZ2JpdHMpKSArIChnIDw8IHNpZ2JpdHMpICsgYjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTaW1wbGUgcHJpb3JpdHkgcXVldWVcclxuXHJcbiAgICBmdW5jdGlvbiBQUXVldWUoY29tcGFyYXRvcikge1xyXG4gICAgICAgIHZhciBjb250ZW50cyA9IFtdLFxyXG4gICAgICAgICAgICBzb3J0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc29ydCgpIHtcclxuICAgICAgICAgICAgY29udGVudHMuc29ydChjb21wYXJhdG9yKTtcclxuICAgICAgICAgICAgc29ydGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHB1c2g6IGZ1bmN0aW9uKG8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRzLnB1c2gobyk7XHJcbiAgICAgICAgICAgICAgICBzb3J0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGVlazogZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghc29ydGVkKSBzb3J0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkgaW5kZXggPSBjb250ZW50cy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRzW2luZGV4XTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICghc29ydGVkKSBzb3J0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudHMucG9wKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNpemU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRzLmxlbmd0aDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWFwOiBmdW5jdGlvbihmKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudHMubWFwKGYpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWJ1ZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNvcnRlZCkgc29ydCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAzZCBjb2xvciBzcGFjZSBib3hcclxuXHJcbiAgICBmdW5jdGlvbiBWQm94KHIxLCByMiwgZzEsIGcyLCBiMSwgYjIsIGhpc3RvKSB7XHJcbiAgICAgICAgdmFyIHZib3ggPSB0aGlzO1xyXG4gICAgICAgIHZib3gucjEgPSByMTtcclxuICAgICAgICB2Ym94LnIyID0gcjI7XHJcbiAgICAgICAgdmJveC5nMSA9IGcxO1xyXG4gICAgICAgIHZib3guZzIgPSBnMjtcclxuICAgICAgICB2Ym94LmIxID0gYjE7XHJcbiAgICAgICAgdmJveC5iMiA9IGIyO1xyXG4gICAgICAgIHZib3guaGlzdG8gPSBoaXN0bztcclxuICAgIH1cclxuICAgIFZCb3gucHJvdG90eXBlID0ge1xyXG4gICAgICAgIHZvbHVtZTogZnVuY3Rpb24oZm9yY2UpIHtcclxuICAgICAgICAgICAgdmFyIHZib3ggPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAoIXZib3guX3ZvbHVtZSB8fCBmb3JjZSkge1xyXG4gICAgICAgICAgICAgICAgdmJveC5fdm9sdW1lID0gKCh2Ym94LnIyIC0gdmJveC5yMSArIDEpICogKHZib3guZzIgLSB2Ym94LmcxICsgMSkgKiAodmJveC5iMiAtIHZib3guYjEgKyAxKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZib3guX3ZvbHVtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvdW50OiBmdW5jdGlvbihmb3JjZSkge1xyXG4gICAgICAgICAgICB2YXIgdmJveCA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBoaXN0byA9IHZib3guaGlzdG87XHJcbiAgICAgICAgICAgIGlmICghdmJveC5fY291bnRfc2V0IHx8IGZvcmNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbnBpeCA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgaSwgaiwgaywgaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSB2Ym94LnIxOyBpIDw9IHZib3gucjI7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IHZib3guZzE7IGogPD0gdmJveC5nMjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoayA9IHZib3guYjE7IGsgPD0gdmJveC5iMjsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGdldENvbG9ySW5kZXgoaSwgaiwgayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBucGl4ICs9IChoaXN0b1tpbmRleF0gfHwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2Ym94Ll9jb3VudCA9IG5waXg7XHJcbiAgICAgICAgICAgICAgICB2Ym94Ll9jb3VudF9zZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2Ym94Ll9jb3VudDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvcHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdmJveCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVkJveCh2Ym94LnIxLCB2Ym94LnIyLCB2Ym94LmcxLCB2Ym94LmcyLCB2Ym94LmIxLCB2Ym94LmIyLCB2Ym94Lmhpc3RvKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGF2ZzogZnVuY3Rpb24oZm9yY2UpIHtcclxuICAgICAgICAgICAgdmFyIHZib3ggPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgaGlzdG8gPSB2Ym94Lmhpc3RvO1xyXG4gICAgICAgICAgICBpZiAoIXZib3guX2F2ZyB8fCBmb3JjZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG50b3QgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIG11bHQgPSAxIDw8ICg4IC0gc2lnYml0cyksXHJcbiAgICAgICAgICAgICAgICAgICAgcnN1bSA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZ3N1bSA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYnN1bSA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgaHZhbCxcclxuICAgICAgICAgICAgICAgICAgICBpLCBqLCBrLCBoaXN0b2luZGV4O1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gdmJveC5yMTsgaSA8PSB2Ym94LnIyOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSB2Ym94LmcxOyBqIDw9IHZib3guZzI7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSB2Ym94LmIxOyBrIDw9IHZib3guYjI7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9pbmRleCA9IGdldENvbG9ySW5kZXgoaSwgaiwgayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodmFsID0gaGlzdG9baGlzdG9pbmRleF0gfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG50b3QgKz0gaHZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJzdW0gKz0gKGh2YWwgKiAoaSArIDAuNSkgKiBtdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdzdW0gKz0gKGh2YWwgKiAoaiArIDAuNSkgKiBtdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJzdW0gKz0gKGh2YWwgKiAoayArIDAuNSkgKiBtdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChudG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmJveC5fYXZnID0gW35+KHJzdW0gLyBudG90KSwgfn4gKGdzdW0gLyBudG90KSwgfn4gKGJzdW0gLyBudG90KV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2VtcHR5IGJveCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZib3guX2F2ZyA9IFt+fihtdWx0ICogKHZib3gucjEgKyB2Ym94LnIyICsgMSkgLyAyKSwgfn4gKG11bHQgKiAodmJveC5nMSArIHZib3guZzIgKyAxKSAvIDIpLCB+fiAobXVsdCAqICh2Ym94LmIxICsgdmJveC5iMiArIDEpIC8gMildO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2Ym94Ll9hdmc7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250YWluczogZnVuY3Rpb24ocGl4ZWwpIHtcclxuICAgICAgICAgICAgdmFyIHZib3ggPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgcnZhbCA9IHBpeGVsWzBdID4+IHJzaGlmdDtcclxuICAgICAgICAgICAgZ3ZhbCA9IHBpeGVsWzFdID4+IHJzaGlmdDtcclxuICAgICAgICAgICAgYnZhbCA9IHBpeGVsWzJdID4+IHJzaGlmdDtcclxuICAgICAgICAgICAgcmV0dXJuIChydmFsID49IHZib3gucjEgJiYgcnZhbCA8PSB2Ym94LnIyICYmXHJcbiAgICAgICAgICAgICAgICBndmFsID49IHZib3guZzEgJiYgZ3ZhbCA8PSB2Ym94LmcyICYmXHJcbiAgICAgICAgICAgICAgICBidmFsID49IHZib3guYjEgJiYgYnZhbCA8PSB2Ym94LmIyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENvbG9yIG1hcFxyXG5cclxuICAgIGZ1bmN0aW9uIENNYXAoKSB7XHJcbiAgICAgICAgdGhpcy52Ym94ZXMgPSBuZXcgUFF1ZXVlKGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHB2Lm5hdHVyYWxPcmRlcihcclxuICAgICAgICAgICAgICAgIGEudmJveC5jb3VudCgpICogYS52Ym94LnZvbHVtZSgpLFxyXG4gICAgICAgICAgICAgICAgYi52Ym94LmNvdW50KCkgKiBiLnZib3gudm9sdW1lKClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH0pOztcclxuICAgIH1cclxuICAgIENNYXAucHJvdG90eXBlID0ge1xyXG4gICAgICAgIHB1c2g6IGZ1bmN0aW9uKHZib3gpIHtcclxuICAgICAgICAgICAgdGhpcy52Ym94ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB2Ym94OiB2Ym94LFxyXG4gICAgICAgICAgICAgICAgY29sb3I6IHZib3guYXZnKClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYWxldHRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmJveGVzLm1hcChmdW5jdGlvbih2Yikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZiLmNvbG9yXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2l6ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZib3hlcy5zaXplKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXA6IGZ1bmN0aW9uKGNvbG9yKSB7XHJcbiAgICAgICAgICAgIHZhciB2Ym94ZXMgPSB0aGlzLnZib3hlcztcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Ym94ZXMuc2l6ZSgpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh2Ym94ZXMucGVlayhpKS52Ym94LmNvbnRhaW5zKGNvbG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2Ym94ZXMucGVlayhpKS5jb2xvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZWFyZXN0KGNvbG9yKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG5lYXJlc3Q6IGZ1bmN0aW9uKGNvbG9yKSB7XHJcbiAgICAgICAgICAgIHZhciB2Ym94ZXMgPSB0aGlzLnZib3hlcyxcclxuICAgICAgICAgICAgICAgIGQxLCBkMiwgcENvbG9yO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZib3hlcy5zaXplKCk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZDIgPSBNYXRoLnNxcnQoXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coY29sb3JbMF0gLSB2Ym94ZXMucGVlayhpKS5jb2xvclswXSwgMikgK1xyXG4gICAgICAgICAgICAgICAgICAgIE1hdGgucG93KGNvbG9yWzFdIC0gdmJveGVzLnBlZWsoaSkuY29sb3JbMV0sIDIpICtcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhjb2xvclsyXSAtIHZib3hlcy5wZWVrKGkpLmNvbG9yWzJdLCAyKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGlmIChkMiA8IGQxIHx8IGQxID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBkMSA9IGQyO1xyXG4gICAgICAgICAgICAgICAgICAgIHBDb2xvciA9IHZib3hlcy5wZWVrKGkpLmNvbG9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwQ29sb3I7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmb3JjZWJ3OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gWFhYOiB3b24ndCAgd29yayB5ZXRcclxuICAgICAgICAgICAgdmFyIHZib3hlcyA9IHRoaXMudmJveGVzO1xyXG4gICAgICAgICAgICB2Ym94ZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHYubmF0dXJhbE9yZGVyKHB2LnN1bShhLmNvbG9yKSwgcHYuc3VtKGIuY29sb3IpKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZvcmNlIGRhcmtlc3QgY29sb3IgdG8gYmxhY2sgaWYgZXZlcnl0aGluZyA8IDVcclxuICAgICAgICAgICAgdmFyIGxvd2VzdCA9IHZib3hlc1swXS5jb2xvcjtcclxuICAgICAgICAgICAgaWYgKGxvd2VzdFswXSA8IDUgJiYgbG93ZXN0WzFdIDwgNSAmJiBsb3dlc3RbMl0gPCA1KVxyXG4gICAgICAgICAgICAgICAgdmJveGVzWzBdLmNvbG9yID0gWzAsIDAsIDBdO1xyXG5cclxuICAgICAgICAgICAgLy8gZm9yY2UgbGlnaHRlc3QgY29sb3IgdG8gd2hpdGUgaWYgZXZlcnl0aGluZyA+IDI1MVxyXG4gICAgICAgICAgICB2YXIgaWR4ID0gdmJveGVzLmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgICAgICBoaWdoZXN0ID0gdmJveGVzW2lkeF0uY29sb3I7XHJcbiAgICAgICAgICAgIGlmIChoaWdoZXN0WzBdID4gMjUxICYmIGhpZ2hlc3RbMV0gPiAyNTEgJiYgaGlnaGVzdFsyXSA+IDI1MSlcclxuICAgICAgICAgICAgICAgIHZib3hlc1tpZHhdLmNvbG9yID0gWzI1NSwgMjU1LCAyNTVdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gaGlzdG8gKDEtZCBhcnJheSwgZ2l2aW5nIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGluXHJcbiAgICAvLyBlYWNoIHF1YW50aXplZCByZWdpb24gb2YgY29sb3Igc3BhY2UpLCBvciBudWxsIG9uIGVycm9yXHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0SGlzdG8ocGl4ZWxzKSB7XHJcbiAgICAgICAgdmFyIGhpc3Rvc2l6ZSA9IDEgPDwgKDMgKiBzaWdiaXRzKSxcclxuICAgICAgICAgICAgaGlzdG8gPSBuZXcgQXJyYXkoaGlzdG9zaXplKSxcclxuICAgICAgICAgICAgaW5kZXgsIHJ2YWwsIGd2YWwsIGJ2YWw7XHJcbiAgICAgICAgcGl4ZWxzLmZvckVhY2goZnVuY3Rpb24ocGl4ZWwpIHtcclxuICAgICAgICAgICAgcnZhbCA9IHBpeGVsWzBdID4+IHJzaGlmdDtcclxuICAgICAgICAgICAgZ3ZhbCA9IHBpeGVsWzFdID4+IHJzaGlmdDtcclxuICAgICAgICAgICAgYnZhbCA9IHBpeGVsWzJdID4+IHJzaGlmdDtcclxuICAgICAgICAgICAgaW5kZXggPSBnZXRDb2xvckluZGV4KHJ2YWwsIGd2YWwsIGJ2YWwpO1xyXG4gICAgICAgICAgICBoaXN0b1tpbmRleF0gPSAoaGlzdG9baW5kZXhdIHx8IDApICsgMTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gaGlzdG87XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdmJveEZyb21QaXhlbHMocGl4ZWxzLCBoaXN0bykge1xyXG4gICAgICAgIHZhciBybWluID0gMTAwMDAwMCxcclxuICAgICAgICAgICAgcm1heCA9IDAsXHJcbiAgICAgICAgICAgIGdtaW4gPSAxMDAwMDAwLFxyXG4gICAgICAgICAgICBnbWF4ID0gMCxcclxuICAgICAgICAgICAgYm1pbiA9IDEwMDAwMDAsXHJcbiAgICAgICAgICAgIGJtYXggPSAwLFxyXG4gICAgICAgICAgICBydmFsLCBndmFsLCBidmFsO1xyXG4gICAgICAgIC8vIGZpbmQgbWluL21heFxyXG4gICAgICAgIHBpeGVscy5mb3JFYWNoKGZ1bmN0aW9uKHBpeGVsKSB7XHJcbiAgICAgICAgICAgIHJ2YWwgPSBwaXhlbFswXSA+PiByc2hpZnQ7XHJcbiAgICAgICAgICAgIGd2YWwgPSBwaXhlbFsxXSA+PiByc2hpZnQ7XHJcbiAgICAgICAgICAgIGJ2YWwgPSBwaXhlbFsyXSA+PiByc2hpZnQ7XHJcbiAgICAgICAgICAgIGlmIChydmFsIDwgcm1pbikgcm1pbiA9IHJ2YWw7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHJ2YWwgPiBybWF4KSBybWF4ID0gcnZhbDtcclxuICAgICAgICAgICAgaWYgKGd2YWwgPCBnbWluKSBnbWluID0gZ3ZhbDtcclxuICAgICAgICAgICAgZWxzZSBpZiAoZ3ZhbCA+IGdtYXgpIGdtYXggPSBndmFsO1xyXG4gICAgICAgICAgICBpZiAoYnZhbCA8IGJtaW4pIGJtaW4gPSBidmFsO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChidmFsID4gYm1heCkgYm1heCA9IGJ2YWw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWQm94KHJtaW4sIHJtYXgsIGdtaW4sIGdtYXgsIGJtaW4sIGJtYXgsIGhpc3RvKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtZWRpYW5DdXRBcHBseShoaXN0bywgdmJveCkge1xyXG4gICAgICAgIGlmICghdmJveC5jb3VudCgpKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBydyA9IHZib3gucjIgLSB2Ym94LnIxICsgMSxcclxuICAgICAgICAgICAgZ3cgPSB2Ym94LmcyIC0gdmJveC5nMSArIDEsXHJcbiAgICAgICAgICAgIGJ3ID0gdmJveC5iMiAtIHZib3guYjEgKyAxLFxyXG4gICAgICAgICAgICBtYXh3ID0gcHYubWF4KFtydywgZ3csIGJ3XSk7XHJcbiAgICAgICAgLy8gb25seSBvbmUgcGl4ZWwsIG5vIHNwbGl0XHJcbiAgICAgICAgaWYgKHZib3guY291bnQoKSA9PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbdmJveC5jb3B5KCldXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIEZpbmQgdGhlIHBhcnRpYWwgc3VtIGFycmF5cyBhbG9uZyB0aGUgc2VsZWN0ZWQgYXhpcy4gKi9cclxuICAgICAgICB2YXIgdG90YWwgPSAwLFxyXG4gICAgICAgICAgICBwYXJ0aWFsc3VtID0gW10sXHJcbiAgICAgICAgICAgIGxvb2thaGVhZHN1bSA9IFtdLFxyXG4gICAgICAgICAgICBpLCBqLCBrLCBzdW0sIGluZGV4O1xyXG4gICAgICAgIGlmIChtYXh3ID09IHJ3KSB7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IHZib3gucjE7IGkgPD0gdmJveC5yMjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBzdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChqID0gdmJveC5nMTsgaiA8PSB2Ym94LmcyOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSB2Ym94LmIxOyBrIDw9IHZib3guYjI7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGdldENvbG9ySW5kZXgoaSwgaiwgayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1bSArPSAoaGlzdG9baW5kZXhdIHx8IDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvdGFsICs9IHN1bTtcclxuICAgICAgICAgICAgICAgIHBhcnRpYWxzdW1baV0gPSB0b3RhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAobWF4dyA9PSBndykge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSB2Ym94LmcxOyBpIDw9IHZib3guZzI7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc3VtID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAoaiA9IHZib3gucjE7IGogPD0gdmJveC5yMjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gdmJveC5iMTsgayA8PSB2Ym94LmIyOyBrKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBnZXRDb2xvckluZGV4KGosIGksIGspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdW0gKz0gKGhpc3RvW2luZGV4XSB8fCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0b3RhbCArPSBzdW07XHJcbiAgICAgICAgICAgICAgICBwYXJ0aWFsc3VtW2ldID0gdG90YWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgeyAvKiBtYXh3ID09IGJ3ICovXHJcbiAgICAgICAgICAgIGZvciAoaSA9IHZib3guYjE7IGkgPD0gdmJveC5iMjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBzdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChqID0gdmJveC5yMTsgaiA8PSB2Ym94LnIyOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSB2Ym94LmcxOyBrIDw9IHZib3guZzI7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGdldENvbG9ySW5kZXgoaiwgaywgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1bSArPSAoaGlzdG9baW5kZXhdIHx8IDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvdGFsICs9IHN1bTtcclxuICAgICAgICAgICAgICAgIHBhcnRpYWxzdW1baV0gPSB0b3RhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwYXJ0aWFsc3VtLmZvckVhY2goZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICBsb29rYWhlYWRzdW1baV0gPSB0b3RhbCAtIGRcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZG9DdXQoY29sb3IpIHtcclxuICAgICAgICAgICAgdmFyIGRpbTEgPSBjb2xvciArICcxJyxcclxuICAgICAgICAgICAgICAgIGRpbTIgPSBjb2xvciArICcyJyxcclxuICAgICAgICAgICAgICAgIGxlZnQsIHJpZ2h0LCB2Ym94MSwgdmJveDIsIGQyLCBjb3VudDIgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSB2Ym94W2RpbTFdOyBpIDw9IHZib3hbZGltMl07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnRpYWxzdW1baV0gPiB0b3RhbCAvIDIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2Ym94MSA9IHZib3guY29weSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZib3gyID0gdmJveC5jb3B5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGkgLSB2Ym94W2RpbTFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gdmJveFtkaW0yXSAtIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlZnQgPD0gcmlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGQyID0gTWF0aC5taW4odmJveFtkaW0yXSAtIDEsIH5+IChpICsgcmlnaHQgLyAyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBkMiA9IE1hdGgubWF4KHZib3hbZGltMV0sIH5+IChpIC0gMSAtIGxlZnQgLyAyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXZvaWQgMC1jb3VudCBib3hlc1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICghcGFydGlhbHN1bVtkMl0pIGQyKys7XHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQyID0gbG9va2FoZWFkc3VtW2QyXTtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIWNvdW50MiAmJiBwYXJ0aWFsc3VtW2QyIC0gMV0pIGNvdW50MiA9IGxvb2thaGVhZHN1bVstLWQyXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgZGltZW5zaW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIHZib3gxW2RpbTJdID0gZDI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmJveDJbZGltMV0gPSB2Ym94MVtkaW0yXSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3Zib3ggY291bnRzOicsIHZib3guY291bnQoKSwgdmJveDEuY291bnQoKSwgdmJveDIuY291bnQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt2Ym94MSwgdmJveDJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBkZXRlcm1pbmUgdGhlIGN1dCBwbGFuZXNcclxuICAgICAgICByZXR1cm4gbWF4dyA9PSBydyA/IGRvQ3V0KCdyJykgOlxyXG4gICAgICAgICAgICBtYXh3ID09IGd3ID8gZG9DdXQoJ2cnKSA6XHJcbiAgICAgICAgICAgIGRvQ3V0KCdiJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcXVhbnRpemUocGl4ZWxzLCBtYXhjb2xvcnMpIHtcclxuICAgICAgICAvLyBzaG9ydC1jaXJjdWl0XHJcbiAgICAgICAgaWYgKCFwaXhlbHMubGVuZ3RoIHx8IG1heGNvbG9ycyA8IDIgfHwgbWF4Y29sb3JzID4gMjU2KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd3cm9uZyBudW1iZXIgb2YgbWF4Y29sb3JzJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFhYWDogY2hlY2sgY29sb3IgY29udGVudCBhbmQgY29udmVydCB0byBncmF5c2NhbGUgaWYgaW5zdWZmaWNpZW50XHJcblxyXG4gICAgICAgIHZhciBoaXN0byA9IGdldEhpc3RvKHBpeGVscyksXHJcbiAgICAgICAgICAgIGhpc3Rvc2l6ZSA9IDEgPDwgKDMgKiBzaWdiaXRzKTtcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgdGhhdCB3ZSBhcmVuJ3QgYmVsb3cgbWF4Y29sb3JzIGFscmVhZHlcclxuICAgICAgICB2YXIgbkNvbG9ycyA9IDA7XHJcbiAgICAgICAgaGlzdG8uZm9yRWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbkNvbG9ycysrXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKG5Db2xvcnMgPD0gbWF4Y29sb3JzKSB7XHJcbiAgICAgICAgICAgIC8vIFhYWDogZ2VuZXJhdGUgdGhlIG5ldyBjb2xvcnMgZnJvbSB0aGUgaGlzdG8gYW5kIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZ2V0IHRoZSBiZWdpbm5pbmcgdmJveCBmcm9tIHRoZSBjb2xvcnNcclxuICAgICAgICB2YXIgdmJveCA9IHZib3hGcm9tUGl4ZWxzKHBpeGVscywgaGlzdG8pLFxyXG4gICAgICAgICAgICBwcSA9IG5ldyBQUXVldWUoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHB2Lm5hdHVyYWxPcmRlcihhLmNvdW50KCksIGIuY291bnQoKSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgcHEucHVzaCh2Ym94KTtcclxuXHJcbiAgICAgICAgLy8gaW5uZXIgZnVuY3Rpb24gdG8gZG8gdGhlIGl0ZXJhdGlvblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpdGVyKGxoLCB0YXJnZXQpIHtcclxuICAgICAgICAgICAgdmFyIG5jb2xvcnMgPSAxLFxyXG4gICAgICAgICAgICAgICAgbml0ZXJzID0gMCxcclxuICAgICAgICAgICAgICAgIHZib3g7XHJcbiAgICAgICAgICAgIHdoaWxlIChuaXRlcnMgPCBtYXhJdGVyYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB2Ym94ID0gbGgucG9wKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZib3guY291bnQoKSkgeyAvKiBqdXN0IHB1dCBpdCBiYWNrICovXHJcbiAgICAgICAgICAgICAgICAgICAgbGgucHVzaCh2Ym94KTtcclxuICAgICAgICAgICAgICAgICAgICBuaXRlcnMrKztcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGRvIHRoZSBjdXRcclxuICAgICAgICAgICAgICAgIHZhciB2Ym94ZXMgPSBtZWRpYW5DdXRBcHBseShoaXN0bywgdmJveCksXHJcbiAgICAgICAgICAgICAgICAgICAgdmJveDEgPSB2Ym94ZXNbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgdmJveDIgPSB2Ym94ZXNbMV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF2Ym94MSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidmJveDEgbm90IGRlZmluZWQ7IHNob3VsZG4ndCBoYXBwZW4hXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxoLnB1c2godmJveDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZib3gyKSB7IC8qIHZib3gyIGNhbiBiZSBudWxsICovXHJcbiAgICAgICAgICAgICAgICAgICAgbGgucHVzaCh2Ym94Mik7XHJcbiAgICAgICAgICAgICAgICAgICAgbmNvbG9ycysrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5jb2xvcnMgPj0gdGFyZ2V0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAobml0ZXJzKysgPiBtYXhJdGVyYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJpbmZpbml0ZSBsb29wOyBwZXJoYXBzIHRvbyBmZXcgcGl4ZWxzIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZpcnN0IHNldCBvZiBjb2xvcnMsIHNvcnRlZCBieSBwb3B1bGF0aW9uXHJcbiAgICAgICAgaXRlcihwcSwgZnJhY3RCeVBvcHVsYXRpb25zICogbWF4Y29sb3JzKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwcS5zaXplKCksIHBxLmRlYnVnKCkubGVuZ3RoLCBwcS5kZWJ1ZygpLnNsaWNlKCkpO1xyXG5cclxuICAgICAgICAvLyBSZS1zb3J0IGJ5IHRoZSBwcm9kdWN0IG9mIHBpeGVsIG9jY3VwYW5jeSB0aW1lcyB0aGUgc2l6ZSBpbiBjb2xvciBzcGFjZS5cclxuICAgICAgICB2YXIgcHEyID0gbmV3IFBRdWV1ZShmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwdi5uYXR1cmFsT3JkZXIoYS5jb3VudCgpICogYS52b2x1bWUoKSwgYi5jb3VudCgpICogYi52b2x1bWUoKSlcclxuICAgICAgICB9KTtcclxuICAgICAgICB3aGlsZSAocHEuc2l6ZSgpKSB7XHJcbiAgICAgICAgICAgIHBxMi5wdXNoKHBxLnBvcCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG5leHQgc2V0IC0gZ2VuZXJhdGUgdGhlIG1lZGlhbiBjdXRzIHVzaW5nIHRoZSAobnBpeCAqIHZvbCkgc29ydGluZy5cclxuICAgICAgICBpdGVyKHBxMiwgbWF4Y29sb3JzIC0gcHEyLnNpemUoKSk7XHJcblxyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgYWN0dWFsIGNvbG9yc1xyXG4gICAgICAgIHZhciBjbWFwID0gbmV3IENNYXAoKTtcclxuICAgICAgICB3aGlsZSAocHEyLnNpemUoKSkge1xyXG4gICAgICAgICAgICBjbWFwLnB1c2gocHEyLnBvcCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjbWFwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcXVhbnRpemU6IHF1YW50aXplXHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1NQ1EucXVhbnRpemVcclxuXHJcbn0se31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xyXG5cclxuLypcclxuICBWaWJyYW50LmpzXHJcbiAgYnkgSmFyaSBad2FydHNcclxuXHJcbiAgQ29sb3IgYWxnb3JpdGhtIGNsYXNzIHRoYXQgZmluZHMgdmFyaWF0aW9ucyBvbiBjb2xvcnMgaW4gYW4gaW1hZ2UuXHJcblxyXG4gIENyZWRpdHNcclxuICAtLS0tLS0tLVxyXG4gIExva2VzaCBEaGFrYXIgKGh0dHA6Ly93d3cubG9rZXNoZGhha2FyLmNvbSkgLSBDcmVhdGVkIENvbG9yVGhpZWZcclxuICBHb29nbGUgLSBQYWxldHRlIHN1cHBvcnQgbGlicmFyeSBpbiBBbmRyb2lkXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gIHZhciBDYW52YXNJbWFnZSwgU3dhdGNoLCBWaWJyYW50LFxyXG4gICAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXHJcbiAgICBzbGljZSA9IFtdLnNsaWNlO1xyXG5cclxuICB3aW5kb3cuU3dhdGNoID0gU3dhdGNoID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgU3dhdGNoLnByb3RvdHlwZS5oc2wgPSB2b2lkIDA7XHJcblxyXG4gICAgU3dhdGNoLnByb3RvdHlwZS5yZ2IgPSB2b2lkIDA7XHJcblxyXG4gICAgU3dhdGNoLnByb3RvdHlwZS5wb3B1bGF0aW9uID0gMTtcclxuXHJcbiAgICBTd2F0Y2gueWlxID0gMDtcclxuXHJcbiAgICBmdW5jdGlvbiBTd2F0Y2gocmdiLCBwb3B1bGF0aW9uKSB7XHJcbiAgICAgIHRoaXMucmdiID0gcmdiO1xyXG4gICAgICB0aGlzLnBvcHVsYXRpb24gPSBwb3B1bGF0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIFN3YXRjaC5wcm90b3R5cGUuZ2V0SHNsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICghdGhpcy5oc2wpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oc2wgPSBWaWJyYW50LnJnYlRvSHNsKHRoaXMucmdiWzBdLCB0aGlzLnJnYlsxXSwgdGhpcy5yZ2JbMl0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhzbDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBTd2F0Y2gucHJvdG90eXBlLmdldFBvcHVsYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucG9wdWxhdGlvbjtcclxuICAgIH07XHJcblxyXG4gICAgU3dhdGNoLnByb3RvdHlwZS5nZXRSZ2IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucmdiO1xyXG4gICAgfTtcclxuXHJcbiAgICBTd2F0Y2gucHJvdG90eXBlLmdldEhleCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gXCIjXCIgKyAoKDEgPDwgMjQpICsgKHRoaXMucmdiWzBdIDw8IDE2KSArICh0aGlzLnJnYlsxXSA8PCA4KSArIHRoaXMucmdiWzJdKS50b1N0cmluZygxNikuc2xpY2UoMSwgNyk7XHJcbiAgICB9O1xyXG5cclxuICAgIFN3YXRjaC5wcm90b3R5cGUuZ2V0VGl0bGVUZXh0Q29sb3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5fZW5zdXJlVGV4dENvbG9ycygpO1xyXG4gICAgICBpZiAodGhpcy55aXEgPCAyMDApIHtcclxuICAgICAgICByZXR1cm4gXCIjZmZmXCI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzAwMFwiO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFN3YXRjaC5wcm90b3R5cGUuZ2V0Qm9keVRleHRDb2xvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLl9lbnN1cmVUZXh0Q29sb3JzKCk7XHJcbiAgICAgIGlmICh0aGlzLnlpcSA8IDE1MCkge1xyXG4gICAgICAgIHJldHVybiBcIiNmZmZcIjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gXCIjMDAwXCI7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgU3dhdGNoLnByb3RvdHlwZS5fZW5zdXJlVGV4dENvbG9ycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAoIXRoaXMueWlxKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueWlxID0gKHRoaXMucmdiWzBdICogMjk5ICsgdGhpcy5yZ2JbMV0gKiA1ODcgKyB0aGlzLnJnYlsyXSAqIDExNCkgLyAxMDAwO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBTd2F0Y2g7XHJcblxyXG4gIH0pKCk7XHJcblxyXG4gIHdpbmRvdy5WaWJyYW50ID0gVmlicmFudCA9IChmdW5jdGlvbigpIHtcclxuICAgIFZpYnJhbnQucHJvdG90eXBlLnF1YW50aXplID0gcmVxdWlyZSgncXVhbnRpemUnKTtcclxuXHJcbiAgICBWaWJyYW50LnByb3RvdHlwZS5fc3dhdGNoZXMgPSBbXTtcclxuXHJcbiAgICBWaWJyYW50LnByb3RvdHlwZS5UQVJHRVRfREFSS19MVU1BID0gMC4yNjtcclxuXHJcbiAgICBWaWJyYW50LnByb3RvdHlwZS5NQVhfREFSS19MVU1BID0gMC40NTtcclxuXHJcbiAgICBWaWJyYW50LnByb3RvdHlwZS5NSU5fTElHSFRfTFVNQSA9IDAuNTU7XHJcblxyXG4gICAgVmlicmFudC5wcm90b3R5cGUuVEFSR0VUX0xJR0hUX0xVTUEgPSAwLjc0O1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLk1JTl9OT1JNQUxfTFVNQSA9IDAuMztcclxuXHJcbiAgICBWaWJyYW50LnByb3RvdHlwZS5UQVJHRVRfTk9STUFMX0xVTUEgPSAwLjU7XHJcblxyXG4gICAgVmlicmFudC5wcm90b3R5cGUuTUFYX05PUk1BTF9MVU1BID0gMC43O1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLlRBUkdFVF9NVVRFRF9TQVRVUkFUSU9OID0gMC4zO1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLk1BWF9NVVRFRF9TQVRVUkFUSU9OID0gMC40O1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLlRBUkdFVF9WSUJSQU5UX1NBVFVSQVRJT04gPSAxO1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLk1JTl9WSUJSQU5UX1NBVFVSQVRJT04gPSAwLjM1O1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLldFSUdIVF9TQVRVUkFUSU9OID0gMztcclxuXHJcbiAgICBWaWJyYW50LnByb3RvdHlwZS5XRUlHSFRfTFVNQSA9IDY7XHJcblxyXG4gICAgVmlicmFudC5wcm90b3R5cGUuV0VJR0hUX1BPUFVMQVRJT04gPSAxO1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLlZpYnJhbnRTd2F0Y2ggPSB2b2lkIDA7XHJcblxyXG4gICAgVmlicmFudC5wcm90b3R5cGUuTXV0ZWRTd2F0Y2ggPSB2b2lkIDA7XHJcblxyXG4gICAgVmlicmFudC5wcm90b3R5cGUuRGFya1ZpYnJhbnRTd2F0Y2ggPSB2b2lkIDA7XHJcblxyXG4gICAgVmlicmFudC5wcm90b3R5cGUuRGFya011dGVkU3dhdGNoID0gdm9pZCAwO1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLkxpZ2h0VmlicmFudFN3YXRjaCA9IHZvaWQgMDtcclxuXHJcbiAgICBWaWJyYW50LnByb3RvdHlwZS5MaWdodE11dGVkU3dhdGNoID0gdm9pZCAwO1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLkhpZ2hlc3RQb3B1bGF0aW9uID0gMDtcclxuXHJcbiAgICBmdW5jdGlvbiBWaWJyYW50KHNvdXJjZUltYWdlLCBjb2xvckNvdW50LCBxdWFsaXR5KSB7XHJcbiAgICAgIHRoaXMuc3dhdGNoZXMgPSBiaW5kKHRoaXMuc3dhdGNoZXMsIHRoaXMpO1xyXG4gICAgICB2YXIgYSwgYWxsUGl4ZWxzLCBiLCBjbWFwLCBnLCBpLCBpbWFnZSwgaW1hZ2VEYXRhLCBvZmZzZXQsIHBpeGVsQ291bnQsIHBpeGVscywgcjtcclxuICAgICAgaWYgKHR5cGVvZiBjb2xvckNvdW50ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGNvbG9yQ291bnQgPSA2NDtcclxuICAgICAgfVxyXG4gICAgICBpZiAodHlwZW9mIHF1YWxpdHkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcXVhbGl0eSA9IDU7XHJcbiAgICAgIH1cclxuICAgICAgaW1hZ2UgPSBuZXcgQ2FudmFzSW1hZ2Uoc291cmNlSW1hZ2UpO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGltYWdlRGF0YSA9IGltYWdlLmdldEltYWdlRGF0YSgpO1xyXG4gICAgICAgIHBpeGVscyA9IGltYWdlRGF0YS5kYXRhO1xyXG4gICAgICAgIHBpeGVsQ291bnQgPSBpbWFnZS5nZXRQaXhlbENvdW50KCk7XHJcbiAgICAgICAgYWxsUGl4ZWxzID0gW107XHJcbiAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGkgPCBwaXhlbENvdW50KSB7XHJcbiAgICAgICAgICBvZmZzZXQgPSBpICogNDtcclxuICAgICAgICAgIHIgPSBwaXhlbHNbb2Zmc2V0ICsgMF07XHJcbiAgICAgICAgICBnID0gcGl4ZWxzW29mZnNldCArIDFdO1xyXG4gICAgICAgICAgYiA9IHBpeGVsc1tvZmZzZXQgKyAyXTtcclxuICAgICAgICAgIGEgPSBwaXhlbHNbb2Zmc2V0ICsgM107XHJcbiAgICAgICAgICBpZiAoYSA+PSAxMjUpIHtcclxuICAgICAgICAgICAgaWYgKCEociA+IDI1MCAmJiBnID4gMjUwICYmIGIgPiAyNTApKSB7XHJcbiAgICAgICAgICAgICAgYWxsUGl4ZWxzLnB1c2goW3IsIGcsIGJdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaSA9IGkgKyBxdWFsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbWFwID0gdGhpcy5xdWFudGl6ZShhbGxQaXhlbHMsIGNvbG9yQ291bnQpO1xyXG4gICAgICAgIHRoaXMuX3N3YXRjaGVzID0gY21hcC52Ym94ZXMubWFwKChmdW5jdGlvbihfdGhpcykge1xyXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZib3gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTd2F0Y2godmJveC5jb2xvciwgdmJveC52Ym94LmNvdW50KCkpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KSh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5tYXhQb3B1bGF0aW9uID0gdGhpcy5maW5kTWF4UG9wdWxhdGlvbjtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlVmFyYXRpb25Db2xvcnMoKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlRW1wdHlTd2F0Y2hlcygpO1xyXG4gICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIGltYWdlLnJlbW92ZUNhbnZhcygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgVmlicmFudC5wcm90b3R5cGUuZ2VuZXJhdGVWYXJhdGlvbkNvbG9ycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLlZpYnJhbnRTd2F0Y2ggPSB0aGlzLmZpbmRDb2xvclZhcmlhdGlvbih0aGlzLlRBUkdFVF9OT1JNQUxfTFVNQSwgdGhpcy5NSU5fTk9STUFMX0xVTUEsIHRoaXMuTUFYX05PUk1BTF9MVU1BLCB0aGlzLlRBUkdFVF9WSUJSQU5UX1NBVFVSQVRJT04sIHRoaXMuTUlOX1ZJQlJBTlRfU0FUVVJBVElPTiwgMSk7XHJcbiAgICAgIHRoaXMuTGlnaHRWaWJyYW50U3dhdGNoID0gdGhpcy5maW5kQ29sb3JWYXJpYXRpb24odGhpcy5UQVJHRVRfTElHSFRfTFVNQSwgdGhpcy5NSU5fTElHSFRfTFVNQSwgMSwgdGhpcy5UQVJHRVRfVklCUkFOVF9TQVRVUkFUSU9OLCB0aGlzLk1JTl9WSUJSQU5UX1NBVFVSQVRJT04sIDEpO1xyXG4gICAgICB0aGlzLkRhcmtWaWJyYW50U3dhdGNoID0gdGhpcy5maW5kQ29sb3JWYXJpYXRpb24odGhpcy5UQVJHRVRfREFSS19MVU1BLCAwLCB0aGlzLk1BWF9EQVJLX0xVTUEsIHRoaXMuVEFSR0VUX1ZJQlJBTlRfU0FUVVJBVElPTiwgdGhpcy5NSU5fVklCUkFOVF9TQVRVUkFUSU9OLCAxKTtcclxuICAgICAgdGhpcy5NdXRlZFN3YXRjaCA9IHRoaXMuZmluZENvbG9yVmFyaWF0aW9uKHRoaXMuVEFSR0VUX05PUk1BTF9MVU1BLCB0aGlzLk1JTl9OT1JNQUxfTFVNQSwgdGhpcy5NQVhfTk9STUFMX0xVTUEsIHRoaXMuVEFSR0VUX01VVEVEX1NBVFVSQVRJT04sIDAsIHRoaXMuTUFYX01VVEVEX1NBVFVSQVRJT04pO1xyXG4gICAgICB0aGlzLkxpZ2h0TXV0ZWRTd2F0Y2ggPSB0aGlzLmZpbmRDb2xvclZhcmlhdGlvbih0aGlzLlRBUkdFVF9MSUdIVF9MVU1BLCB0aGlzLk1JTl9MSUdIVF9MVU1BLCAxLCB0aGlzLlRBUkdFVF9NVVRFRF9TQVRVUkFUSU9OLCAwLCB0aGlzLk1BWF9NVVRFRF9TQVRVUkFUSU9OKTtcclxuICAgICAgcmV0dXJuIHRoaXMuRGFya011dGVkU3dhdGNoID0gdGhpcy5maW5kQ29sb3JWYXJpYXRpb24odGhpcy5UQVJHRVRfREFSS19MVU1BLCAwLCB0aGlzLk1BWF9EQVJLX0xVTUEsIHRoaXMuVEFSR0VUX01VVEVEX1NBVFVSQVRJT04sIDAsIHRoaXMuTUFYX01VVEVEX1NBVFVSQVRJT04pO1xyXG4gICAgfTtcclxuXHJcbiAgICBWaWJyYW50LnByb3RvdHlwZS5nZW5lcmF0ZUVtcHR5U3dhdGNoZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGhzbDtcclxuICAgICAgaWYgKHRoaXMuVmlicmFudFN3YXRjaCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuRGFya1ZpYnJhbnRTd2F0Y2ggIT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgaHNsID0gdGhpcy5EYXJrVmlicmFudFN3YXRjaC5nZXRIc2woKTtcclxuICAgICAgICAgIGhzbFsyXSA9IHRoaXMuVEFSR0VUX05PUk1BTF9MVU1BO1xyXG4gICAgICAgICAgdGhpcy5WaWJyYW50U3dhdGNoID0gbmV3IFN3YXRjaChWaWJyYW50LmhzbFRvUmdiKGhzbFswXSwgaHNsWzFdLCBoc2xbMl0pLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuRGFya1ZpYnJhbnRTd2F0Y2ggPT09IHZvaWQgMCkge1xyXG4gICAgICAgIGlmICh0aGlzLlZpYnJhbnRTd2F0Y2ggIT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgaHNsID0gdGhpcy5WaWJyYW50U3dhdGNoLmdldEhzbCgpO1xyXG4gICAgICAgICAgaHNsWzJdID0gdGhpcy5UQVJHRVRfREFSS19MVU1BO1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuRGFya1ZpYnJhbnRTd2F0Y2ggPSBuZXcgU3dhdGNoKFZpYnJhbnQuaHNsVG9SZ2IoaHNsWzBdLCBoc2xbMV0sIGhzbFsyXSksIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBWaWJyYW50LnByb3RvdHlwZS5maW5kTWF4UG9wdWxhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgaiwgbGVuLCBwb3B1bGF0aW9uLCByZWYsIHN3YXRjaDtcclxuICAgICAgcG9wdWxhdGlvbiA9IDA7XHJcbiAgICAgIHJlZiA9IHRoaXMuX3N3YXRjaGVzO1xyXG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcclxuICAgICAgICBzd2F0Y2ggPSByZWZbal07XHJcbiAgICAgICAgcG9wdWxhdGlvbiA9IE1hdGgubWF4KHBvcHVsYXRpb24sIHN3YXRjaC5nZXRQb3B1bGF0aW9uKCkpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBwb3B1bGF0aW9uO1xyXG4gICAgfTtcclxuXHJcbiAgICBWaWJyYW50LnByb3RvdHlwZS5maW5kQ29sb3JWYXJpYXRpb24gPSBmdW5jdGlvbih0YXJnZXRMdW1hLCBtaW5MdW1hLCBtYXhMdW1hLCB0YXJnZXRTYXR1cmF0aW9uLCBtaW5TYXR1cmF0aW9uLCBtYXhTYXR1cmF0aW9uKSB7XHJcbiAgICAgIHZhciBqLCBsZW4sIGx1bWEsIG1heCwgbWF4VmFsdWUsIHJlZiwgc2F0LCBzd2F0Y2gsIHZhbHVlO1xyXG4gICAgICBtYXggPSB2b2lkIDA7XHJcbiAgICAgIG1heFZhbHVlID0gMDtcclxuICAgICAgcmVmID0gdGhpcy5fc3dhdGNoZXM7XHJcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xyXG4gICAgICAgIHN3YXRjaCA9IHJlZltqXTtcclxuICAgICAgICBzYXQgPSBzd2F0Y2guZ2V0SHNsKClbMV07XHJcbiAgICAgICAgbHVtYSA9IHN3YXRjaC5nZXRIc2woKVsyXTtcclxuICAgICAgICBpZiAoc2F0ID49IG1pblNhdHVyYXRpb24gJiYgc2F0IDw9IG1heFNhdHVyYXRpb24gJiYgbHVtYSA+PSBtaW5MdW1hICYmIGx1bWEgPD0gbWF4THVtYSAmJiAhdGhpcy5pc0FscmVhZHlTZWxlY3RlZChzd2F0Y2gpKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuY3JlYXRlQ29tcGFyaXNvblZhbHVlKHNhdCwgdGFyZ2V0U2F0dXJhdGlvbiwgbHVtYSwgdGFyZ2V0THVtYSwgc3dhdGNoLmdldFBvcHVsYXRpb24oKSwgdGhpcy5IaWdoZXN0UG9wdWxhdGlvbik7XHJcbiAgICAgICAgICBpZiAobWF4ID09PSB2b2lkIDAgfHwgdmFsdWUgPiBtYXhWYWx1ZSkge1xyXG4gICAgICAgICAgICBtYXggPSBzd2F0Y2g7XHJcbiAgICAgICAgICAgIG1heFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBtYXg7XHJcbiAgICB9O1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLmNyZWF0ZUNvbXBhcmlzb25WYWx1ZSA9IGZ1bmN0aW9uKHNhdHVyYXRpb24sIHRhcmdldFNhdHVyYXRpb24sIGx1bWEsIHRhcmdldEx1bWEsIHBvcHVsYXRpb24sIG1heFBvcHVsYXRpb24pIHtcclxuICAgICAgcmV0dXJuIHRoaXMud2VpZ2h0ZWRNZWFuKHRoaXMuaW52ZXJ0RGlmZihzYXR1cmF0aW9uLCB0YXJnZXRTYXR1cmF0aW9uKSwgdGhpcy5XRUlHSFRfU0FUVVJBVElPTiwgdGhpcy5pbnZlcnREaWZmKGx1bWEsIHRhcmdldEx1bWEpLCB0aGlzLldFSUdIVF9MVU1BLCBwb3B1bGF0aW9uIC8gbWF4UG9wdWxhdGlvbiwgdGhpcy5XRUlHSFRfUE9QVUxBVElPTik7XHJcbiAgICB9O1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLmludmVydERpZmYgPSBmdW5jdGlvbih2YWx1ZSwgdGFyZ2V0VmFsdWUpIHtcclxuICAgICAgcmV0dXJuIDEgLSBNYXRoLmFicyh2YWx1ZSAtIHRhcmdldFZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgVmlicmFudC5wcm90b3R5cGUud2VpZ2h0ZWRNZWFuID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBpLCBzdW0sIHN1bVdlaWdodCwgdmFsdWUsIHZhbHVlcywgd2VpZ2h0O1xyXG4gICAgICB2YWx1ZXMgPSAxIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMCkgOiBbXTtcclxuICAgICAgc3VtID0gMDtcclxuICAgICAgc3VtV2VpZ2h0ID0gMDtcclxuICAgICAgaSA9IDA7XHJcbiAgICAgIHdoaWxlIChpIDwgdmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWVzW2ldO1xyXG4gICAgICAgIHdlaWdodCA9IHZhbHVlc1tpICsgMV07XHJcbiAgICAgICAgc3VtICs9IHZhbHVlICogd2VpZ2h0O1xyXG4gICAgICAgIHN1bVdlaWdodCArPSB3ZWlnaHQ7XHJcbiAgICAgICAgaSArPSAyO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBzdW0gLyBzdW1XZWlnaHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIFZpYnJhbnQucHJvdG90eXBlLnN3YXRjaGVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgVmlicmFudDogdGhpcy5WaWJyYW50U3dhdGNoLFxyXG4gICAgICAgIE11dGVkOiB0aGlzLk11dGVkU3dhdGNoLFxyXG4gICAgICAgIERhcmtWaWJyYW50OiB0aGlzLkRhcmtWaWJyYW50U3dhdGNoLFxyXG4gICAgICAgIERhcmtNdXRlZDogdGhpcy5EYXJrTXV0ZWRTd2F0Y2gsXHJcbiAgICAgICAgTGlnaHRWaWJyYW50OiB0aGlzLkxpZ2h0VmlicmFudFN3YXRjaCxcclxuICAgICAgICBMaWdodE11dGVkOiB0aGlzLkxpZ2h0TXV0ZWRcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgVmlicmFudC5wcm90b3R5cGUuaXNBbHJlYWR5U2VsZWN0ZWQgPSBmdW5jdGlvbihzd2F0Y2gpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuVmlicmFudFN3YXRjaCA9PT0gc3dhdGNoIHx8IHRoaXMuRGFya1ZpYnJhbnRTd2F0Y2ggPT09IHN3YXRjaCB8fCB0aGlzLkxpZ2h0VmlicmFudFN3YXRjaCA9PT0gc3dhdGNoIHx8IHRoaXMuTXV0ZWRTd2F0Y2ggPT09IHN3YXRjaCB8fCB0aGlzLkRhcmtNdXRlZFN3YXRjaCA9PT0gc3dhdGNoIHx8IHRoaXMuTGlnaHRNdXRlZFN3YXRjaCA9PT0gc3dhdGNoO1xyXG4gICAgfTtcclxuXHJcbiAgICBWaWJyYW50LnJnYlRvSHNsID0gZnVuY3Rpb24ociwgZywgYikge1xyXG4gICAgICB2YXIgZCwgaCwgbCwgbWF4LCBtaW4sIHM7XHJcbiAgICAgIHIgLz0gMjU1O1xyXG4gICAgICBnIC89IDI1NTtcclxuICAgICAgYiAvPSAyNTU7XHJcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xyXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcclxuICAgICAgaCA9IHZvaWQgMDtcclxuICAgICAgcyA9IHZvaWQgMDtcclxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcclxuICAgICAgaWYgKG1heCA9PT0gbWluKSB7XHJcbiAgICAgICAgaCA9IHMgPSAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGQgPSBtYXggLSBtaW47XHJcbiAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xyXG4gICAgICAgIHN3aXRjaCAobWF4KSB7XHJcbiAgICAgICAgICBjYXNlIHI6XHJcbiAgICAgICAgICAgIGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIGc6XHJcbiAgICAgICAgICAgIGggPSAoYiAtIHIpIC8gZCArIDI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBiOlxyXG4gICAgICAgICAgICBoID0gKHIgLSBnKSAvIGQgKyA0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBoIC89IDY7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFtoLCBzLCBsXTtcclxuICAgIH07XHJcblxyXG4gICAgVmlicmFudC5oc2xUb1JnYiA9IGZ1bmN0aW9uKGgsIHMsIGwpIHtcclxuICAgICAgdmFyIGIsIGcsIGh1ZTJyZ2IsIHAsIHEsIHI7XHJcbiAgICAgIHIgPSB2b2lkIDA7XHJcbiAgICAgIGcgPSB2b2lkIDA7XHJcbiAgICAgIGIgPSB2b2lkIDA7XHJcbiAgICAgIGh1ZTJyZ2IgPSBmdW5jdGlvbihwLCBxLCB0KSB7XHJcbiAgICAgICAgaWYgKHQgPCAwKSB7XHJcbiAgICAgICAgICB0ICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0ID4gMSkge1xyXG4gICAgICAgICAgdCAtPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodCA8IDEgLyA2KSB7XHJcbiAgICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHQgPCAxIC8gMikge1xyXG4gICAgICAgICAgcmV0dXJuIHE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0IDwgMiAvIDMpIHtcclxuICAgICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChzID09PSAwKSB7XHJcbiAgICAgICAgciA9IGcgPSBiID0gbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSAobCAqIHMpO1xyXG4gICAgICAgIHAgPSAyICogbCAtIHE7XHJcbiAgICAgICAgciA9IGh1ZTJyZ2IocCwgcSwgaCArIDEgLyAzKTtcclxuICAgICAgICBnID0gaHVlMnJnYihwLCBxLCBoKTtcclxuICAgICAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gKDEgLyAzKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFtyICogMjU1LCBnICogMjU1LCBiICogMjU1XTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIFZpYnJhbnQ7XHJcblxyXG4gIH0pKCk7XHJcblxyXG5cclxuICAvKlxyXG4gICAgQ2FudmFzSW1hZ2UgQ2xhc3NcclxuICAgIENsYXNzIHRoYXQgd3JhcHMgdGhlIGh0bWwgaW1hZ2UgZWxlbWVudCBhbmQgY2FudmFzLlxyXG4gICAgSXQgYWxzbyBzaW1wbGlmaWVzIHNvbWUgb2YgdGhlIGNhbnZhcyBjb250ZXh0IG1hbmlwdWxhdGlvblxyXG4gICAgd2l0aCBhIHNldCBvZiBoZWxwZXIgZnVuY3Rpb25zLlxyXG4gICAgU3RvbGVuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xva2VzaC9jb2xvci10aGllZlxyXG4gICAqL1xyXG5cclxuICB3aW5kb3cuQ2FudmFzSW1hZ2UgPSBDYW52YXNJbWFnZSA9IChmdW5jdGlvbigpIHtcclxuICAgIGZ1bmN0aW9uIENhbnZhc0ltYWdlKGltYWdlKSB7XHJcbiAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xyXG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5jYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcclxuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XHJcbiAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICBDYW52YXNJbWFnZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBDYW52YXNJbWFnZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oaW1hZ2VEYXRhKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XHJcbiAgICB9O1xyXG5cclxuICAgIENhbnZhc0ltYWdlLnByb3RvdHlwZS5nZXRQaXhlbENvdW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIENhbnZhc0ltYWdlLnByb3RvdHlwZS5nZXRJbWFnZURhdGEgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBDYW52YXNJbWFnZS5wcm90b3R5cGUucmVtb3ZlQ2FudmFzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuY2FudmFzKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIENhbnZhc0ltYWdlO1xyXG5cclxuICB9KSgpO1xyXG5cclxufSkuY2FsbCh0aGlzKTtcclxuXHJcbn0se1wicXVhbnRpemVcIjoxfV19LHt9LFsyXSk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICB2YXIgTXV0YXRpb25PYnNlcnZlciwgVXRpbCwgV2Vha01hcCwgZ2V0Q29tcHV0ZWRTdHlsZSwgZ2V0Q29tcHV0ZWRTdHlsZVJYLFxyXG4gICAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXHJcbiAgICBpbmRleE9mID0gW10uaW5kZXhPZiB8fCBmdW5jdGlvbihpdGVtKSB7IGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTsgfSByZXR1cm4gLTE7IH07XHJcblxyXG4gIFV0aWwgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICBmdW5jdGlvbiBVdGlsKCkge31cclxuXHJcbiAgICBVdGlsLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbihjdXN0b20sIGRlZmF1bHRzKSB7XHJcbiAgICAgIHZhciBrZXksIHZhbHVlO1xyXG4gICAgICBmb3IgKGtleSBpbiBkZWZhdWx0cykge1xyXG4gICAgICAgIHZhbHVlID0gZGVmYXVsdHNba2V5XTtcclxuICAgICAgICBpZiAoY3VzdG9tW2tleV0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgY3VzdG9tW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGN1c3RvbTtcclxuICAgIH07XHJcblxyXG4gICAgVXRpbC5wcm90b3R5cGUuaXNNb2JpbGUgPSBmdW5jdGlvbihhZ2VudCkge1xyXG4gICAgICByZXR1cm4gL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KGFnZW50KTtcclxuICAgIH07XHJcblxyXG4gICAgVXRpbC5wcm90b3R5cGUuY3JlYXRlRXZlbnQgPSBmdW5jdGlvbihldmVudCwgYnViYmxlLCBjYW5jZWwsIGRldGFpbCkge1xyXG4gICAgICB2YXIgY3VzdG9tRXZlbnQ7XHJcbiAgICAgIGlmIChidWJibGUgPT0gbnVsbCkge1xyXG4gICAgICAgIGJ1YmJsZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChjYW5jZWwgPT0gbnVsbCkge1xyXG4gICAgICAgIGNhbmNlbCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChkZXRhaWwgPT0gbnVsbCkge1xyXG4gICAgICAgIGRldGFpbCA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50ICE9IG51bGwpIHtcclxuICAgICAgICBjdXN0b21FdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xyXG4gICAgICAgIGN1c3RvbUV2ZW50LmluaXRDdXN0b21FdmVudChldmVudCwgYnViYmxlLCBjYW5jZWwsIGRldGFpbCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QgIT0gbnVsbCkge1xyXG4gICAgICAgIGN1c3RvbUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKTtcclxuICAgICAgICBjdXN0b21FdmVudC5ldmVudFR5cGUgPSBldmVudDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjdXN0b21FdmVudC5ldmVudE5hbWUgPSBldmVudDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gY3VzdG9tRXZlbnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIFV0aWwucHJvdG90eXBlLmVtaXRFdmVudCA9IGZ1bmN0aW9uKGVsZW0sIGV2ZW50KSB7XHJcbiAgICAgIGlmIChlbGVtLmRpc3BhdGNoRXZlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xyXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50IGluIChlbGVtICE9IG51bGwpKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1bZXZlbnRdKCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoKFwib25cIiArIGV2ZW50KSBpbiAoZWxlbSAhPSBudWxsKSkge1xyXG4gICAgICAgIHJldHVybiBlbGVtW1wib25cIiArIGV2ZW50XSgpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFV0aWwucHJvdG90eXBlLmFkZEV2ZW50ID0gZnVuY3Rpb24oZWxlbSwgZXZlbnQsIGZuKSB7XHJcbiAgICAgIGlmIChlbGVtLmFkZEV2ZW50TGlzdGVuZXIgIT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCBmYWxzZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZWxlbS5hdHRhY2hFdmVudCAhPSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW0uYXR0YWNoRXZlbnQoXCJvblwiICsgZXZlbnQsIGZuKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZWxlbVtldmVudF0gPSBmbjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBVdGlsLnByb3RvdHlwZS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKGVsZW0sIGV2ZW50LCBmbikge1xyXG4gICAgICBpZiAoZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICE9IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgZmFsc2UpO1xyXG4gICAgICB9IGVsc2UgaWYgKGVsZW0uZGV0YWNoRXZlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtLmRldGFjaEV2ZW50KFwib25cIiArIGV2ZW50LCBmbik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSBlbGVtW2V2ZW50XTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBVdGlsLnByb3RvdHlwZS5pbm5lckhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAoJ2lubmVySGVpZ2h0JyBpbiB3aW5kb3cpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBVdGlsO1xyXG5cclxuICB9KSgpO1xyXG5cclxuICBXZWFrTWFwID0gdGhpcy5XZWFrTWFwIHx8IHRoaXMuTW96V2Vha01hcCB8fCAoV2Vha01hcCA9IChmdW5jdGlvbigpIHtcclxuICAgIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XHJcbiAgICAgIHRoaXMua2V5cyA9IFtdO1xyXG4gICAgICB0aGlzLnZhbHVlcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIFdlYWtNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICB2YXIgaSwgaXRlbSwgaiwgbGVuLCByZWY7XHJcbiAgICAgIHJlZiA9IHRoaXMua2V5cztcclxuICAgICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcclxuICAgICAgICBpdGVtID0gcmVmW2ldO1xyXG4gICAgICAgIGlmIChpdGVtID09PSBrZXkpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgV2Vha01hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICB2YXIgaSwgaXRlbSwgaiwgbGVuLCByZWY7XHJcbiAgICAgIHJlZiA9IHRoaXMua2V5cztcclxuICAgICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcclxuICAgICAgICBpdGVtID0gcmVmW2ldO1xyXG4gICAgICAgIGlmIChpdGVtID09PSBrZXkpIHtcclxuICAgICAgICAgIHRoaXMudmFsdWVzW2ldID0gdmFsdWU7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMua2V5cy5wdXNoKGtleSk7XHJcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5wdXNoKHZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIFdlYWtNYXA7XHJcblxyXG4gIH0pKCkpO1xyXG5cclxuICBNdXRhdGlvbk9ic2VydmVyID0gdGhpcy5NdXRhdGlvbk9ic2VydmVyIHx8IHRoaXMuV2Via2l0TXV0YXRpb25PYnNlcnZlciB8fCB0aGlzLk1vek11dGF0aW9uT2JzZXJ2ZXIgfHwgKE11dGF0aW9uT2JzZXJ2ZXIgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICBmdW5jdGlvbiBNdXRhdGlvbk9ic2VydmVyKCkge1xyXG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignTXV0YXRpb25PYnNlcnZlciBpcyBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgYnJvd3Nlci4nKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignV09XLmpzIGNhbm5vdCBkZXRlY3QgZG9tIG11dGF0aW9ucywgcGxlYXNlIGNhbGwgLnN5bmMoKSBhZnRlciBsb2FkaW5nIG5ldyBjb250ZW50LicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgTXV0YXRpb25PYnNlcnZlci5ub3RTdXBwb3J0ZWQgPSB0cnVlO1xyXG5cclxuICAgIE11dGF0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuICAgIHJldHVybiBNdXRhdGlvbk9ic2VydmVyO1xyXG5cclxuICB9KSgpKTtcclxuXHJcbiAgZ2V0Q29tcHV0ZWRTdHlsZSA9IHRoaXMuZ2V0Q29tcHV0ZWRTdHlsZSB8fCBmdW5jdGlvbihlbCwgcHNldWRvKSB7XHJcbiAgICB0aGlzLmdldFByb3BlcnR5VmFsdWUgPSBmdW5jdGlvbihwcm9wKSB7XHJcbiAgICAgIHZhciByZWY7XHJcbiAgICAgIGlmIChwcm9wID09PSAnZmxvYXQnKSB7XHJcbiAgICAgICAgcHJvcCA9ICdzdHlsZUZsb2F0JztcclxuICAgICAgfVxyXG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZVJYLnRlc3QocHJvcCkpIHtcclxuICAgICAgICBwcm9wLnJlcGxhY2UoZ2V0Q29tcHV0ZWRTdHlsZVJYLCBmdW5jdGlvbihfLCBfY2hhcikge1xyXG4gICAgICAgICAgcmV0dXJuIF9jaGFyLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuICgocmVmID0gZWwuY3VycmVudFN0eWxlKSAhPSBudWxsID8gcmVmW3Byb3BdIDogdm9pZCAwKSB8fCBudWxsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIGdldENvbXB1dGVkU3R5bGVSWCA9IC8oXFwtKFthLXpdKXsxfSkvZztcclxuXHJcbiAgdGhpcy5XT1cgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICBXT1cucHJvdG90eXBlLmRlZmF1bHRzID0ge1xyXG4gICAgICBib3hDbGFzczogJ3dvdycsXHJcbiAgICAgIGFuaW1hdGVDbGFzczogJ2FuaW1hdGVkJyxcclxuICAgICAgb2Zmc2V0OiAwLFxyXG4gICAgICBtb2JpbGU6IHRydWUsXHJcbiAgICAgIGxpdmU6IHRydWUsXHJcbiAgICAgIGNhbGxiYWNrOiBudWxsLFxyXG4gICAgICBzY3JvbGxDb250YWluZXI6IG51bGxcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gV09XKG9wdGlvbnMpIHtcclxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNjcm9sbENhbGxiYWNrID0gYmluZCh0aGlzLnNjcm9sbENhbGxiYWNrLCB0aGlzKTtcclxuICAgICAgdGhpcy5zY3JvbGxIYW5kbGVyID0gYmluZCh0aGlzLnNjcm9sbEhhbmRsZXIsIHRoaXMpO1xyXG4gICAgICB0aGlzLnJlc2V0QW5pbWF0aW9uID0gYmluZCh0aGlzLnJlc2V0QW5pbWF0aW9uLCB0aGlzKTtcclxuICAgICAgdGhpcy5zdGFydCA9IGJpbmQodGhpcy5zdGFydCwgdGhpcyk7XHJcbiAgICAgIHRoaXMuc2Nyb2xsZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLmNvbmZpZyA9IHRoaXMudXRpbCgpLmV4dGVuZChvcHRpb25zLCB0aGlzLmRlZmF1bHRzKTtcclxuICAgICAgaWYgKG9wdGlvbnMuc2Nyb2xsQ29udGFpbmVyICE9IG51bGwpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZy5zY3JvbGxDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMuc2Nyb2xsQ29udGFpbmVyKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmFuaW1hdGlvbk5hbWVDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgICAgIHRoaXMud293RXZlbnQgPSB0aGlzLnV0aWwoKS5jcmVhdGVFdmVudCh0aGlzLmNvbmZpZy5ib3hDbGFzcyk7XHJcbiAgICB9XHJcblxyXG4gICAgV09XLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciByZWY7XHJcbiAgICAgIHRoaXMuZWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICAgIGlmICgocmVmID0gZG9jdW1lbnQucmVhZHlTdGF0ZSkgPT09IFwiaW50ZXJhY3RpdmVcIiB8fCByZWYgPT09IFwiY29tcGxldGVcIikge1xyXG4gICAgICAgIHRoaXMuc3RhcnQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnV0aWwoKS5hZGRFdmVudChkb2N1bWVudCwgJ0RPTUNvbnRlbnRMb2FkZWQnLCB0aGlzLnN0YXJ0KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hlZCA9IFtdO1xyXG4gICAgfTtcclxuXHJcbiAgICBXT1cucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBib3gsIGosIGxlbiwgcmVmO1xyXG4gICAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcclxuICAgICAgdGhpcy5ib3hlcyA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdHM7XHJcbiAgICAgICAgcmVmID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIgKyB0aGlzLmNvbmZpZy5ib3hDbGFzcyk7XHJcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xyXG4gICAgICAgICAgYm94ID0gcmVmW2pdO1xyXG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGJveCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgICB9KS5jYWxsKHRoaXMpO1xyXG4gICAgICB0aGlzLmFsbCA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdHM7XHJcbiAgICAgICAgcmVmID0gdGhpcy5ib3hlcztcclxuICAgICAgICByZXN1bHRzID0gW107XHJcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XHJcbiAgICAgICAgICBib3ggPSByZWZbal07XHJcbiAgICAgICAgICByZXN1bHRzLnB1c2goYm94KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICAgIH0pLmNhbGwodGhpcyk7XHJcbiAgICAgIGlmICh0aGlzLmJveGVzLmxlbmd0aCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKCkpIHtcclxuICAgICAgICAgIHRoaXMucmVzZXRTdHlsZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWYgPSB0aGlzLmJveGVzO1xyXG4gICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XHJcbiAgICAgICAgICAgIGJveCA9IHJlZltqXTtcclxuICAgICAgICAgICAgdGhpcy5hcHBseVN0eWxlKGJveCwgdHJ1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICghdGhpcy5kaXNhYmxlZCgpKSB7XHJcbiAgICAgICAgdGhpcy51dGlsKCkuYWRkRXZlbnQodGhpcy5jb25maWcuc2Nyb2xsQ29udGFpbmVyIHx8IHdpbmRvdywgJ3Njcm9sbCcsIHRoaXMuc2Nyb2xsSGFuZGxlcik7XHJcbiAgICAgICAgdGhpcy51dGlsKCkuYWRkRXZlbnQod2luZG93LCAncmVzaXplJywgdGhpcy5zY3JvbGxIYW5kbGVyKTtcclxuICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5zY3JvbGxDYWxsYmFjaywgNTApO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5saXZlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNdXRhdGlvbk9ic2VydmVyKChmdW5jdGlvbihfdGhpcykge1xyXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlY29yZHMpIHtcclxuICAgICAgICAgICAgdmFyIGssIGxlbjEsIG5vZGUsIHJlY29yZCwgcmVzdWx0cztcclxuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVjb3Jkcy5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcclxuICAgICAgICAgICAgICByZWNvcmQgPSByZWNvcmRzW2tdO1xyXG4gICAgICAgICAgICAgIHJlc3VsdHMucHVzaCgoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbCwgbGVuMiwgcmVmMSwgcmVzdWx0czE7XHJcbiAgICAgICAgICAgICAgICByZWYxID0gcmVjb3JkLmFkZGVkTm9kZXMgfHwgW107XHJcbiAgICAgICAgICAgICAgICByZXN1bHRzMSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsID0gMCwgbGVuMiA9IHJlZjEubGVuZ3RoOyBsIDwgbGVuMjsgbCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgIG5vZGUgPSByZWYxW2xdO1xyXG4gICAgICAgICAgICAgICAgICByZXN1bHRzMS5wdXNoKHRoaXMuZG9TeW5jKG5vZGUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzMTtcclxuICAgICAgICAgICAgICB9KS5jYWxsKF90aGlzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pKHRoaXMpKS5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHtcclxuICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgICAgIHN1YnRyZWU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBXT1cucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5zdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgdGhpcy51dGlsKCkucmVtb3ZlRXZlbnQodGhpcy5jb25maWcuc2Nyb2xsQ29udGFpbmVyIHx8IHdpbmRvdywgJ3Njcm9sbCcsIHRoaXMuc2Nyb2xsSGFuZGxlcik7XHJcbiAgICAgIHRoaXMudXRpbCgpLnJlbW92ZUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuc2Nyb2xsSGFuZGxlcik7XHJcbiAgICAgIGlmICh0aGlzLmludGVydmFsICE9IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBXT1cucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgIGlmIChNdXRhdGlvbk9ic2VydmVyLm5vdFN1cHBvcnRlZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvU3luYyh0aGlzLmVsZW1lbnQpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFdPVy5wcm90b3R5cGUuZG9TeW5jID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICB2YXIgYm94LCBqLCBsZW4sIHJlZiwgcmVzdWx0cztcclxuICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xyXG4gICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50O1xyXG4gICAgICByZWYgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIgKyB0aGlzLmNvbmZpZy5ib3hDbGFzcyk7XHJcbiAgICAgIHJlc3VsdHMgPSBbXTtcclxuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XHJcbiAgICAgICAgYm94ID0gcmVmW2pdO1xyXG4gICAgICAgIGlmIChpbmRleE9mLmNhbGwodGhpcy5hbGwsIGJveCkgPCAwKSB7XHJcbiAgICAgICAgICB0aGlzLmJveGVzLnB1c2goYm94KTtcclxuICAgICAgICAgIHRoaXMuYWxsLnB1c2goYm94KTtcclxuICAgICAgICAgIGlmICh0aGlzLnN0b3BwZWQgfHwgdGhpcy5kaXNhYmxlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRTdHlsZSgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hcHBseVN0eWxlKGJveCwgdHJ1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXN1bHRzLnB1c2godGhpcy5zY3JvbGxlZCA9IHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXN1bHRzLnB1c2godm9pZCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICB9O1xyXG5cclxuICAgIFdPVy5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uKGJveCkge1xyXG4gICAgICB0aGlzLmFwcGx5U3R5bGUoYm94KTtcclxuICAgICAgYm94LmNsYXNzTmFtZSA9IGJveC5jbGFzc05hbWUgKyBcIiBcIiArIHRoaXMuY29uZmlnLmFuaW1hdGVDbGFzcztcclxuICAgICAgaWYgKHRoaXMuY29uZmlnLmNhbGxiYWNrICE9IG51bGwpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZy5jYWxsYmFjayhib3gpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudXRpbCgpLmVtaXRFdmVudChib3gsIHRoaXMud293RXZlbnQpO1xyXG4gICAgICB0aGlzLnV0aWwoKS5hZGRFdmVudChib3gsICdhbmltYXRpb25lbmQnLCB0aGlzLnJlc2V0QW5pbWF0aW9uKTtcclxuICAgICAgdGhpcy51dGlsKCkuYWRkRXZlbnQoYm94LCAnb2FuaW1hdGlvbmVuZCcsIHRoaXMucmVzZXRBbmltYXRpb24pO1xyXG4gICAgICB0aGlzLnV0aWwoKS5hZGRFdmVudChib3gsICd3ZWJraXRBbmltYXRpb25FbmQnLCB0aGlzLnJlc2V0QW5pbWF0aW9uKTtcclxuICAgICAgdGhpcy51dGlsKCkuYWRkRXZlbnQoYm94LCAnTVNBbmltYXRpb25FbmQnLCB0aGlzLnJlc2V0QW5pbWF0aW9uKTtcclxuICAgICAgcmV0dXJuIGJveDtcclxuICAgIH07XHJcblxyXG4gICAgV09XLnByb3RvdHlwZS5hcHBseVN0eWxlID0gZnVuY3Rpb24oYm94LCBoaWRkZW4pIHtcclxuICAgICAgdmFyIGRlbGF5LCBkdXJhdGlvbiwgaXRlcmF0aW9uO1xyXG4gICAgICBkdXJhdGlvbiA9IGJveC5nZXRBdHRyaWJ1dGUoJ2RhdGEtd293LWR1cmF0aW9uJyk7XHJcbiAgICAgIGRlbGF5ID0gYm94LmdldEF0dHJpYnV0ZSgnZGF0YS13b3ctZGVsYXknKTtcclxuICAgICAgaXRlcmF0aW9uID0gYm94LmdldEF0dHJpYnV0ZSgnZGF0YS13b3ctaXRlcmF0aW9uJyk7XHJcbiAgICAgIHJldHVybiB0aGlzLmFuaW1hdGUoKGZ1bmN0aW9uKF90aGlzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIF90aGlzLmN1c3RvbVN0eWxlKGJveCwgaGlkZGVuLCBkdXJhdGlvbiwgZGVsYXksIGl0ZXJhdGlvbik7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkodGhpcykpO1xyXG4gICAgfTtcclxuXHJcbiAgICBXT1cucHJvdG90eXBlLmFuaW1hdGUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICgncmVxdWVzdEFuaW1hdGlvbkZyYW1lJyBpbiB3aW5kb3cpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSkoKTtcclxuXHJcbiAgICBXT1cucHJvdG90eXBlLnJlc2V0U3R5bGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGJveCwgaiwgbGVuLCByZWYsIHJlc3VsdHM7XHJcbiAgICAgIHJlZiA9IHRoaXMuYm94ZXM7XHJcbiAgICAgIHJlc3VsdHMgPSBbXTtcclxuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XHJcbiAgICAgICAgYm94ID0gcmVmW2pdO1xyXG4gICAgICAgIHJlc3VsdHMucHVzaChib3guc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICB9O1xyXG5cclxuICAgIFdPVy5wcm90b3R5cGUucmVzZXRBbmltYXRpb24gPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICB2YXIgdGFyZ2V0O1xyXG4gICAgICBpZiAoZXZlbnQudHlwZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2FuaW1hdGlvbmVuZCcpID49IDApIHtcclxuICAgICAgICB0YXJnZXQgPSBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudDtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0LmNsYXNzTmFtZSA9IHRhcmdldC5jbGFzc05hbWUucmVwbGFjZSh0aGlzLmNvbmZpZy5hbmltYXRlQ2xhc3MsICcnKS50cmltKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgV09XLnByb3RvdHlwZS5jdXN0b21TdHlsZSA9IGZ1bmN0aW9uKGJveCwgaGlkZGVuLCBkdXJhdGlvbiwgZGVsYXksIGl0ZXJhdGlvbikge1xyXG4gICAgICBpZiAoaGlkZGVuKSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZUFuaW1hdGlvbk5hbWUoYm94KTtcclxuICAgICAgfVxyXG4gICAgICBib3guc3R5bGUudmlzaWJpbGl0eSA9IGhpZGRlbiA/ICdoaWRkZW4nIDogJ3Zpc2libGUnO1xyXG4gICAgICBpZiAoZHVyYXRpb24pIHtcclxuICAgICAgICB0aGlzLnZlbmRvclNldChib3guc3R5bGUsIHtcclxuICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBkdXJhdGlvblxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChkZWxheSkge1xyXG4gICAgICAgIHRoaXMudmVuZG9yU2V0KGJveC5zdHlsZSwge1xyXG4gICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGRlbGF5XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGl0ZXJhdGlvbikge1xyXG4gICAgICAgIHRoaXMudmVuZG9yU2V0KGJveC5zdHlsZSwge1xyXG4gICAgICAgICAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IGl0ZXJhdGlvblxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudmVuZG9yU2V0KGJveC5zdHlsZSwge1xyXG4gICAgICAgIGFuaW1hdGlvbk5hbWU6IGhpZGRlbiA/ICdub25lJyA6IHRoaXMuY2FjaGVkQW5pbWF0aW9uTmFtZShib3gpXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gYm94O1xyXG4gICAgfTtcclxuXHJcbiAgICBXT1cucHJvdG90eXBlLnZlbmRvcnMgPSBbXCJtb3pcIiwgXCJ3ZWJraXRcIl07XHJcblxyXG4gICAgV09XLnByb3RvdHlwZS52ZW5kb3JTZXQgPSBmdW5jdGlvbihlbGVtLCBwcm9wZXJ0aWVzKSB7XHJcbiAgICAgIHZhciBuYW1lLCByZXN1bHRzLCB2YWx1ZSwgdmVuZG9yO1xyXG4gICAgICByZXN1bHRzID0gW107XHJcbiAgICAgIGZvciAobmFtZSBpbiBwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgdmFsdWUgPSBwcm9wZXJ0aWVzW25hbWVdO1xyXG4gICAgICAgIGVsZW1bXCJcIiArIG5hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgcmVzdWx0cy5wdXNoKChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBqLCBsZW4sIHJlZiwgcmVzdWx0czE7XHJcbiAgICAgICAgICByZWYgPSB0aGlzLnZlbmRvcnM7XHJcbiAgICAgICAgICByZXN1bHRzMSA9IFtdO1xyXG4gICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XHJcbiAgICAgICAgICAgIHZlbmRvciA9IHJlZltqXTtcclxuICAgICAgICAgICAgcmVzdWx0czEucHVzaChlbGVtW1wiXCIgKyB2ZW5kb3IgKyAobmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSkgKyAobmFtZS5zdWJzdHIoMSkpXSA9IHZhbHVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiByZXN1bHRzMTtcclxuICAgICAgICB9KS5jYWxsKHRoaXMpKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH07XHJcblxyXG4gICAgV09XLnByb3RvdHlwZS52ZW5kb3JDU1MgPSBmdW5jdGlvbihlbGVtLCBwcm9wZXJ0eSkge1xyXG4gICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdCwgc3R5bGUsIHZlbmRvcjtcclxuICAgICAgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xyXG4gICAgICByZXN1bHQgPSBzdHlsZS5nZXRQcm9wZXJ0eUNTU1ZhbHVlKHByb3BlcnR5KTtcclxuICAgICAgcmVmID0gdGhpcy52ZW5kb3JzO1xyXG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcclxuICAgICAgICB2ZW5kb3IgPSByZWZbal07XHJcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHN0eWxlLmdldFByb3BlcnR5Q1NTVmFsdWUoXCItXCIgKyB2ZW5kb3IgKyBcIi1cIiArIHByb3BlcnR5KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICBXT1cucHJvdG90eXBlLmFuaW1hdGlvbk5hbWUgPSBmdW5jdGlvbihib3gpIHtcclxuICAgICAgdmFyIGFuaW1hdGlvbk5hbWUsIGVycm9yO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGFuaW1hdGlvbk5hbWUgPSB0aGlzLnZlbmRvckNTUyhib3gsICdhbmltYXRpb24tbmFtZScpLmNzc1RleHQ7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgYW5pbWF0aW9uTmFtZSA9IGdldENvbXB1dGVkU3R5bGUoYm94KS5nZXRQcm9wZXJ0eVZhbHVlKCdhbmltYXRpb24tbmFtZScpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChhbmltYXRpb25OYW1lID09PSAnbm9uZScpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbk5hbWU7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgV09XLnByb3RvdHlwZS5jYWNoZUFuaW1hdGlvbk5hbWUgPSBmdW5jdGlvbihib3gpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0aW9uTmFtZUNhY2hlLnNldChib3gsIHRoaXMuYW5pbWF0aW9uTmFtZShib3gpKTtcclxuICAgIH07XHJcblxyXG4gICAgV09XLnByb3RvdHlwZS5jYWNoZWRBbmltYXRpb25OYW1lID0gZnVuY3Rpb24oYm94KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbk5hbWVDYWNoZS5nZXQoYm94KTtcclxuICAgIH07XHJcblxyXG4gICAgV09XLnByb3RvdHlwZS5zY3JvbGxIYW5kbGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbGVkID0gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgV09XLnByb3RvdHlwZS5zY3JvbGxDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgYm94O1xyXG4gICAgICBpZiAodGhpcy5zY3JvbGxlZCkge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJveGVzID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xyXG4gICAgICAgICAgcmVmID0gdGhpcy5ib3hlcztcclxuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcclxuICAgICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xyXG4gICAgICAgICAgICBib3ggPSByZWZbal07XHJcbiAgICAgICAgICAgIGlmICghKGJveCkpIHtcclxuICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUoYm94KSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2hvdyhib3gpO1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChib3gpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICAgICAgfSkuY2FsbCh0aGlzKTtcclxuICAgICAgICBpZiAoISh0aGlzLmJveGVzLmxlbmd0aCB8fCB0aGlzLmNvbmZpZy5saXZlKSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBXT1cucHJvdG90eXBlLm9mZnNldFRvcCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgdmFyIHRvcDtcclxuICAgICAgd2hpbGUgKGVsZW1lbnQub2Zmc2V0VG9wID09PSB2b2lkIDApIHtcclxuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICB9XHJcbiAgICAgIHRvcCA9IGVsZW1lbnQub2Zmc2V0VG9wO1xyXG4gICAgICB3aGlsZSAoZWxlbWVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50KSB7XHJcbiAgICAgICAgdG9wICs9IGVsZW1lbnQub2Zmc2V0VG9wO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0b3A7XHJcbiAgICB9O1xyXG5cclxuICAgIFdPVy5wcm90b3R5cGUuaXNWaXNpYmxlID0gZnVuY3Rpb24oYm94KSB7XHJcbiAgICAgIHZhciBib3R0b20sIG9mZnNldCwgdG9wLCB2aWV3Qm90dG9tLCB2aWV3VG9wO1xyXG4gICAgICBvZmZzZXQgPSBib3guZ2V0QXR0cmlidXRlKCdkYXRhLXdvdy1vZmZzZXQnKSB8fCB0aGlzLmNvbmZpZy5vZmZzZXQ7XHJcbiAgICAgIHZpZXdUb3AgPSAodGhpcy5jb25maWcuc2Nyb2xsQ29udGFpbmVyICYmIHRoaXMuY29uZmlnLnNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3ApIHx8IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuICAgICAgdmlld0JvdHRvbSA9IHZpZXdUb3AgKyBNYXRoLm1pbih0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0LCB0aGlzLnV0aWwoKS5pbm5lckhlaWdodCgpKSAtIG9mZnNldDtcclxuICAgICAgdG9wID0gdGhpcy5vZmZzZXRUb3AoYm94KTtcclxuICAgICAgYm90dG9tID0gdG9wICsgYm94LmNsaWVudEhlaWdodDtcclxuICAgICAgcmV0dXJuIHRvcCA8PSB2aWV3Qm90dG9tICYmIGJvdHRvbSA+PSB2aWV3VG9wO1xyXG4gICAgfTtcclxuXHJcbiAgICBXT1cucHJvdG90eXBlLnV0aWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3V0aWwgIT0gbnVsbCA/IHRoaXMuX3V0aWwgOiB0aGlzLl91dGlsID0gbmV3IFV0aWwoKTtcclxuICAgIH07XHJcblxyXG4gICAgV09XLnByb3RvdHlwZS5kaXNhYmxlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gIXRoaXMuY29uZmlnLm1vYmlsZSAmJiB0aGlzLnV0aWwoKS5pc01vYmlsZShuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIFdPVztcclxuXHJcbiAgfSkoKTtcclxuXHJcbn0pLmNhbGwod2luZG93KTtcclxuIiwiLy8gd2luZG93Lm9ubG9hZFxyXG5cclxuLy8gV2hlbiBkbyB0aGV5IGZpcmUgP1xyXG5cclxuLy8gICAgIHdpbmRvdy5vbmxvYWRcclxuXHJcbi8vIEJ5XHJcbi8vIGRlZmF1bHQsIGl0IGlzIGZpcmVkIHdoZW4gdGhlIGVudGlyZSBwYWdlIGxvYWRzLCBpbmNsdWRpbmcgaXRzIGNvbnRlbnQoaW1hZ2VzLCBjc3MsIHNjcmlwdHMsIGV0Yy4pXHJcbi8vIEluIHNvbWUgYnJvd3NlcnMgaXQgbm93IHRha2VzIG92ZXIgdGhlIHJvbGUgb2YgZG9jdW1lbnQub25sb2FkIGFuZCBmaXJlcyB3aGVuIHRoZSBET00gaXMgcmVhZHkgYXMgd2VsbC5cclxuLy8gZG9jdW1lbnQub25sb2FkXHJcblxyXG4vLyBJdCBpcyBjYWxsZWQgd2hlbiB0aGUgRE9NIGlzIHJlYWR5IHdoaWNoIGNhbiBiZSBwcmlvciB0byBpbWFnZXMgYW5kIG90aGVyIGV4dGVybmFsIGNvbnRlbnQgaXMgbG9hZGVkLlxyXG5cclxuXHJcblxyXG5cclxuXHJcbiQoZG9jdW1lbnQpLmZvdW5kYXRpb24oKTtcclxubmV3IFdPVygpLmluaXQoKTtcclxuLy8gdmFyIGxvZ29TcXVhcmUgPSBuZXcgSW1hZ2UoKVxyXG4vLyBsb2dvU3F1YXJlLnNyYyA9IFwiYXNzZXRzL2ltZy9sb2dvX2dlbl9oLnN2Z1wiO1xyXG4vLyB2YXIgbG9nb1JlY3QgPSBuZXcgSW1hZ2UoKVxyXG4vLyBsb2dvUmVjdC5zcmMgPSBcImFzc2V0cy9pbWcvbG9nb19nZW4uc3ZnXCI7XHJcblxyXG5cclxuLy8gJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgJCgnLmMtZHJvcGRvd24nKS5ob3ZlcihcclxuLy8gICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJy5jLXN1Yi1tZW51Jykuc2xpZGVEb3duKDIwMCk7XHJcbi8vICAgICAgICAgfSxcclxuLy8gICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJy5jLXN1Yi1tZW51Jykuc2xpZGVVcCgyMDApO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICk7XHJcbi8vIH0pO1xyXG5cclxuLy8gdmFyIHBvcnRGb2xpb0Nhcm91c2VsID0gJCgnI3BvcnRmb2xpb0Nhcm91c2VsJyk7XHJcbi8vICQoJyN0b3BDYXJvdXNlbCcpLm93bENhcm91c2VsKHtcclxuLy8gICAgIGxvb3A6IHRydWUsXHJcbi8vICAgICBtYXJnaW46IDEwLFxyXG4vLyAgICAgYXV0b3BsYXk6IHRydWUsXHJcbi8vICAgICByZXNwb25zaXZlOiB7XHJcbi8vICAgICAgICAgMDoge1xyXG4vLyAgICAgICAgICAgICBpdGVtczogMVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyBwb3J0Rm9saW9DYXJvdXNlbC5vd2xDYXJvdXNlbCh7XHJcbi8vICAgICBsb29wOiB0cnVlLFxyXG4vLyAgICAgbWFyZ2luOiAxMCxcclxuLy8gICAgIGF1dG9wbGF5OiB0cnVlLFxyXG4vLyAgICAgbmF2OiB0cnVlLFxyXG4vLyAgICAgcmVzcG9uc2l2ZToge1xyXG4vLyAgICAgICAgIDA6IHtcclxuLy8gICAgICAgICAgICAgaXRlbXM6IDFcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG4vLyBwb3J0Rm9saW9DYXJvdXNlbC5vbignY2hhbmdlZC5vd2wuY2Fyb3VzZWwnLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcclxuLy8gICAgIHZhciBjdXJyZW50ID0gcHJvcGVydHkuaXRlbS5pbmRleDtcclxuLy8gICAgIHZhciBvd2xJbWcgPSAkKHByb3BlcnR5LnRhcmdldCkuZmluZChcIi5vd2wtaXRlbVwiKS5lcShjdXJyZW50KS5maW5kKFwiaW1nXCIpO1xyXG4vLyAgICAgLy9jb25zb2xlLmxvZygnSW1hZ2UgY3VycmVudCBpcyAnICsgdmliSW1hZ2UuYXR0cignc3JjJykpO1xyXG4vLyAgICAgdmFyIHZpYkltYWdlID0gbmV3IEltYWdlKCk7XHJcbi8vICAgICB2aWJJbWFnZS5zcmMgPSBvd2xJbWcuYXR0cignc3JjJyk7XHJcbi8vICAgIC8vIHZhciB2aWJyYW50ID0gbmV3IFZpYnJhbnQodmliSW1hZ2UpO1xyXG4vLyAgICAvLyB2YXIgc3dhdGNoZXMgPSB2aWJyYW50LnN3YXRjaGVzKCk7XHJcbi8vICAgIC8vIGNvbnNvbGUubG9nKHN3YXRjaGVzWydWaWJyYW50J10uZ2V0SGV4KCkpO1xyXG4vLyAgICAgLy8kKCcucG9ydGZvbGlvLWJnJykuY3NzKFwiYmFja2dyb3VuZFwiLCBcIlwiICsgc3dhdGNoZXNbJ0RhcmtWaWJyYW50J10uZ2V0SGV4KCkpO1xyXG4vLyAgICAgLypcclxuLy8gICAgICAqIFJlc3VsdHMgaW50bzpcclxuLy8gICAgICAqIFZpYnJhbnQgIzdhNDQyNlxyXG4vLyAgICAgICogTXV0ZWQgIzdiOWVhZVxyXG4vLyAgICAgICogRGFya1ZpYnJhbnQgIzM0ODk0NVxyXG4vLyAgICAgICogRGFya011dGVkICMxNDE0MTRcclxuLy8gICAgICAqIExpZ2h0VmlicmFudCAjZjNjY2I0XHJcbi8vICAgICAgKi9cclxuLy8gICAgICAgICB2YXIgY29sb3JUaGllZiA9IG5ldyBDb2xvclRoaWVmKCk7XHJcbi8vICAgICAgICAgdmFyIGNvbCA9IGNvbG9yVGhpZWYuZ2V0Q29sb3IodmliSW1hZ2UpO1xyXG4vLyAgICAgICAgIHZhciBjb2xTdHJpbmcgPSBcInJnYihcIiArIGNvbCtcIilcIjtcclxuLy8gICAgICAgICBjb25zb2xlLmxvZyhjb2xTdHJpbmcpO1xyXG4vLyAgICAgICAgICQoJy5wb3J0Zm9saW8tYmcnKS5jc3MoXCJiYWNrZ3JvdW5kXCIsIGNvbFN0cmluZyk7XHJcbi8vIH0pO1xyXG5cclxuXHJcblxyXG4vLyAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uIChldmVudCkge1xyXG4vLyAgICAgdmFyIHNjcm9sbCA9ICQod2luZG93KS5zY3JvbGxUb3AoKTtcclxuLy8gICAgIGlmIChzY3JvbGwgPiAzMDApIHtcclxuLy8gICAgICAgICAkKCcudG9wLWJhcicpLnJlbW92ZUNsYXNzKCd0b3AtYmFyLWJlZm9yZScpO1xyXG4vLyAgICAgICAgICQoJy50b3AtYmFyJykuYWRkQ2xhc3MoJ3RvcC1iYXItYWZ0ZXInKTtcclxuLy8gICAgICAgICAkKFwiI2xvZ29JbWFnZVwiKS5hdHRyKFwic3JjXCIsIGxvZ29TcXVhcmUuc3JjKTtcclxuLy8gICAgICAgICAvL2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9nb0ltYWdlXCIpLnNyYyA9IGxvZ29TcXVhcmUuc3JjO1xyXG4vLyAgICAgfSBlbHNlIHtcclxuXHJcbi8vICAgICAgICAgJCgnLnRvcC1iYXInKS5hZGRDbGFzcygndG9wLWJhci1iZWZvcmUnKTtcclxuLy8gICAgICAgICAkKCcudG9wLWJhcicpLnJlbW92ZUNsYXNzKCd0b3AtYmFyLWFmdGVyJyk7XHJcbi8vICAgICAgICAgJChcIiNsb2dvSW1hZ2VcIikuYXR0cihcInNyY1wiLCBsb2dvUmVjdC5zcmMpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gfSk7XHJcblxyXG4vLyB2YXIgaXNtZW51YWN0diA9IGZhbHNlO1xyXG4vLyB2YXIgYW5pbXRpbWUgPSA3MDA7IC8vS2VlcCB0aGlzIHZhbHVlIHNhbWUgYXMgXCIkYW5pbXRpbWVcIiBpbiBzY3NzIGZpbGUgXHJcblxyXG4vLyAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcblxyXG4vLyAgICAgdmFyIG1lbnVfaWNvbiA9ICQoJyNtZW51LWljb24nKTtcclxuLy8gICAgIHZhciBjX3BhdGggPSAkKCcjY19wYXRoJyk7XHJcbi8vICAgICB2YXIgdF9saW5lID0gJCgnI3RfbGluZScpO1xyXG4vLyAgICAgdmFyIGZfbGluZSA9ICQoJyNmX2xpbmUnKTtcclxuXHJcbi8vICAgICBtZW51X2ljb24uY2xpY2soZnVuY3Rpb24gKCkge1xyXG5cclxuLy8gICAgICAgICBpZiAoIWlzbWVudWFjdHYpIHtcclxuLy8gICAgICAgICAgICAgY19wYXRoLmFkZENsYXNzKCdwYXRoLWFuaW0nKTtcclxuXHJcbi8vICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgICAgICAgICAgY19wYXRoLmFkZENsYXNzKCdjcGF0aC1lbmQnKS5yZW1vdmVDbGFzcygncGF0aC1hbmltJyk7XHJcbi8vICAgICAgICAgICAgICAgICB0X2xpbmUuYWRkQ2xhc3MoJ2xpbmVtb3ZldXAnKTtcclxuLy8gICAgICAgICAgICAgICAgIGZfbGluZS5hZGRDbGFzcygnbGluZW1vdmVkb3duJyk7XHJcbi8vICAgICAgICAgICAgICAgICBpc21lbnVhY3R2ID0gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgfSwgYW5pbXRpbWUpO1xyXG5cclxuLy8gICAgICAgICB9IGVsc2Uge1xyXG5cclxuLy8gICAgICAgICAgICAgY19wYXRoLmFkZENsYXNzKCdwYXRoLWFuaW0tcmV2Jyk7XHJcbi8vICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgICAgICAgICAgdF9saW5lLnJlbW92ZUNsYXNzKCdsaW5lbW92ZXVwJyk7XHJcbi8vICAgICAgICAgICAgICAgICBmX2xpbmUucmVtb3ZlQ2xhc3MoJ2xpbmVtb3ZlZG93bicpO1xyXG4vLyAgICAgICAgICAgICAgICAgY19wYXRoLnJlbW92ZUNsYXNzKCdjcGF0aC1lbmQgcGF0aC1hbmltLXJldicpO1xyXG4vLyAgICAgICAgICAgICAgICAgaXNtZW51YWN0diA9IGZhbHNlO1xyXG4vLyAgICAgICAgICAgICB9LCBhbmltdGltZSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSk7XHJcbi8vIH0pO1xyXG4vLyAgICQod2luZG93KS5sb2FkKGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgICAkKCcjbG9hZGVyJykuZmFkZU91dCgnc2xvdycsIGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcclxuLy8gICAgICAgfSk7XHJcbi8vICAgfSk7XHJcblxyXG5cclxuLy8gJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgdmFyIG1vdmVtZW50U3RyZW5ndGggPSAyNTtcclxuLy8gICAgIHZhciBoZWlnaHQgPSBtb3ZlbWVudFN0cmVuZ3RoIC8gJCh3aW5kb3cpLmhlaWdodCgpO1xyXG4vLyAgICAgdmFyIHdpZHRoID0gbW92ZW1lbnRTdHJlbmd0aCAvICQod2luZG93KS53aWR0aCgpO1xyXG4vLyAgICAgJChcIi5ob21lLXRvcC1jb250YWluZXJcIikubW91c2Vtb3ZlKGZ1bmN0aW9uIChlKSB7XHJcbi8vICAgICAgICAgdmFyIHBhZ2VYID0gZS5wYWdlWCAtICgkKHdpbmRvdykud2lkdGgoKSAvIDIpO1xyXG4vLyAgICAgICAgIHZhciBwYWdlWSA9IGUucGFnZVkgLSAoJCh3aW5kb3cpLmhlaWdodCgpIC8gMik7XHJcbi8vICAgICAgICAgdmFyIG5ld3ZhbHVlWCA9IHdpZHRoICogcGFnZVggKiAtMyA7XHJcbi8vICAgICAgICAgdmFyIG5ld3ZhbHVlWSA9IGhlaWdodCAqIHBhZ2VZICogLTM7XHJcbi8vICAgICAgICAgJCgnLmhvbWUtdG9wLWNvbnRhaW5lcicpLmNzcyhcImJhY2tncm91bmQtcG9zaXRpb25cIiwgbmV3dmFsdWVYICsgXCJweCAgICAgXCIgKyBuZXd2YWx1ZVkgKyBcInB4XCIpO1xyXG4vLyAgICAgfSk7XHJcbi8vIH0pOyJdfQ==
